/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.task.database.autogen.tables.records;


import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import pro.fessional.wings.tiny.task.database.autogen.tables.WinTaskDefineTable;
import pro.fessional.wings.tiny.task.database.autogen.tables.interfaces.IWinTaskDefine;
import pro.fessional.wings.tiny.task.database.autogen.tables.pojos.WinTaskDefine;


/**
 * The table <code>wings.win_task_define</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinTaskDefineRecord extends UpdatableRecordImpl<WinTaskDefineRecord> implements IWinTaskDefine {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>win_task_define.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>win_task_define.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>win_task_define.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>win_task_define.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>win_task_define.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>win_task_define.modify_dt</code>.
     */
    @Override
    public LocalDateTime getModifyDt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>win_task_define.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>win_task_define.delete_dt</code>.
     */
    @Override
    public LocalDateTime getDeleteDt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>win_task_define.commit_id</code>.
     */
    @Override
    public void setCommitId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>win_task_define.commit_id</code>.
     */
    @Override
    public Long getCommitId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>win_task_define.propkey</code>.
     */
    @Override
    public void setPropkey(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>win_task_define.propkey</code>.
     */
    @Override
    public String getPropkey() {
        return (String) get(5);
    }

    /**
     * Setter for <code>win_task_define.enabled</code>.
     */
    @Override
    public void setEnabled(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>win_task_define.enabled</code>.
     */
    @Override
    public Boolean getEnabled() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>win_task_define.autorun</code>.
     */
    @Override
    public void setAutorun(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>win_task_define.autorun</code>.
     */
    @Override
    public Boolean getAutorun() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>win_task_define.version</code>.
     */
    @Override
    public void setVersion(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>win_task_define.version</code>.
     */
    @Override
    public Integer getVersion() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>win_task_define.tasker_bean</code>.
     */
    @Override
    public void setTaskerBean(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>win_task_define.tasker_bean</code>.
     */
    @Override
    public String getTaskerBean() {
        return (String) get(9);
    }

    /**
     * Setter for <code>win_task_define.tasker_para</code>.
     */
    @Override
    public void setTaskerPara(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>win_task_define.tasker_para</code>.
     */
    @Override
    public String getTaskerPara() {
        return (String) get(10);
    }

    /**
     * Setter for <code>win_task_define.tasker_name</code>.
     */
    @Override
    public void setTaskerName(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>win_task_define.tasker_name</code>.
     */
    @Override
    public String getTaskerName() {
        return (String) get(11);
    }

    /**
     * Setter for <code>win_task_define.tasker_fast</code>.
     */
    @Override
    public void setTaskerFast(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for <code>win_task_define.tasker_fast</code>.
     */
    @Override
    public Boolean getTaskerFast() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>win_task_define.tasker_apps</code>.
     */
    @Override
    public void setTaskerApps(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>win_task_define.tasker_apps</code>.
     */
    @Override
    public String getTaskerApps() {
        return (String) get(13);
    }

    /**
     * Setter for <code>win_task_define.tasker_runs</code>.
     */
    @Override
    public void setTaskerRuns(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>win_task_define.tasker_runs</code>.
     */
    @Override
    public String getTaskerRuns() {
        return (String) get(14);
    }

    /**
     * Setter for <code>win_task_define.notice_bean</code>.
     */
    @Override
    public void setNoticeBean(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>win_task_define.notice_bean</code>.
     */
    @Override
    public String getNoticeBean() {
        return (String) get(15);
    }

    /**
     * Setter for <code>win_task_define.notice_when</code>.
     */
    @Override
    public void setNoticeWhen(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>win_task_define.notice_when</code>.
     */
    @Override
    public String getNoticeWhen() {
        return (String) get(16);
    }

    /**
     * Setter for <code>win_task_define.notice_conf</code>.
     */
    @Override
    public void setNoticeConf(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>win_task_define.notice_conf</code>.
     */
    @Override
    public String getNoticeConf() {
        return (String) get(17);
    }

    /**
     * Setter for <code>win_task_define.timing_zone</code>.
     */
    @Override
    public void setTimingZone(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>win_task_define.timing_zone</code>.
     */
    @Override
    public String getTimingZone() {
        return (String) get(18);
    }

    /**
     * Setter for <code>win_task_define.timing_type</code>.
     */
    @Override
    public void setTimingType(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>win_task_define.timing_type</code>.
     */
    @Override
    public String getTimingType() {
        return (String) get(19);
    }

    /**
     * Setter for <code>win_task_define.timing_cron</code>.
     */
    @Override
    public void setTimingCron(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>win_task_define.timing_cron</code>.
     */
    @Override
    public String getTimingCron() {
        return (String) get(20);
    }

    /**
     * Setter for <code>win_task_define.timing_idle</code>.
     */
    @Override
    public void setTimingIdle(Integer value) {
        set(21, value);
    }

    /**
     * Getter for <code>win_task_define.timing_idle</code>.
     */
    @Override
    public Integer getTimingIdle() {
        return (Integer) get(21);
    }

    /**
     * Setter for <code>win_task_define.timing_rate</code>.
     */
    @Override
    public void setTimingRate(Integer value) {
        set(22, value);
    }

    /**
     * Getter for <code>win_task_define.timing_rate</code>.
     */
    @Override
    public Integer getTimingRate() {
        return (Integer) get(22);
    }

    /**
     * Setter for <code>win_task_define.timing_tune</code>.
     */
    @Override
    public void setTimingTune(Integer value) {
        set(23, value);
    }

    /**
     * Getter for <code>win_task_define.timing_tune</code>.
     */
    @Override
    public Integer getTimingTune() {
        return (Integer) get(23);
    }

    /**
     * Setter for <code>win_task_define.timing_miss</code>.
     */
    @Override
    public void setTimingMiss(Integer value) {
        set(24, value);
    }

    /**
     * Getter for <code>win_task_define.timing_miss</code>.
     */
    @Override
    public Integer getTimingMiss() {
        return (Integer) get(24);
    }

    /**
     * Setter for <code>win_task_define.timing_beat</code>.
     */
    @Override
    public void setTimingBeat(Integer value) {
        set(25, value);
    }

    /**
     * Getter for <code>win_task_define.timing_beat</code>.
     */
    @Override
    public Integer getTimingBeat() {
        return (Integer) get(25);
    }

    /**
     * Setter for <code>win_task_define.during_from</code>.
     */
    @Override
    public void setDuringFrom(String value) {
        set(26, value);
    }

    /**
     * Getter for <code>win_task_define.during_from</code>.
     */
    @Override
    public String getDuringFrom() {
        return (String) get(26);
    }

    /**
     * Setter for <code>win_task_define.during_stop</code>.
     */
    @Override
    public void setDuringStop(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>win_task_define.during_stop</code>.
     */
    @Override
    public String getDuringStop() {
        return (String) get(27);
    }

    /**
     * Setter for <code>win_task_define.during_exec</code>.
     */
    @Override
    public void setDuringExec(Integer value) {
        set(28, value);
    }

    /**
     * Getter for <code>win_task_define.during_exec</code>.
     */
    @Override
    public Integer getDuringExec() {
        return (Integer) get(28);
    }

    /**
     * Setter for <code>win_task_define.during_fail</code>.
     */
    @Override
    public void setDuringFail(Integer value) {
        set(29, value);
    }

    /**
     * Getter for <code>win_task_define.during_fail</code>.
     */
    @Override
    public Integer getDuringFail() {
        return (Integer) get(29);
    }

    /**
     * Setter for <code>win_task_define.during_done</code>.
     */
    @Override
    public void setDuringDone(Integer value) {
        set(30, value);
    }

    /**
     * Getter for <code>win_task_define.during_done</code>.
     */
    @Override
    public Integer getDuringDone() {
        return (Integer) get(30);
    }

    /**
     * Setter for <code>win_task_define.during_boot</code>.
     */
    @Override
    public void setDuringBoot(Integer value) {
        set(31, value);
    }

    /**
     * Getter for <code>win_task_define.during_boot</code>.
     */
    @Override
    public Integer getDuringBoot() {
        return (Integer) get(31);
    }

    /**
     * Setter for <code>win_task_define.result_keep</code>.
     */
    @Override
    public void setResultKeep(Integer value) {
        set(32, value);
    }

    /**
     * Getter for <code>win_task_define.result_keep</code>.
     */
    @Override
    public Integer getResultKeep() {
        return (Integer) get(32);
    }

    /**
     * Setter for <code>win_task_define.last_exec</code>.
     */
    @Override
    public void setLastExec(LocalDateTime value) {
        set(33, value);
    }

    /**
     * Getter for <code>win_task_define.last_exec</code>.
     */
    @Override
    public LocalDateTime getLastExec() {
        return (LocalDateTime) get(33);
    }

    /**
     * Setter for <code>win_task_define.last_fail</code>.
     */
    @Override
    public void setLastFail(LocalDateTime value) {
        set(34, value);
    }

    /**
     * Getter for <code>win_task_define.last_fail</code>.
     */
    @Override
    public LocalDateTime getLastFail() {
        return (LocalDateTime) get(34);
    }

    /**
     * Setter for <code>win_task_define.last_done</code>.
     */
    @Override
    public void setLastDone(LocalDateTime value) {
        set(35, value);
    }

    /**
     * Getter for <code>win_task_define.last_done</code>.
     */
    @Override
    public LocalDateTime getLastDone() {
        return (LocalDateTime) get(35);
    }

    /**
     * Setter for <code>win_task_define.next_exec</code>.
     */
    @Override
    public void setNextExec(LocalDateTime value) {
        set(36, value);
    }

    /**
     * Getter for <code>win_task_define.next_exec</code>.
     */
    @Override
    public LocalDateTime getNextExec() {
        return (LocalDateTime) get(36);
    }

    /**
     * Setter for <code>win_task_define.next_lock</code>.
     */
    @Override
    public void setNextLock(Integer value) {
        set(37, value);
    }

    /**
     * Getter for <code>win_task_define.next_lock</code>.
     */
    @Override
    public Integer getNextLock() {
        return (Integer) get(37);
    }

    /**
     * Setter for <code>win_task_define.dur_fail</code>.
     */
    @Override
    public void setDurFail(Integer value) {
        set(38, value);
    }

    /**
     * Getter for <code>win_task_define.dur_fail</code>.
     */
    @Override
    public Integer getDurFail() {
        return (Integer) get(38);
    }

    /**
     * Setter for <code>win_task_define.sum_exec</code>.
     */
    @Override
    public void setSumExec(Integer value) {
        set(39, value);
    }

    /**
     * Getter for <code>win_task_define.sum_exec</code>.
     */
    @Override
    public Integer getSumExec() {
        return (Integer) get(39);
    }

    /**
     * Setter for <code>win_task_define.sum_fail</code>.
     */
    @Override
    public void setSumFail(Integer value) {
        set(40, value);
    }

    /**
     * Getter for <code>win_task_define.sum_fail</code>.
     */
    @Override
    public Integer getSumFail() {
        return (Integer) get(40);
    }

    /**
     * Setter for <code>win_task_define.sum_done</code>.
     */
    @Override
    public void setSumDone(Integer value) {
        set(41, value);
    }

    /**
     * Getter for <code>win_task_define.sum_done</code>.
     */
    @Override
    public Integer getSumDone() {
        return (Integer) get(41);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinTaskDefine from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setPropkey(from.getPropkey());
        setEnabled(from.getEnabled());
        setAutorun(from.getAutorun());
        setVersion(from.getVersion());
        setTaskerBean(from.getTaskerBean());
        setTaskerPara(from.getTaskerPara());
        setTaskerName(from.getTaskerName());
        setTaskerFast(from.getTaskerFast());
        setTaskerApps(from.getTaskerApps());
        setTaskerRuns(from.getTaskerRuns());
        setNoticeBean(from.getNoticeBean());
        setNoticeWhen(from.getNoticeWhen());
        setNoticeConf(from.getNoticeConf());
        setTimingZone(from.getTimingZone());
        setTimingType(from.getTimingType());
        setTimingCron(from.getTimingCron());
        setTimingIdle(from.getTimingIdle());
        setTimingRate(from.getTimingRate());
        setTimingTune(from.getTimingTune());
        setTimingMiss(from.getTimingMiss());
        setTimingBeat(from.getTimingBeat());
        setDuringFrom(from.getDuringFrom());
        setDuringStop(from.getDuringStop());
        setDuringExec(from.getDuringExec());
        setDuringFail(from.getDuringFail());
        setDuringDone(from.getDuringDone());
        setDuringBoot(from.getDuringBoot());
        setResultKeep(from.getResultKeep());
        setLastExec(from.getLastExec());
        setLastFail(from.getLastFail());
        setLastDone(from.getLastDone());
        setNextExec(from.getNextExec());
        setNextLock(from.getNextLock());
        setDurFail(from.getDurFail());
        setSumExec(from.getSumExec());
        setSumFail(from.getSumFail());
        setSumDone(from.getSumDone());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IWinTaskDefine> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WinTaskDefineRecord
     */
    public WinTaskDefineRecord() {
        super(WinTaskDefineTable.WinTaskDefine);
    }

    /**
     * Create a detached, initialised WinTaskDefineRecord
     */
    public WinTaskDefineRecord(Long id, LocalDateTime createDt, LocalDateTime modifyDt, LocalDateTime deleteDt, Long commitId, String propkey, Boolean enabled, Boolean autorun, Integer version, String taskerBean, String taskerPara, String taskerName, Boolean taskerFast, String taskerApps, String taskerRuns, String noticeBean, String noticeWhen, String noticeConf, String timingZone, String timingType, String timingCron, Integer timingIdle, Integer timingRate, Integer timingTune, Integer timingMiss, Integer timingBeat, String duringFrom, String duringStop, Integer duringExec, Integer duringFail, Integer duringDone, Integer duringBoot, Integer resultKeep, LocalDateTime lastExec, LocalDateTime lastFail, LocalDateTime lastDone, LocalDateTime nextExec, Integer nextLock, Integer durFail, Integer sumExec, Integer sumFail, Integer sumDone) {
        super(WinTaskDefineTable.WinTaskDefine);

        setId(id);
        setCreateDt(createDt);
        setModifyDt(modifyDt);
        setDeleteDt(deleteDt);
        setCommitId(commitId);
        setPropkey(propkey);
        setEnabled(enabled);
        setAutorun(autorun);
        setVersion(version);
        setTaskerBean(taskerBean);
        setTaskerPara(taskerPara);
        setTaskerName(taskerName);
        setTaskerFast(taskerFast);
        setTaskerApps(taskerApps);
        setTaskerRuns(taskerRuns);
        setNoticeBean(noticeBean);
        setNoticeWhen(noticeWhen);
        setNoticeConf(noticeConf);
        setTimingZone(timingZone);
        setTimingType(timingType);
        setTimingCron(timingCron);
        setTimingIdle(timingIdle);
        setTimingRate(timingRate);
        setTimingTune(timingTune);
        setTimingMiss(timingMiss);
        setTimingBeat(timingBeat);
        setDuringFrom(duringFrom);
        setDuringStop(duringStop);
        setDuringExec(duringExec);
        setDuringFail(duringFail);
        setDuringDone(duringDone);
        setDuringBoot(duringBoot);
        setResultKeep(resultKeep);
        setLastExec(lastExec);
        setLastFail(lastFail);
        setLastDone(lastDone);
        setNextExec(nextExec);
        setNextLock(nextLock);
        setDurFail(durFail);
        setSumExec(sumExec);
        setSumFail(sumFail);
        setSumDone(sumDone);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised WinTaskDefineRecord
     */
    public WinTaskDefineRecord(WinTaskDefine value) {
        super(WinTaskDefineTable.WinTaskDefine);

        if (value != null) {
            setId(value.getId());
            setCreateDt(value.getCreateDt());
            setModifyDt(value.getModifyDt());
            setDeleteDt(value.getDeleteDt());
            setCommitId(value.getCommitId());
            setPropkey(value.getPropkey());
            setEnabled(value.getEnabled());
            setAutorun(value.getAutorun());
            setVersion(value.getVersion());
            setTaskerBean(value.getTaskerBean());
            setTaskerPara(value.getTaskerPara());
            setTaskerName(value.getTaskerName());
            setTaskerFast(value.getTaskerFast());
            setTaskerApps(value.getTaskerApps());
            setTaskerRuns(value.getTaskerRuns());
            setNoticeBean(value.getNoticeBean());
            setNoticeWhen(value.getNoticeWhen());
            setNoticeConf(value.getNoticeConf());
            setTimingZone(value.getTimingZone());
            setTimingType(value.getTimingType());
            setTimingCron(value.getTimingCron());
            setTimingIdle(value.getTimingIdle());
            setTimingRate(value.getTimingRate());
            setTimingTune(value.getTimingTune());
            setTimingMiss(value.getTimingMiss());
            setTimingBeat(value.getTimingBeat());
            setDuringFrom(value.getDuringFrom());
            setDuringStop(value.getDuringStop());
            setDuringExec(value.getDuringExec());
            setDuringFail(value.getDuringFail());
            setDuringDone(value.getDuringDone());
            setDuringBoot(value.getDuringBoot());
            setResultKeep(value.getResultKeep());
            setLastExec(value.getLastExec());
            setLastFail(value.getLastFail());
            setLastDone(value.getLastDone());
            setNextExec(value.getNextExec());
            setNextLock(value.getNextLock());
            setDurFail(value.getDurFail());
            setSumExec(value.getSumExec());
            setSumFail(value.getSumFail());
            setSumDone(value.getSumDone());
            resetChangedOnNotNull();
        }
    }
}
