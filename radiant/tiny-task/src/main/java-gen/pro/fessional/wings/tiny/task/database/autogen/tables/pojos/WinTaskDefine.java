/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.task.database.autogen.tables.pojos;


import java.beans.Transient;
import java.time.LocalDateTime;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;

import javax.annotation.processing.Generated;

import pro.fessional.wings.tiny.task.database.autogen.tables.interfaces.IWinTaskDefine;


/**
 * The table <code>wings.win_task_define</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinTaskDefine implements IWinTaskDefine {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private LocalDateTime deleteDt;
    private Long commitId;
    private String propkey;
    private Boolean enabled;
    private Boolean autorun;
    private Integer version;
    private String taskerBean;
    private String taskerPara;
    private String taskerName;
    private Boolean taskerFast;
    private String taskerApps;
    private String taskerRuns;
    private String noticeBean;
    private String noticeWhen;
    private String noticeConf;
    private String timingZone;
    private String timingType;
    private String timingCron;
    private Integer timingIdle;
    private Integer timingRate;
    private Integer timingTune;
    private Integer timingMiss;
    private Integer timingBeat;
    private String duringFrom;
    private String duringStop;
    private Integer duringExec;
    private Integer duringFail;
    private Integer duringDone;
    private Integer duringBoot;
    private Integer resultKeep;
    private LocalDateTime lastExec;
    private LocalDateTime lastExit;
    private Boolean lastFail;
    private LocalDateTime nextExec;
    private Integer nextLock;
    private Integer durFail;
    private Integer sumExec;
    private Integer sumFail;
    private Integer sumDone;

    public WinTaskDefine() {}

    public WinTaskDefine(IWinTaskDefine value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.propkey = value.getPropkey();
        this.enabled = value.getEnabled();
        this.autorun = value.getAutorun();
        this.version = value.getVersion();
        this.taskerBean = value.getTaskerBean();
        this.taskerPara = value.getTaskerPara();
        this.taskerName = value.getTaskerName();
        this.taskerFast = value.getTaskerFast();
        this.taskerApps = value.getTaskerApps();
        this.taskerRuns = value.getTaskerRuns();
        this.noticeBean = value.getNoticeBean();
        this.noticeWhen = value.getNoticeWhen();
        this.noticeConf = value.getNoticeConf();
        this.timingZone = value.getTimingZone();
        this.timingType = value.getTimingType();
        this.timingCron = value.getTimingCron();
        this.timingIdle = value.getTimingIdle();
        this.timingRate = value.getTimingRate();
        this.timingTune = value.getTimingTune();
        this.timingMiss = value.getTimingMiss();
        this.timingBeat = value.getTimingBeat();
        this.duringFrom = value.getDuringFrom();
        this.duringStop = value.getDuringStop();
        this.duringExec = value.getDuringExec();
        this.duringFail = value.getDuringFail();
        this.duringDone = value.getDuringDone();
        this.duringBoot = value.getDuringBoot();
        this.resultKeep = value.getResultKeep();
        this.lastExec = value.getLastExec();
        this.lastExit = value.getLastExit();
        this.lastFail = value.getLastFail();
        this.nextExec = value.getNextExec();
        this.nextLock = value.getNextLock();
        this.durFail = value.getDurFail();
        this.sumExec = value.getSumExec();
        this.sumFail = value.getSumFail();
        this.sumDone = value.getSumDone();
    }

    public WinTaskDefine(
        Long id,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        LocalDateTime deleteDt,
        Long commitId,
        String propkey,
        Boolean enabled,
        Boolean autorun,
        Integer version,
        String taskerBean,
        String taskerPara,
        String taskerName,
        Boolean taskerFast,
        String taskerApps,
        String taskerRuns,
        String noticeBean,
        String noticeWhen,
        String noticeConf,
        String timingZone,
        String timingType,
        String timingCron,
        Integer timingIdle,
        Integer timingRate,
        Integer timingTune,
        Integer timingMiss,
        Integer timingBeat,
        String duringFrom,
        String duringStop,
        Integer duringExec,
        Integer duringFail,
        Integer duringDone,
        Integer duringBoot,
        Integer resultKeep,
        LocalDateTime lastExec,
        LocalDateTime lastExit,
        Boolean lastFail,
        LocalDateTime nextExec,
        Integer nextLock,
        Integer durFail,
        Integer sumExec,
        Integer sumFail,
        Integer sumDone
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.propkey = propkey;
        this.enabled = enabled;
        this.autorun = autorun;
        this.version = version;
        this.taskerBean = taskerBean;
        this.taskerPara = taskerPara;
        this.taskerName = taskerName;
        this.taskerFast = taskerFast;
        this.taskerApps = taskerApps;
        this.taskerRuns = taskerRuns;
        this.noticeBean = noticeBean;
        this.noticeWhen = noticeWhen;
        this.noticeConf = noticeConf;
        this.timingZone = timingZone;
        this.timingType = timingType;
        this.timingCron = timingCron;
        this.timingIdle = timingIdle;
        this.timingRate = timingRate;
        this.timingTune = timingTune;
        this.timingMiss = timingMiss;
        this.timingBeat = timingBeat;
        this.duringFrom = duringFrom;
        this.duringStop = duringStop;
        this.duringExec = duringExec;
        this.duringFail = duringFail;
        this.duringDone = duringDone;
        this.duringBoot = duringBoot;
        this.resultKeep = resultKeep;
        this.lastExec = lastExec;
        this.lastExit = lastExit;
        this.lastFail = lastFail;
        this.nextExec = nextExec;
        this.nextLock = nextLock;
        this.durFail = durFail;
        this.sumExec = sumExec;
        this.sumFail = sumFail;
        this.sumDone = sumDone;
    }

    /**
     * Getter for <code>win_task_define.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_task_define.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    @Transient
    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>win_task_define.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_task_define.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIf(Supplier<LocalDateTime> createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt.get();
        }
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    @Transient
    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (!bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    @Transient
    public void setCreateDtIf(UnaryOperator<LocalDateTime> createDt) {
        this.createDt = createDt.apply(this.createDt);
    }


    /**
     * Getter for <code>win_task_define.modify_dt</code>.
     */
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>win_task_define.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    @Transient
    public void setModifyDtIf(LocalDateTime modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt;
        }
    }

    @Transient
    public void setModifyDtIf(Supplier<LocalDateTime> modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt.get();
        }
    }

    @Transient
    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    @Transient
    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    @Transient
    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    @Transient
    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (!bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    @Transient
    public void setModifyDtIf(UnaryOperator<LocalDateTime> modifyDt) {
        this.modifyDt = modifyDt.apply(this.modifyDt);
    }


    /**
     * Getter for <code>win_task_define.delete_dt</code>.
     */
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>win_task_define.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    @Transient
    public void setDeleteDtIf(LocalDateTime deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt;
        }
    }

    @Transient
    public void setDeleteDtIf(Supplier<LocalDateTime> deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt.get();
        }
    }

    @Transient
    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    @Transient
    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    @Transient
    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    @Transient
    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (!bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    @Transient
    public void setDeleteDtIf(UnaryOperator<LocalDateTime> deleteDt) {
        this.deleteDt = deleteDt.apply(this.deleteDt);
    }


    /**
     * Getter for <code>win_task_define.commit_id</code>.
     */
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>win_task_define.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    @Transient
    public void setCommitIdIf(Long commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId;
        }
    }

    @Transient
    public void setCommitIdIf(Supplier<Long> commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId.get();
        }
    }

    @Transient
    public void setCommitIdIf(Long commitId, Predicate<Long> bool) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    @Transient
    public void setCommitIdIf(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    @Transient
    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    @Transient
    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (!bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    @Transient
    public void setCommitIdIf(UnaryOperator<Long> commitId) {
        this.commitId = commitId.apply(this.commitId);
    }


    /**
     * Getter for <code>win_task_define.propkey</code>.
     */
    @Override
    public String getPropkey() {
        return this.propkey;
    }

    /**
     * Setter for <code>win_task_define.propkey</code>.
     */
    @Override
    public void setPropkey(String propkey) {
        this.propkey = propkey;
    }

    @Transient
    public void setPropkeyIf(String propkey, boolean bool) {
        if (bool) {
            this.propkey = propkey;
        }
    }

    @Transient
    public void setPropkeyIf(Supplier<String> propkey, boolean bool) {
        if (bool) {
            this.propkey = propkey.get();
        }
    }

    @Transient
    public void setPropkeyIf(String propkey, Predicate<String> bool) {
        if (bool.test(propkey)) {
            this.propkey = propkey;
        }
    }

    @Transient
    public void setPropkeyIf(String propkey, Predicate<String> bool, Supplier<String>... propkeys) {
        if (bool.test(propkey)) {
            this.propkey = propkey;
            return;
        }
        for (Supplier<String> supplier : propkeys) {
            propkey = supplier.get();
            if (bool.test(propkey)) {
                this.propkey = propkey;
                return;
            }
        }
    }

    @Transient
    public void setPropkeyIfNot(String propkey, Predicate<String> bool) {
        if (!bool.test(propkey)) {
            this.propkey = propkey;
        }
    }

    @Transient
    public void setPropkeyIfNot(String propkey, Predicate<String> bool, Supplier<String>... propkeys) {
        if (!bool.test(propkey)) {
            this.propkey = propkey;
            return;
        }
        for (Supplier<String> supplier : propkeys) {
            propkey = supplier.get();
            if (!bool.test(propkey)) {
                this.propkey = propkey;
                return;
            }
        }
    }

    @Transient
    public void setPropkeyIf(UnaryOperator<String> propkey) {
        this.propkey = propkey.apply(this.propkey);
    }


    /**
     * Getter for <code>win_task_define.enabled</code>.
     */
    @Override
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Setter for <code>win_task_define.enabled</code>.
     */
    @Override
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    @Transient
    public void setEnabledIf(Boolean enabled, boolean bool) {
        if (bool) {
            this.enabled = enabled;
        }
    }

    @Transient
    public void setEnabledIf(Supplier<Boolean> enabled, boolean bool) {
        if (bool) {
            this.enabled = enabled.get();
        }
    }

    @Transient
    public void setEnabledIf(Boolean enabled, Predicate<Boolean> bool) {
        if (bool.test(enabled)) {
            this.enabled = enabled;
        }
    }

    @Transient
    public void setEnabledIf(Boolean enabled, Predicate<Boolean> bool, Supplier<Boolean>... enableds) {
        if (bool.test(enabled)) {
            this.enabled = enabled;
            return;
        }
        for (Supplier<Boolean> supplier : enableds) {
            enabled = supplier.get();
            if (bool.test(enabled)) {
                this.enabled = enabled;
                return;
            }
        }
    }

    @Transient
    public void setEnabledIfNot(Boolean enabled, Predicate<Boolean> bool) {
        if (!bool.test(enabled)) {
            this.enabled = enabled;
        }
    }

    @Transient
    public void setEnabledIfNot(Boolean enabled, Predicate<Boolean> bool, Supplier<Boolean>... enableds) {
        if (!bool.test(enabled)) {
            this.enabled = enabled;
            return;
        }
        for (Supplier<Boolean> supplier : enableds) {
            enabled = supplier.get();
            if (!bool.test(enabled)) {
                this.enabled = enabled;
                return;
            }
        }
    }

    @Transient
    public void setEnabledIf(UnaryOperator<Boolean> enabled) {
        this.enabled = enabled.apply(this.enabled);
    }


    /**
     * Getter for <code>win_task_define.autorun</code>.
     */
    @Override
    public Boolean getAutorun() {
        return this.autorun;
    }

    /**
     * Setter for <code>win_task_define.autorun</code>.
     */
    @Override
    public void setAutorun(Boolean autorun) {
        this.autorun = autorun;
    }

    @Transient
    public void setAutorunIf(Boolean autorun, boolean bool) {
        if (bool) {
            this.autorun = autorun;
        }
    }

    @Transient
    public void setAutorunIf(Supplier<Boolean> autorun, boolean bool) {
        if (bool) {
            this.autorun = autorun.get();
        }
    }

    @Transient
    public void setAutorunIf(Boolean autorun, Predicate<Boolean> bool) {
        if (bool.test(autorun)) {
            this.autorun = autorun;
        }
    }

    @Transient
    public void setAutorunIf(Boolean autorun, Predicate<Boolean> bool, Supplier<Boolean>... autoruns) {
        if (bool.test(autorun)) {
            this.autorun = autorun;
            return;
        }
        for (Supplier<Boolean> supplier : autoruns) {
            autorun = supplier.get();
            if (bool.test(autorun)) {
                this.autorun = autorun;
                return;
            }
        }
    }

    @Transient
    public void setAutorunIfNot(Boolean autorun, Predicate<Boolean> bool) {
        if (!bool.test(autorun)) {
            this.autorun = autorun;
        }
    }

    @Transient
    public void setAutorunIfNot(Boolean autorun, Predicate<Boolean> bool, Supplier<Boolean>... autoruns) {
        if (!bool.test(autorun)) {
            this.autorun = autorun;
            return;
        }
        for (Supplier<Boolean> supplier : autoruns) {
            autorun = supplier.get();
            if (!bool.test(autorun)) {
                this.autorun = autorun;
                return;
            }
        }
    }

    @Transient
    public void setAutorunIf(UnaryOperator<Boolean> autorun) {
        this.autorun = autorun.apply(this.autorun);
    }


    /**
     * Getter for <code>win_task_define.version</code>.
     */
    @Override
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Setter for <code>win_task_define.version</code>.
     */
    @Override
    public void setVersion(Integer version) {
        this.version = version;
    }

    @Transient
    public void setVersionIf(Integer version, boolean bool) {
        if (bool) {
            this.version = version;
        }
    }

    @Transient
    public void setVersionIf(Supplier<Integer> version, boolean bool) {
        if (bool) {
            this.version = version.get();
        }
    }

    @Transient
    public void setVersionIf(Integer version, Predicate<Integer> bool) {
        if (bool.test(version)) {
            this.version = version;
        }
    }

    @Transient
    public void setVersionIf(Integer version, Predicate<Integer> bool, Supplier<Integer>... versions) {
        if (bool.test(version)) {
            this.version = version;
            return;
        }
        for (Supplier<Integer> supplier : versions) {
            version = supplier.get();
            if (bool.test(version)) {
                this.version = version;
                return;
            }
        }
    }

    @Transient
    public void setVersionIfNot(Integer version, Predicate<Integer> bool) {
        if (!bool.test(version)) {
            this.version = version;
        }
    }

    @Transient
    public void setVersionIfNot(Integer version, Predicate<Integer> bool, Supplier<Integer>... versions) {
        if (!bool.test(version)) {
            this.version = version;
            return;
        }
        for (Supplier<Integer> supplier : versions) {
            version = supplier.get();
            if (!bool.test(version)) {
                this.version = version;
                return;
            }
        }
    }

    @Transient
    public void setVersionIf(UnaryOperator<Integer> version) {
        this.version = version.apply(this.version);
    }


    /**
     * Getter for <code>win_task_define.tasker_bean</code>.
     */
    @Override
    public String getTaskerBean() {
        return this.taskerBean;
    }

    /**
     * Setter for <code>win_task_define.tasker_bean</code>.
     */
    @Override
    public void setTaskerBean(String taskerBean) {
        this.taskerBean = taskerBean;
    }

    @Transient
    public void setTaskerBeanIf(String taskerBean, boolean bool) {
        if (bool) {
            this.taskerBean = taskerBean;
        }
    }

    @Transient
    public void setTaskerBeanIf(Supplier<String> taskerBean, boolean bool) {
        if (bool) {
            this.taskerBean = taskerBean.get();
        }
    }

    @Transient
    public void setTaskerBeanIf(String taskerBean, Predicate<String> bool) {
        if (bool.test(taskerBean)) {
            this.taskerBean = taskerBean;
        }
    }

    @Transient
    public void setTaskerBeanIf(String taskerBean, Predicate<String> bool, Supplier<String>... taskerBeans) {
        if (bool.test(taskerBean)) {
            this.taskerBean = taskerBean;
            return;
        }
        for (Supplier<String> supplier : taskerBeans) {
            taskerBean = supplier.get();
            if (bool.test(taskerBean)) {
                this.taskerBean = taskerBean;
                return;
            }
        }
    }

    @Transient
    public void setTaskerBeanIfNot(String taskerBean, Predicate<String> bool) {
        if (!bool.test(taskerBean)) {
            this.taskerBean = taskerBean;
        }
    }

    @Transient
    public void setTaskerBeanIfNot(String taskerBean, Predicate<String> bool, Supplier<String>... taskerBeans) {
        if (!bool.test(taskerBean)) {
            this.taskerBean = taskerBean;
            return;
        }
        for (Supplier<String> supplier : taskerBeans) {
            taskerBean = supplier.get();
            if (!bool.test(taskerBean)) {
                this.taskerBean = taskerBean;
                return;
            }
        }
    }

    @Transient
    public void setTaskerBeanIf(UnaryOperator<String> taskerBean) {
        this.taskerBean = taskerBean.apply(this.taskerBean);
    }


    /**
     * Getter for <code>win_task_define.tasker_para</code>.
     */
    @Override
    public String getTaskerPara() {
        return this.taskerPara;
    }

    /**
     * Setter for <code>win_task_define.tasker_para</code>.
     */
    @Override
    public void setTaskerPara(String taskerPara) {
        this.taskerPara = taskerPara;
    }

    @Transient
    public void setTaskerParaIf(String taskerPara, boolean bool) {
        if (bool) {
            this.taskerPara = taskerPara;
        }
    }

    @Transient
    public void setTaskerParaIf(Supplier<String> taskerPara, boolean bool) {
        if (bool) {
            this.taskerPara = taskerPara.get();
        }
    }

    @Transient
    public void setTaskerParaIf(String taskerPara, Predicate<String> bool) {
        if (bool.test(taskerPara)) {
            this.taskerPara = taskerPara;
        }
    }

    @Transient
    public void setTaskerParaIf(String taskerPara, Predicate<String> bool, Supplier<String>... taskerParas) {
        if (bool.test(taskerPara)) {
            this.taskerPara = taskerPara;
            return;
        }
        for (Supplier<String> supplier : taskerParas) {
            taskerPara = supplier.get();
            if (bool.test(taskerPara)) {
                this.taskerPara = taskerPara;
                return;
            }
        }
    }

    @Transient
    public void setTaskerParaIfNot(String taskerPara, Predicate<String> bool) {
        if (!bool.test(taskerPara)) {
            this.taskerPara = taskerPara;
        }
    }

    @Transient
    public void setTaskerParaIfNot(String taskerPara, Predicate<String> bool, Supplier<String>... taskerParas) {
        if (!bool.test(taskerPara)) {
            this.taskerPara = taskerPara;
            return;
        }
        for (Supplier<String> supplier : taskerParas) {
            taskerPara = supplier.get();
            if (!bool.test(taskerPara)) {
                this.taskerPara = taskerPara;
                return;
            }
        }
    }

    @Transient
    public void setTaskerParaIf(UnaryOperator<String> taskerPara) {
        this.taskerPara = taskerPara.apply(this.taskerPara);
    }


    /**
     * Getter for <code>win_task_define.tasker_name</code>.
     */
    @Override
    public String getTaskerName() {
        return this.taskerName;
    }

    /**
     * Setter for <code>win_task_define.tasker_name</code>.
     */
    @Override
    public void setTaskerName(String taskerName) {
        this.taskerName = taskerName;
    }

    @Transient
    public void setTaskerNameIf(String taskerName, boolean bool) {
        if (bool) {
            this.taskerName = taskerName;
        }
    }

    @Transient
    public void setTaskerNameIf(Supplier<String> taskerName, boolean bool) {
        if (bool) {
            this.taskerName = taskerName.get();
        }
    }

    @Transient
    public void setTaskerNameIf(String taskerName, Predicate<String> bool) {
        if (bool.test(taskerName)) {
            this.taskerName = taskerName;
        }
    }

    @Transient
    public void setTaskerNameIf(String taskerName, Predicate<String> bool, Supplier<String>... taskerNames) {
        if (bool.test(taskerName)) {
            this.taskerName = taskerName;
            return;
        }
        for (Supplier<String> supplier : taskerNames) {
            taskerName = supplier.get();
            if (bool.test(taskerName)) {
                this.taskerName = taskerName;
                return;
            }
        }
    }

    @Transient
    public void setTaskerNameIfNot(String taskerName, Predicate<String> bool) {
        if (!bool.test(taskerName)) {
            this.taskerName = taskerName;
        }
    }

    @Transient
    public void setTaskerNameIfNot(String taskerName, Predicate<String> bool, Supplier<String>... taskerNames) {
        if (!bool.test(taskerName)) {
            this.taskerName = taskerName;
            return;
        }
        for (Supplier<String> supplier : taskerNames) {
            taskerName = supplier.get();
            if (!bool.test(taskerName)) {
                this.taskerName = taskerName;
                return;
            }
        }
    }

    @Transient
    public void setTaskerNameIf(UnaryOperator<String> taskerName) {
        this.taskerName = taskerName.apply(this.taskerName);
    }


    /**
     * Getter for <code>win_task_define.tasker_fast</code>.
     */
    @Override
    public Boolean getTaskerFast() {
        return this.taskerFast;
    }

    /**
     * Setter for <code>win_task_define.tasker_fast</code>.
     */
    @Override
    public void setTaskerFast(Boolean taskerFast) {
        this.taskerFast = taskerFast;
    }

    @Transient
    public void setTaskerFastIf(Boolean taskerFast, boolean bool) {
        if (bool) {
            this.taskerFast = taskerFast;
        }
    }

    @Transient
    public void setTaskerFastIf(Supplier<Boolean> taskerFast, boolean bool) {
        if (bool) {
            this.taskerFast = taskerFast.get();
        }
    }

    @Transient
    public void setTaskerFastIf(Boolean taskerFast, Predicate<Boolean> bool) {
        if (bool.test(taskerFast)) {
            this.taskerFast = taskerFast;
        }
    }

    @Transient
    public void setTaskerFastIf(Boolean taskerFast, Predicate<Boolean> bool, Supplier<Boolean>... taskerFasts) {
        if (bool.test(taskerFast)) {
            this.taskerFast = taskerFast;
            return;
        }
        for (Supplier<Boolean> supplier : taskerFasts) {
            taskerFast = supplier.get();
            if (bool.test(taskerFast)) {
                this.taskerFast = taskerFast;
                return;
            }
        }
    }

    @Transient
    public void setTaskerFastIfNot(Boolean taskerFast, Predicate<Boolean> bool) {
        if (!bool.test(taskerFast)) {
            this.taskerFast = taskerFast;
        }
    }

    @Transient
    public void setTaskerFastIfNot(Boolean taskerFast, Predicate<Boolean> bool, Supplier<Boolean>... taskerFasts) {
        if (!bool.test(taskerFast)) {
            this.taskerFast = taskerFast;
            return;
        }
        for (Supplier<Boolean> supplier : taskerFasts) {
            taskerFast = supplier.get();
            if (!bool.test(taskerFast)) {
                this.taskerFast = taskerFast;
                return;
            }
        }
    }

    @Transient
    public void setTaskerFastIf(UnaryOperator<Boolean> taskerFast) {
        this.taskerFast = taskerFast.apply(this.taskerFast);
    }


    /**
     * Getter for <code>win_task_define.tasker_apps</code>.
     */
    @Override
    public String getTaskerApps() {
        return this.taskerApps;
    }

    /**
     * Setter for <code>win_task_define.tasker_apps</code>.
     */
    @Override
    public void setTaskerApps(String taskerApps) {
        this.taskerApps = taskerApps;
    }

    @Transient
    public void setTaskerAppsIf(String taskerApps, boolean bool) {
        if (bool) {
            this.taskerApps = taskerApps;
        }
    }

    @Transient
    public void setTaskerAppsIf(Supplier<String> taskerApps, boolean bool) {
        if (bool) {
            this.taskerApps = taskerApps.get();
        }
    }

    @Transient
    public void setTaskerAppsIf(String taskerApps, Predicate<String> bool) {
        if (bool.test(taskerApps)) {
            this.taskerApps = taskerApps;
        }
    }

    @Transient
    public void setTaskerAppsIf(String taskerApps, Predicate<String> bool, Supplier<String>... taskerAppss) {
        if (bool.test(taskerApps)) {
            this.taskerApps = taskerApps;
            return;
        }
        for (Supplier<String> supplier : taskerAppss) {
            taskerApps = supplier.get();
            if (bool.test(taskerApps)) {
                this.taskerApps = taskerApps;
                return;
            }
        }
    }

    @Transient
    public void setTaskerAppsIfNot(String taskerApps, Predicate<String> bool) {
        if (!bool.test(taskerApps)) {
            this.taskerApps = taskerApps;
        }
    }

    @Transient
    public void setTaskerAppsIfNot(String taskerApps, Predicate<String> bool, Supplier<String>... taskerAppss) {
        if (!bool.test(taskerApps)) {
            this.taskerApps = taskerApps;
            return;
        }
        for (Supplier<String> supplier : taskerAppss) {
            taskerApps = supplier.get();
            if (!bool.test(taskerApps)) {
                this.taskerApps = taskerApps;
                return;
            }
        }
    }

    @Transient
    public void setTaskerAppsIf(UnaryOperator<String> taskerApps) {
        this.taskerApps = taskerApps.apply(this.taskerApps);
    }


    /**
     * Getter for <code>win_task_define.tasker_runs</code>.
     */
    @Override
    public String getTaskerRuns() {
        return this.taskerRuns;
    }

    /**
     * Setter for <code>win_task_define.tasker_runs</code>.
     */
    @Override
    public void setTaskerRuns(String taskerRuns) {
        this.taskerRuns = taskerRuns;
    }

    @Transient
    public void setTaskerRunsIf(String taskerRuns, boolean bool) {
        if (bool) {
            this.taskerRuns = taskerRuns;
        }
    }

    @Transient
    public void setTaskerRunsIf(Supplier<String> taskerRuns, boolean bool) {
        if (bool) {
            this.taskerRuns = taskerRuns.get();
        }
    }

    @Transient
    public void setTaskerRunsIf(String taskerRuns, Predicate<String> bool) {
        if (bool.test(taskerRuns)) {
            this.taskerRuns = taskerRuns;
        }
    }

    @Transient
    public void setTaskerRunsIf(String taskerRuns, Predicate<String> bool, Supplier<String>... taskerRunss) {
        if (bool.test(taskerRuns)) {
            this.taskerRuns = taskerRuns;
            return;
        }
        for (Supplier<String> supplier : taskerRunss) {
            taskerRuns = supplier.get();
            if (bool.test(taskerRuns)) {
                this.taskerRuns = taskerRuns;
                return;
            }
        }
    }

    @Transient
    public void setTaskerRunsIfNot(String taskerRuns, Predicate<String> bool) {
        if (!bool.test(taskerRuns)) {
            this.taskerRuns = taskerRuns;
        }
    }

    @Transient
    public void setTaskerRunsIfNot(String taskerRuns, Predicate<String> bool, Supplier<String>... taskerRunss) {
        if (!bool.test(taskerRuns)) {
            this.taskerRuns = taskerRuns;
            return;
        }
        for (Supplier<String> supplier : taskerRunss) {
            taskerRuns = supplier.get();
            if (!bool.test(taskerRuns)) {
                this.taskerRuns = taskerRuns;
                return;
            }
        }
    }

    @Transient
    public void setTaskerRunsIf(UnaryOperator<String> taskerRuns) {
        this.taskerRuns = taskerRuns.apply(this.taskerRuns);
    }


    /**
     * Getter for <code>win_task_define.notice_bean</code>.
     */
    @Override
    public String getNoticeBean() {
        return this.noticeBean;
    }

    /**
     * Setter for <code>win_task_define.notice_bean</code>.
     */
    @Override
    public void setNoticeBean(String noticeBean) {
        this.noticeBean = noticeBean;
    }

    @Transient
    public void setNoticeBeanIf(String noticeBean, boolean bool) {
        if (bool) {
            this.noticeBean = noticeBean;
        }
    }

    @Transient
    public void setNoticeBeanIf(Supplier<String> noticeBean, boolean bool) {
        if (bool) {
            this.noticeBean = noticeBean.get();
        }
    }

    @Transient
    public void setNoticeBeanIf(String noticeBean, Predicate<String> bool) {
        if (bool.test(noticeBean)) {
            this.noticeBean = noticeBean;
        }
    }

    @Transient
    public void setNoticeBeanIf(String noticeBean, Predicate<String> bool, Supplier<String>... noticeBeans) {
        if (bool.test(noticeBean)) {
            this.noticeBean = noticeBean;
            return;
        }
        for (Supplier<String> supplier : noticeBeans) {
            noticeBean = supplier.get();
            if (bool.test(noticeBean)) {
                this.noticeBean = noticeBean;
                return;
            }
        }
    }

    @Transient
    public void setNoticeBeanIfNot(String noticeBean, Predicate<String> bool) {
        if (!bool.test(noticeBean)) {
            this.noticeBean = noticeBean;
        }
    }

    @Transient
    public void setNoticeBeanIfNot(String noticeBean, Predicate<String> bool, Supplier<String>... noticeBeans) {
        if (!bool.test(noticeBean)) {
            this.noticeBean = noticeBean;
            return;
        }
        for (Supplier<String> supplier : noticeBeans) {
            noticeBean = supplier.get();
            if (!bool.test(noticeBean)) {
                this.noticeBean = noticeBean;
                return;
            }
        }
    }

    @Transient
    public void setNoticeBeanIf(UnaryOperator<String> noticeBean) {
        this.noticeBean = noticeBean.apply(this.noticeBean);
    }


    /**
     * Getter for <code>win_task_define.notice_when</code>.
     */
    @Override
    public String getNoticeWhen() {
        return this.noticeWhen;
    }

    /**
     * Setter for <code>win_task_define.notice_when</code>.
     */
    @Override
    public void setNoticeWhen(String noticeWhen) {
        this.noticeWhen = noticeWhen;
    }

    @Transient
    public void setNoticeWhenIf(String noticeWhen, boolean bool) {
        if (bool) {
            this.noticeWhen = noticeWhen;
        }
    }

    @Transient
    public void setNoticeWhenIf(Supplier<String> noticeWhen, boolean bool) {
        if (bool) {
            this.noticeWhen = noticeWhen.get();
        }
    }

    @Transient
    public void setNoticeWhenIf(String noticeWhen, Predicate<String> bool) {
        if (bool.test(noticeWhen)) {
            this.noticeWhen = noticeWhen;
        }
    }

    @Transient
    public void setNoticeWhenIf(String noticeWhen, Predicate<String> bool, Supplier<String>... noticeWhens) {
        if (bool.test(noticeWhen)) {
            this.noticeWhen = noticeWhen;
            return;
        }
        for (Supplier<String> supplier : noticeWhens) {
            noticeWhen = supplier.get();
            if (bool.test(noticeWhen)) {
                this.noticeWhen = noticeWhen;
                return;
            }
        }
    }

    @Transient
    public void setNoticeWhenIfNot(String noticeWhen, Predicate<String> bool) {
        if (!bool.test(noticeWhen)) {
            this.noticeWhen = noticeWhen;
        }
    }

    @Transient
    public void setNoticeWhenIfNot(String noticeWhen, Predicate<String> bool, Supplier<String>... noticeWhens) {
        if (!bool.test(noticeWhen)) {
            this.noticeWhen = noticeWhen;
            return;
        }
        for (Supplier<String> supplier : noticeWhens) {
            noticeWhen = supplier.get();
            if (!bool.test(noticeWhen)) {
                this.noticeWhen = noticeWhen;
                return;
            }
        }
    }

    @Transient
    public void setNoticeWhenIf(UnaryOperator<String> noticeWhen) {
        this.noticeWhen = noticeWhen.apply(this.noticeWhen);
    }


    /**
     * Getter for <code>win_task_define.notice_conf</code>.
     */
    @Override
    public String getNoticeConf() {
        return this.noticeConf;
    }

    /**
     * Setter for <code>win_task_define.notice_conf</code>.
     */
    @Override
    public void setNoticeConf(String noticeConf) {
        this.noticeConf = noticeConf;
    }

    @Transient
    public void setNoticeConfIf(String noticeConf, boolean bool) {
        if (bool) {
            this.noticeConf = noticeConf;
        }
    }

    @Transient
    public void setNoticeConfIf(Supplier<String> noticeConf, boolean bool) {
        if (bool) {
            this.noticeConf = noticeConf.get();
        }
    }

    @Transient
    public void setNoticeConfIf(String noticeConf, Predicate<String> bool) {
        if (bool.test(noticeConf)) {
            this.noticeConf = noticeConf;
        }
    }

    @Transient
    public void setNoticeConfIf(String noticeConf, Predicate<String> bool, Supplier<String>... noticeConfs) {
        if (bool.test(noticeConf)) {
            this.noticeConf = noticeConf;
            return;
        }
        for (Supplier<String> supplier : noticeConfs) {
            noticeConf = supplier.get();
            if (bool.test(noticeConf)) {
                this.noticeConf = noticeConf;
                return;
            }
        }
    }

    @Transient
    public void setNoticeConfIfNot(String noticeConf, Predicate<String> bool) {
        if (!bool.test(noticeConf)) {
            this.noticeConf = noticeConf;
        }
    }

    @Transient
    public void setNoticeConfIfNot(String noticeConf, Predicate<String> bool, Supplier<String>... noticeConfs) {
        if (!bool.test(noticeConf)) {
            this.noticeConf = noticeConf;
            return;
        }
        for (Supplier<String> supplier : noticeConfs) {
            noticeConf = supplier.get();
            if (!bool.test(noticeConf)) {
                this.noticeConf = noticeConf;
                return;
            }
        }
    }

    @Transient
    public void setNoticeConfIf(UnaryOperator<String> noticeConf) {
        this.noticeConf = noticeConf.apply(this.noticeConf);
    }


    /**
     * Getter for <code>win_task_define.timing_zone</code>.
     */
    @Override
    public String getTimingZone() {
        return this.timingZone;
    }

    /**
     * Setter for <code>win_task_define.timing_zone</code>.
     */
    @Override
    public void setTimingZone(String timingZone) {
        this.timingZone = timingZone;
    }

    @Transient
    public void setTimingZoneIf(String timingZone, boolean bool) {
        if (bool) {
            this.timingZone = timingZone;
        }
    }

    @Transient
    public void setTimingZoneIf(Supplier<String> timingZone, boolean bool) {
        if (bool) {
            this.timingZone = timingZone.get();
        }
    }

    @Transient
    public void setTimingZoneIf(String timingZone, Predicate<String> bool) {
        if (bool.test(timingZone)) {
            this.timingZone = timingZone;
        }
    }

    @Transient
    public void setTimingZoneIf(String timingZone, Predicate<String> bool, Supplier<String>... timingZones) {
        if (bool.test(timingZone)) {
            this.timingZone = timingZone;
            return;
        }
        for (Supplier<String> supplier : timingZones) {
            timingZone = supplier.get();
            if (bool.test(timingZone)) {
                this.timingZone = timingZone;
                return;
            }
        }
    }

    @Transient
    public void setTimingZoneIfNot(String timingZone, Predicate<String> bool) {
        if (!bool.test(timingZone)) {
            this.timingZone = timingZone;
        }
    }

    @Transient
    public void setTimingZoneIfNot(String timingZone, Predicate<String> bool, Supplier<String>... timingZones) {
        if (!bool.test(timingZone)) {
            this.timingZone = timingZone;
            return;
        }
        for (Supplier<String> supplier : timingZones) {
            timingZone = supplier.get();
            if (!bool.test(timingZone)) {
                this.timingZone = timingZone;
                return;
            }
        }
    }

    @Transient
    public void setTimingZoneIf(UnaryOperator<String> timingZone) {
        this.timingZone = timingZone.apply(this.timingZone);
    }


    /**
     * Getter for <code>win_task_define.timing_type</code>.
     */
    @Override
    public String getTimingType() {
        return this.timingType;
    }

    /**
     * Setter for <code>win_task_define.timing_type</code>.
     */
    @Override
    public void setTimingType(String timingType) {
        this.timingType = timingType;
    }

    @Transient
    public void setTimingTypeIf(String timingType, boolean bool) {
        if (bool) {
            this.timingType = timingType;
        }
    }

    @Transient
    public void setTimingTypeIf(Supplier<String> timingType, boolean bool) {
        if (bool) {
            this.timingType = timingType.get();
        }
    }

    @Transient
    public void setTimingTypeIf(String timingType, Predicate<String> bool) {
        if (bool.test(timingType)) {
            this.timingType = timingType;
        }
    }

    @Transient
    public void setTimingTypeIf(String timingType, Predicate<String> bool, Supplier<String>... timingTypes) {
        if (bool.test(timingType)) {
            this.timingType = timingType;
            return;
        }
        for (Supplier<String> supplier : timingTypes) {
            timingType = supplier.get();
            if (bool.test(timingType)) {
                this.timingType = timingType;
                return;
            }
        }
    }

    @Transient
    public void setTimingTypeIfNot(String timingType, Predicate<String> bool) {
        if (!bool.test(timingType)) {
            this.timingType = timingType;
        }
    }

    @Transient
    public void setTimingTypeIfNot(String timingType, Predicate<String> bool, Supplier<String>... timingTypes) {
        if (!bool.test(timingType)) {
            this.timingType = timingType;
            return;
        }
        for (Supplier<String> supplier : timingTypes) {
            timingType = supplier.get();
            if (!bool.test(timingType)) {
                this.timingType = timingType;
                return;
            }
        }
    }

    @Transient
    public void setTimingTypeIf(UnaryOperator<String> timingType) {
        this.timingType = timingType.apply(this.timingType);
    }


    /**
     * Getter for <code>win_task_define.timing_cron</code>.
     */
    @Override
    public String getTimingCron() {
        return this.timingCron;
    }

    /**
     * Setter for <code>win_task_define.timing_cron</code>.
     */
    @Override
    public void setTimingCron(String timingCron) {
        this.timingCron = timingCron;
    }

    @Transient
    public void setTimingCronIf(String timingCron, boolean bool) {
        if (bool) {
            this.timingCron = timingCron;
        }
    }

    @Transient
    public void setTimingCronIf(Supplier<String> timingCron, boolean bool) {
        if (bool) {
            this.timingCron = timingCron.get();
        }
    }

    @Transient
    public void setTimingCronIf(String timingCron, Predicate<String> bool) {
        if (bool.test(timingCron)) {
            this.timingCron = timingCron;
        }
    }

    @Transient
    public void setTimingCronIf(String timingCron, Predicate<String> bool, Supplier<String>... timingCrons) {
        if (bool.test(timingCron)) {
            this.timingCron = timingCron;
            return;
        }
        for (Supplier<String> supplier : timingCrons) {
            timingCron = supplier.get();
            if (bool.test(timingCron)) {
                this.timingCron = timingCron;
                return;
            }
        }
    }

    @Transient
    public void setTimingCronIfNot(String timingCron, Predicate<String> bool) {
        if (!bool.test(timingCron)) {
            this.timingCron = timingCron;
        }
    }

    @Transient
    public void setTimingCronIfNot(String timingCron, Predicate<String> bool, Supplier<String>... timingCrons) {
        if (!bool.test(timingCron)) {
            this.timingCron = timingCron;
            return;
        }
        for (Supplier<String> supplier : timingCrons) {
            timingCron = supplier.get();
            if (!bool.test(timingCron)) {
                this.timingCron = timingCron;
                return;
            }
        }
    }

    @Transient
    public void setTimingCronIf(UnaryOperator<String> timingCron) {
        this.timingCron = timingCron.apply(this.timingCron);
    }


    /**
     * Getter for <code>win_task_define.timing_idle</code>.
     */
    @Override
    public Integer getTimingIdle() {
        return this.timingIdle;
    }

    /**
     * Setter for <code>win_task_define.timing_idle</code>.
     */
    @Override
    public void setTimingIdle(Integer timingIdle) {
        this.timingIdle = timingIdle;
    }

    @Transient
    public void setTimingIdleIf(Integer timingIdle, boolean bool) {
        if (bool) {
            this.timingIdle = timingIdle;
        }
    }

    @Transient
    public void setTimingIdleIf(Supplier<Integer> timingIdle, boolean bool) {
        if (bool) {
            this.timingIdle = timingIdle.get();
        }
    }

    @Transient
    public void setTimingIdleIf(Integer timingIdle, Predicate<Integer> bool) {
        if (bool.test(timingIdle)) {
            this.timingIdle = timingIdle;
        }
    }

    @Transient
    public void setTimingIdleIf(Integer timingIdle, Predicate<Integer> bool, Supplier<Integer>... timingIdles) {
        if (bool.test(timingIdle)) {
            this.timingIdle = timingIdle;
            return;
        }
        for (Supplier<Integer> supplier : timingIdles) {
            timingIdle = supplier.get();
            if (bool.test(timingIdle)) {
                this.timingIdle = timingIdle;
                return;
            }
        }
    }

    @Transient
    public void setTimingIdleIfNot(Integer timingIdle, Predicate<Integer> bool) {
        if (!bool.test(timingIdle)) {
            this.timingIdle = timingIdle;
        }
    }

    @Transient
    public void setTimingIdleIfNot(Integer timingIdle, Predicate<Integer> bool, Supplier<Integer>... timingIdles) {
        if (!bool.test(timingIdle)) {
            this.timingIdle = timingIdle;
            return;
        }
        for (Supplier<Integer> supplier : timingIdles) {
            timingIdle = supplier.get();
            if (!bool.test(timingIdle)) {
                this.timingIdle = timingIdle;
                return;
            }
        }
    }

    @Transient
    public void setTimingIdleIf(UnaryOperator<Integer> timingIdle) {
        this.timingIdle = timingIdle.apply(this.timingIdle);
    }


    /**
     * Getter for <code>win_task_define.timing_rate</code>.
     */
    @Override
    public Integer getTimingRate() {
        return this.timingRate;
    }

    /**
     * Setter for <code>win_task_define.timing_rate</code>.
     */
    @Override
    public void setTimingRate(Integer timingRate) {
        this.timingRate = timingRate;
    }

    @Transient
    public void setTimingRateIf(Integer timingRate, boolean bool) {
        if (bool) {
            this.timingRate = timingRate;
        }
    }

    @Transient
    public void setTimingRateIf(Supplier<Integer> timingRate, boolean bool) {
        if (bool) {
            this.timingRate = timingRate.get();
        }
    }

    @Transient
    public void setTimingRateIf(Integer timingRate, Predicate<Integer> bool) {
        if (bool.test(timingRate)) {
            this.timingRate = timingRate;
        }
    }

    @Transient
    public void setTimingRateIf(Integer timingRate, Predicate<Integer> bool, Supplier<Integer>... timingRates) {
        if (bool.test(timingRate)) {
            this.timingRate = timingRate;
            return;
        }
        for (Supplier<Integer> supplier : timingRates) {
            timingRate = supplier.get();
            if (bool.test(timingRate)) {
                this.timingRate = timingRate;
                return;
            }
        }
    }

    @Transient
    public void setTimingRateIfNot(Integer timingRate, Predicate<Integer> bool) {
        if (!bool.test(timingRate)) {
            this.timingRate = timingRate;
        }
    }

    @Transient
    public void setTimingRateIfNot(Integer timingRate, Predicate<Integer> bool, Supplier<Integer>... timingRates) {
        if (!bool.test(timingRate)) {
            this.timingRate = timingRate;
            return;
        }
        for (Supplier<Integer> supplier : timingRates) {
            timingRate = supplier.get();
            if (!bool.test(timingRate)) {
                this.timingRate = timingRate;
                return;
            }
        }
    }

    @Transient
    public void setTimingRateIf(UnaryOperator<Integer> timingRate) {
        this.timingRate = timingRate.apply(this.timingRate);
    }


    /**
     * Getter for <code>win_task_define.timing_tune</code>.
     */
    @Override
    public Integer getTimingTune() {
        return this.timingTune;
    }

    /**
     * Setter for <code>win_task_define.timing_tune</code>.
     */
    @Override
    public void setTimingTune(Integer timingTune) {
        this.timingTune = timingTune;
    }

    @Transient
    public void setTimingTuneIf(Integer timingTune, boolean bool) {
        if (bool) {
            this.timingTune = timingTune;
        }
    }

    @Transient
    public void setTimingTuneIf(Supplier<Integer> timingTune, boolean bool) {
        if (bool) {
            this.timingTune = timingTune.get();
        }
    }

    @Transient
    public void setTimingTuneIf(Integer timingTune, Predicate<Integer> bool) {
        if (bool.test(timingTune)) {
            this.timingTune = timingTune;
        }
    }

    @Transient
    public void setTimingTuneIf(Integer timingTune, Predicate<Integer> bool, Supplier<Integer>... timingTunes) {
        if (bool.test(timingTune)) {
            this.timingTune = timingTune;
            return;
        }
        for (Supplier<Integer> supplier : timingTunes) {
            timingTune = supplier.get();
            if (bool.test(timingTune)) {
                this.timingTune = timingTune;
                return;
            }
        }
    }

    @Transient
    public void setTimingTuneIfNot(Integer timingTune, Predicate<Integer> bool) {
        if (!bool.test(timingTune)) {
            this.timingTune = timingTune;
        }
    }

    @Transient
    public void setTimingTuneIfNot(Integer timingTune, Predicate<Integer> bool, Supplier<Integer>... timingTunes) {
        if (!bool.test(timingTune)) {
            this.timingTune = timingTune;
            return;
        }
        for (Supplier<Integer> supplier : timingTunes) {
            timingTune = supplier.get();
            if (!bool.test(timingTune)) {
                this.timingTune = timingTune;
                return;
            }
        }
    }

    @Transient
    public void setTimingTuneIf(UnaryOperator<Integer> timingTune) {
        this.timingTune = timingTune.apply(this.timingTune);
    }


    /**
     * Getter for <code>win_task_define.timing_miss</code>.
     */
    @Override
    public Integer getTimingMiss() {
        return this.timingMiss;
    }

    /**
     * Setter for <code>win_task_define.timing_miss</code>.
     */
    @Override
    public void setTimingMiss(Integer timingMiss) {
        this.timingMiss = timingMiss;
    }

    @Transient
    public void setTimingMissIf(Integer timingMiss, boolean bool) {
        if (bool) {
            this.timingMiss = timingMiss;
        }
    }

    @Transient
    public void setTimingMissIf(Supplier<Integer> timingMiss, boolean bool) {
        if (bool) {
            this.timingMiss = timingMiss.get();
        }
    }

    @Transient
    public void setTimingMissIf(Integer timingMiss, Predicate<Integer> bool) {
        if (bool.test(timingMiss)) {
            this.timingMiss = timingMiss;
        }
    }

    @Transient
    public void setTimingMissIf(Integer timingMiss, Predicate<Integer> bool, Supplier<Integer>... timingMisss) {
        if (bool.test(timingMiss)) {
            this.timingMiss = timingMiss;
            return;
        }
        for (Supplier<Integer> supplier : timingMisss) {
            timingMiss = supplier.get();
            if (bool.test(timingMiss)) {
                this.timingMiss = timingMiss;
                return;
            }
        }
    }

    @Transient
    public void setTimingMissIfNot(Integer timingMiss, Predicate<Integer> bool) {
        if (!bool.test(timingMiss)) {
            this.timingMiss = timingMiss;
        }
    }

    @Transient
    public void setTimingMissIfNot(Integer timingMiss, Predicate<Integer> bool, Supplier<Integer>... timingMisss) {
        if (!bool.test(timingMiss)) {
            this.timingMiss = timingMiss;
            return;
        }
        for (Supplier<Integer> supplier : timingMisss) {
            timingMiss = supplier.get();
            if (!bool.test(timingMiss)) {
                this.timingMiss = timingMiss;
                return;
            }
        }
    }

    @Transient
    public void setTimingMissIf(UnaryOperator<Integer> timingMiss) {
        this.timingMiss = timingMiss.apply(this.timingMiss);
    }


    /**
     * Getter for <code>win_task_define.timing_beat</code>.
     */
    @Override
    public Integer getTimingBeat() {
        return this.timingBeat;
    }

    /**
     * Setter for <code>win_task_define.timing_beat</code>.
     */
    @Override
    public void setTimingBeat(Integer timingBeat) {
        this.timingBeat = timingBeat;
    }

    @Transient
    public void setTimingBeatIf(Integer timingBeat, boolean bool) {
        if (bool) {
            this.timingBeat = timingBeat;
        }
    }

    @Transient
    public void setTimingBeatIf(Supplier<Integer> timingBeat, boolean bool) {
        if (bool) {
            this.timingBeat = timingBeat.get();
        }
    }

    @Transient
    public void setTimingBeatIf(Integer timingBeat, Predicate<Integer> bool) {
        if (bool.test(timingBeat)) {
            this.timingBeat = timingBeat;
        }
    }

    @Transient
    public void setTimingBeatIf(Integer timingBeat, Predicate<Integer> bool, Supplier<Integer>... timingBeats) {
        if (bool.test(timingBeat)) {
            this.timingBeat = timingBeat;
            return;
        }
        for (Supplier<Integer> supplier : timingBeats) {
            timingBeat = supplier.get();
            if (bool.test(timingBeat)) {
                this.timingBeat = timingBeat;
                return;
            }
        }
    }

    @Transient
    public void setTimingBeatIfNot(Integer timingBeat, Predicate<Integer> bool) {
        if (!bool.test(timingBeat)) {
            this.timingBeat = timingBeat;
        }
    }

    @Transient
    public void setTimingBeatIfNot(Integer timingBeat, Predicate<Integer> bool, Supplier<Integer>... timingBeats) {
        if (!bool.test(timingBeat)) {
            this.timingBeat = timingBeat;
            return;
        }
        for (Supplier<Integer> supplier : timingBeats) {
            timingBeat = supplier.get();
            if (!bool.test(timingBeat)) {
                this.timingBeat = timingBeat;
                return;
            }
        }
    }

    @Transient
    public void setTimingBeatIf(UnaryOperator<Integer> timingBeat) {
        this.timingBeat = timingBeat.apply(this.timingBeat);
    }


    /**
     * Getter for <code>win_task_define.during_from</code>.
     */
    @Override
    public String getDuringFrom() {
        return this.duringFrom;
    }

    /**
     * Setter for <code>win_task_define.during_from</code>.
     */
    @Override
    public void setDuringFrom(String duringFrom) {
        this.duringFrom = duringFrom;
    }

    @Transient
    public void setDuringFromIf(String duringFrom, boolean bool) {
        if (bool) {
            this.duringFrom = duringFrom;
        }
    }

    @Transient
    public void setDuringFromIf(Supplier<String> duringFrom, boolean bool) {
        if (bool) {
            this.duringFrom = duringFrom.get();
        }
    }

    @Transient
    public void setDuringFromIf(String duringFrom, Predicate<String> bool) {
        if (bool.test(duringFrom)) {
            this.duringFrom = duringFrom;
        }
    }

    @Transient
    public void setDuringFromIf(String duringFrom, Predicate<String> bool, Supplier<String>... duringFroms) {
        if (bool.test(duringFrom)) {
            this.duringFrom = duringFrom;
            return;
        }
        for (Supplier<String> supplier : duringFroms) {
            duringFrom = supplier.get();
            if (bool.test(duringFrom)) {
                this.duringFrom = duringFrom;
                return;
            }
        }
    }

    @Transient
    public void setDuringFromIfNot(String duringFrom, Predicate<String> bool) {
        if (!bool.test(duringFrom)) {
            this.duringFrom = duringFrom;
        }
    }

    @Transient
    public void setDuringFromIfNot(String duringFrom, Predicate<String> bool, Supplier<String>... duringFroms) {
        if (!bool.test(duringFrom)) {
            this.duringFrom = duringFrom;
            return;
        }
        for (Supplier<String> supplier : duringFroms) {
            duringFrom = supplier.get();
            if (!bool.test(duringFrom)) {
                this.duringFrom = duringFrom;
                return;
            }
        }
    }

    @Transient
    public void setDuringFromIf(UnaryOperator<String> duringFrom) {
        this.duringFrom = duringFrom.apply(this.duringFrom);
    }


    /**
     * Getter for <code>win_task_define.during_stop</code>.
     */
    @Override
    public String getDuringStop() {
        return this.duringStop;
    }

    /**
     * Setter for <code>win_task_define.during_stop</code>.
     */
    @Override
    public void setDuringStop(String duringStop) {
        this.duringStop = duringStop;
    }

    @Transient
    public void setDuringStopIf(String duringStop, boolean bool) {
        if (bool) {
            this.duringStop = duringStop;
        }
    }

    @Transient
    public void setDuringStopIf(Supplier<String> duringStop, boolean bool) {
        if (bool) {
            this.duringStop = duringStop.get();
        }
    }

    @Transient
    public void setDuringStopIf(String duringStop, Predicate<String> bool) {
        if (bool.test(duringStop)) {
            this.duringStop = duringStop;
        }
    }

    @Transient
    public void setDuringStopIf(String duringStop, Predicate<String> bool, Supplier<String>... duringStops) {
        if (bool.test(duringStop)) {
            this.duringStop = duringStop;
            return;
        }
        for (Supplier<String> supplier : duringStops) {
            duringStop = supplier.get();
            if (bool.test(duringStop)) {
                this.duringStop = duringStop;
                return;
            }
        }
    }

    @Transient
    public void setDuringStopIfNot(String duringStop, Predicate<String> bool) {
        if (!bool.test(duringStop)) {
            this.duringStop = duringStop;
        }
    }

    @Transient
    public void setDuringStopIfNot(String duringStop, Predicate<String> bool, Supplier<String>... duringStops) {
        if (!bool.test(duringStop)) {
            this.duringStop = duringStop;
            return;
        }
        for (Supplier<String> supplier : duringStops) {
            duringStop = supplier.get();
            if (!bool.test(duringStop)) {
                this.duringStop = duringStop;
                return;
            }
        }
    }

    @Transient
    public void setDuringStopIf(UnaryOperator<String> duringStop) {
        this.duringStop = duringStop.apply(this.duringStop);
    }


    /**
     * Getter for <code>win_task_define.during_exec</code>.
     */
    @Override
    public Integer getDuringExec() {
        return this.duringExec;
    }

    /**
     * Setter for <code>win_task_define.during_exec</code>.
     */
    @Override
    public void setDuringExec(Integer duringExec) {
        this.duringExec = duringExec;
    }

    @Transient
    public void setDuringExecIf(Integer duringExec, boolean bool) {
        if (bool) {
            this.duringExec = duringExec;
        }
    }

    @Transient
    public void setDuringExecIf(Supplier<Integer> duringExec, boolean bool) {
        if (bool) {
            this.duringExec = duringExec.get();
        }
    }

    @Transient
    public void setDuringExecIf(Integer duringExec, Predicate<Integer> bool) {
        if (bool.test(duringExec)) {
            this.duringExec = duringExec;
        }
    }

    @Transient
    public void setDuringExecIf(Integer duringExec, Predicate<Integer> bool, Supplier<Integer>... duringExecs) {
        if (bool.test(duringExec)) {
            this.duringExec = duringExec;
            return;
        }
        for (Supplier<Integer> supplier : duringExecs) {
            duringExec = supplier.get();
            if (bool.test(duringExec)) {
                this.duringExec = duringExec;
                return;
            }
        }
    }

    @Transient
    public void setDuringExecIfNot(Integer duringExec, Predicate<Integer> bool) {
        if (!bool.test(duringExec)) {
            this.duringExec = duringExec;
        }
    }

    @Transient
    public void setDuringExecIfNot(Integer duringExec, Predicate<Integer> bool, Supplier<Integer>... duringExecs) {
        if (!bool.test(duringExec)) {
            this.duringExec = duringExec;
            return;
        }
        for (Supplier<Integer> supplier : duringExecs) {
            duringExec = supplier.get();
            if (!bool.test(duringExec)) {
                this.duringExec = duringExec;
                return;
            }
        }
    }

    @Transient
    public void setDuringExecIf(UnaryOperator<Integer> duringExec) {
        this.duringExec = duringExec.apply(this.duringExec);
    }


    /**
     * Getter for <code>win_task_define.during_fail</code>.
     */
    @Override
    public Integer getDuringFail() {
        return this.duringFail;
    }

    /**
     * Setter for <code>win_task_define.during_fail</code>.
     */
    @Override
    public void setDuringFail(Integer duringFail) {
        this.duringFail = duringFail;
    }

    @Transient
    public void setDuringFailIf(Integer duringFail, boolean bool) {
        if (bool) {
            this.duringFail = duringFail;
        }
    }

    @Transient
    public void setDuringFailIf(Supplier<Integer> duringFail, boolean bool) {
        if (bool) {
            this.duringFail = duringFail.get();
        }
    }

    @Transient
    public void setDuringFailIf(Integer duringFail, Predicate<Integer> bool) {
        if (bool.test(duringFail)) {
            this.duringFail = duringFail;
        }
    }

    @Transient
    public void setDuringFailIf(Integer duringFail, Predicate<Integer> bool, Supplier<Integer>... duringFails) {
        if (bool.test(duringFail)) {
            this.duringFail = duringFail;
            return;
        }
        for (Supplier<Integer> supplier : duringFails) {
            duringFail = supplier.get();
            if (bool.test(duringFail)) {
                this.duringFail = duringFail;
                return;
            }
        }
    }

    @Transient
    public void setDuringFailIfNot(Integer duringFail, Predicate<Integer> bool) {
        if (!bool.test(duringFail)) {
            this.duringFail = duringFail;
        }
    }

    @Transient
    public void setDuringFailIfNot(Integer duringFail, Predicate<Integer> bool, Supplier<Integer>... duringFails) {
        if (!bool.test(duringFail)) {
            this.duringFail = duringFail;
            return;
        }
        for (Supplier<Integer> supplier : duringFails) {
            duringFail = supplier.get();
            if (!bool.test(duringFail)) {
                this.duringFail = duringFail;
                return;
            }
        }
    }

    @Transient
    public void setDuringFailIf(UnaryOperator<Integer> duringFail) {
        this.duringFail = duringFail.apply(this.duringFail);
    }


    /**
     * Getter for <code>win_task_define.during_done</code>.
     */
    @Override
    public Integer getDuringDone() {
        return this.duringDone;
    }

    /**
     * Setter for <code>win_task_define.during_done</code>.
     */
    @Override
    public void setDuringDone(Integer duringDone) {
        this.duringDone = duringDone;
    }

    @Transient
    public void setDuringDoneIf(Integer duringDone, boolean bool) {
        if (bool) {
            this.duringDone = duringDone;
        }
    }

    @Transient
    public void setDuringDoneIf(Supplier<Integer> duringDone, boolean bool) {
        if (bool) {
            this.duringDone = duringDone.get();
        }
    }

    @Transient
    public void setDuringDoneIf(Integer duringDone, Predicate<Integer> bool) {
        if (bool.test(duringDone)) {
            this.duringDone = duringDone;
        }
    }

    @Transient
    public void setDuringDoneIf(Integer duringDone, Predicate<Integer> bool, Supplier<Integer>... duringDones) {
        if (bool.test(duringDone)) {
            this.duringDone = duringDone;
            return;
        }
        for (Supplier<Integer> supplier : duringDones) {
            duringDone = supplier.get();
            if (bool.test(duringDone)) {
                this.duringDone = duringDone;
                return;
            }
        }
    }

    @Transient
    public void setDuringDoneIfNot(Integer duringDone, Predicate<Integer> bool) {
        if (!bool.test(duringDone)) {
            this.duringDone = duringDone;
        }
    }

    @Transient
    public void setDuringDoneIfNot(Integer duringDone, Predicate<Integer> bool, Supplier<Integer>... duringDones) {
        if (!bool.test(duringDone)) {
            this.duringDone = duringDone;
            return;
        }
        for (Supplier<Integer> supplier : duringDones) {
            duringDone = supplier.get();
            if (!bool.test(duringDone)) {
                this.duringDone = duringDone;
                return;
            }
        }
    }

    @Transient
    public void setDuringDoneIf(UnaryOperator<Integer> duringDone) {
        this.duringDone = duringDone.apply(this.duringDone);
    }


    /**
     * Getter for <code>win_task_define.during_boot</code>.
     */
    @Override
    public Integer getDuringBoot() {
        return this.duringBoot;
    }

    /**
     * Setter for <code>win_task_define.during_boot</code>.
     */
    @Override
    public void setDuringBoot(Integer duringBoot) {
        this.duringBoot = duringBoot;
    }

    @Transient
    public void setDuringBootIf(Integer duringBoot, boolean bool) {
        if (bool) {
            this.duringBoot = duringBoot;
        }
    }

    @Transient
    public void setDuringBootIf(Supplier<Integer> duringBoot, boolean bool) {
        if (bool) {
            this.duringBoot = duringBoot.get();
        }
    }

    @Transient
    public void setDuringBootIf(Integer duringBoot, Predicate<Integer> bool) {
        if (bool.test(duringBoot)) {
            this.duringBoot = duringBoot;
        }
    }

    @Transient
    public void setDuringBootIf(Integer duringBoot, Predicate<Integer> bool, Supplier<Integer>... duringBoots) {
        if (bool.test(duringBoot)) {
            this.duringBoot = duringBoot;
            return;
        }
        for (Supplier<Integer> supplier : duringBoots) {
            duringBoot = supplier.get();
            if (bool.test(duringBoot)) {
                this.duringBoot = duringBoot;
                return;
            }
        }
    }

    @Transient
    public void setDuringBootIfNot(Integer duringBoot, Predicate<Integer> bool) {
        if (!bool.test(duringBoot)) {
            this.duringBoot = duringBoot;
        }
    }

    @Transient
    public void setDuringBootIfNot(Integer duringBoot, Predicate<Integer> bool, Supplier<Integer>... duringBoots) {
        if (!bool.test(duringBoot)) {
            this.duringBoot = duringBoot;
            return;
        }
        for (Supplier<Integer> supplier : duringBoots) {
            duringBoot = supplier.get();
            if (!bool.test(duringBoot)) {
                this.duringBoot = duringBoot;
                return;
            }
        }
    }

    @Transient
    public void setDuringBootIf(UnaryOperator<Integer> duringBoot) {
        this.duringBoot = duringBoot.apply(this.duringBoot);
    }


    /**
     * Getter for <code>win_task_define.result_keep</code>.
     */
    @Override
    public Integer getResultKeep() {
        return this.resultKeep;
    }

    /**
     * Setter for <code>win_task_define.result_keep</code>.
     */
    @Override
    public void setResultKeep(Integer resultKeep) {
        this.resultKeep = resultKeep;
    }

    @Transient
    public void setResultKeepIf(Integer resultKeep, boolean bool) {
        if (bool) {
            this.resultKeep = resultKeep;
        }
    }

    @Transient
    public void setResultKeepIf(Supplier<Integer> resultKeep, boolean bool) {
        if (bool) {
            this.resultKeep = resultKeep.get();
        }
    }

    @Transient
    public void setResultKeepIf(Integer resultKeep, Predicate<Integer> bool) {
        if (bool.test(resultKeep)) {
            this.resultKeep = resultKeep;
        }
    }

    @Transient
    public void setResultKeepIf(Integer resultKeep, Predicate<Integer> bool, Supplier<Integer>... resultKeeps) {
        if (bool.test(resultKeep)) {
            this.resultKeep = resultKeep;
            return;
        }
        for (Supplier<Integer> supplier : resultKeeps) {
            resultKeep = supplier.get();
            if (bool.test(resultKeep)) {
                this.resultKeep = resultKeep;
                return;
            }
        }
    }

    @Transient
    public void setResultKeepIfNot(Integer resultKeep, Predicate<Integer> bool) {
        if (!bool.test(resultKeep)) {
            this.resultKeep = resultKeep;
        }
    }

    @Transient
    public void setResultKeepIfNot(Integer resultKeep, Predicate<Integer> bool, Supplier<Integer>... resultKeeps) {
        if (!bool.test(resultKeep)) {
            this.resultKeep = resultKeep;
            return;
        }
        for (Supplier<Integer> supplier : resultKeeps) {
            resultKeep = supplier.get();
            if (!bool.test(resultKeep)) {
                this.resultKeep = resultKeep;
                return;
            }
        }
    }

    @Transient
    public void setResultKeepIf(UnaryOperator<Integer> resultKeep) {
        this.resultKeep = resultKeep.apply(this.resultKeep);
    }


    /**
     * Getter for <code>win_task_define.last_exec</code>.
     */
    @Override
    public LocalDateTime getLastExec() {
        return this.lastExec;
    }

    /**
     * Setter for <code>win_task_define.last_exec</code>.
     */
    @Override
    public void setLastExec(LocalDateTime lastExec) {
        this.lastExec = lastExec;
    }

    @Transient
    public void setLastExecIf(LocalDateTime lastExec, boolean bool) {
        if (bool) {
            this.lastExec = lastExec;
        }
    }

    @Transient
    public void setLastExecIf(Supplier<LocalDateTime> lastExec, boolean bool) {
        if (bool) {
            this.lastExec = lastExec.get();
        }
    }

    @Transient
    public void setLastExecIf(LocalDateTime lastExec, Predicate<LocalDateTime> bool) {
        if (bool.test(lastExec)) {
            this.lastExec = lastExec;
        }
    }

    @Transient
    public void setLastExecIf(LocalDateTime lastExec, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastExecs) {
        if (bool.test(lastExec)) {
            this.lastExec = lastExec;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastExecs) {
            lastExec = supplier.get();
            if (bool.test(lastExec)) {
                this.lastExec = lastExec;
                return;
            }
        }
    }

    @Transient
    public void setLastExecIfNot(LocalDateTime lastExec, Predicate<LocalDateTime> bool) {
        if (!bool.test(lastExec)) {
            this.lastExec = lastExec;
        }
    }

    @Transient
    public void setLastExecIfNot(LocalDateTime lastExec, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastExecs) {
        if (!bool.test(lastExec)) {
            this.lastExec = lastExec;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastExecs) {
            lastExec = supplier.get();
            if (!bool.test(lastExec)) {
                this.lastExec = lastExec;
                return;
            }
        }
    }

    @Transient
    public void setLastExecIf(UnaryOperator<LocalDateTime> lastExec) {
        this.lastExec = lastExec.apply(this.lastExec);
    }


    /**
     * Getter for <code>win_task_define.last_exit</code>.
     */
    @Override
    public LocalDateTime getLastExit() {
        return this.lastExit;
    }

    /**
     * Setter for <code>win_task_define.last_exit</code>.
     */
    @Override
    public void setLastExit(LocalDateTime lastExit) {
        this.lastExit = lastExit;
    }

    @Transient
    public void setLastExitIf(LocalDateTime lastExit, boolean bool) {
        if (bool) {
            this.lastExit = lastExit;
        }
    }

    @Transient
    public void setLastExitIf(Supplier<LocalDateTime> lastExit, boolean bool) {
        if (bool) {
            this.lastExit = lastExit.get();
        }
    }

    @Transient
    public void setLastExitIf(LocalDateTime lastExit, Predicate<LocalDateTime> bool) {
        if (bool.test(lastExit)) {
            this.lastExit = lastExit;
        }
    }

    @Transient
    public void setLastExitIf(LocalDateTime lastExit, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastExits) {
        if (bool.test(lastExit)) {
            this.lastExit = lastExit;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastExits) {
            lastExit = supplier.get();
            if (bool.test(lastExit)) {
                this.lastExit = lastExit;
                return;
            }
        }
    }

    @Transient
    public void setLastExitIfNot(LocalDateTime lastExit, Predicate<LocalDateTime> bool) {
        if (!bool.test(lastExit)) {
            this.lastExit = lastExit;
        }
    }

    @Transient
    public void setLastExitIfNot(LocalDateTime lastExit, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastExits) {
        if (!bool.test(lastExit)) {
            this.lastExit = lastExit;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastExits) {
            lastExit = supplier.get();
            if (!bool.test(lastExit)) {
                this.lastExit = lastExit;
                return;
            }
        }
    }

    @Transient
    public void setLastExitIf(UnaryOperator<LocalDateTime> lastExit) {
        this.lastExit = lastExit.apply(this.lastExit);
    }


    /**
     * Getter for <code>win_task_define.last_fail</code>.
     */
    @Override
    public Boolean getLastFail() {
        return this.lastFail;
    }

    /**
     * Setter for <code>win_task_define.last_fail</code>.
     */
    @Override
    public void setLastFail(Boolean lastFail) {
        this.lastFail = lastFail;
    }

    @Transient
    public void setLastFailIf(Boolean lastFail, boolean bool) {
        if (bool) {
            this.lastFail = lastFail;
        }
    }

    @Transient
    public void setLastFailIf(Supplier<Boolean> lastFail, boolean bool) {
        if (bool) {
            this.lastFail = lastFail.get();
        }
    }

    @Transient
    public void setLastFailIf(Boolean lastFail, Predicate<Boolean> bool) {
        if (bool.test(lastFail)) {
            this.lastFail = lastFail;
        }
    }

    @Transient
    public void setLastFailIf(Boolean lastFail, Predicate<Boolean> bool, Supplier<Boolean>... lastFails) {
        if (bool.test(lastFail)) {
            this.lastFail = lastFail;
            return;
        }
        for (Supplier<Boolean> supplier : lastFails) {
            lastFail = supplier.get();
            if (bool.test(lastFail)) {
                this.lastFail = lastFail;
                return;
            }
        }
    }

    @Transient
    public void setLastFailIfNot(Boolean lastFail, Predicate<Boolean> bool) {
        if (!bool.test(lastFail)) {
            this.lastFail = lastFail;
        }
    }

    @Transient
    public void setLastFailIfNot(Boolean lastFail, Predicate<Boolean> bool, Supplier<Boolean>... lastFails) {
        if (!bool.test(lastFail)) {
            this.lastFail = lastFail;
            return;
        }
        for (Supplier<Boolean> supplier : lastFails) {
            lastFail = supplier.get();
            if (!bool.test(lastFail)) {
                this.lastFail = lastFail;
                return;
            }
        }
    }

    @Transient
    public void setLastFailIf(UnaryOperator<Boolean> lastFail) {
        this.lastFail = lastFail.apply(this.lastFail);
    }


    /**
     * Getter for <code>win_task_define.next_exec</code>.
     */
    @Override
    public LocalDateTime getNextExec() {
        return this.nextExec;
    }

    /**
     * Setter for <code>win_task_define.next_exec</code>.
     */
    @Override
    public void setNextExec(LocalDateTime nextExec) {
        this.nextExec = nextExec;
    }

    @Transient
    public void setNextExecIf(LocalDateTime nextExec, boolean bool) {
        if (bool) {
            this.nextExec = nextExec;
        }
    }

    @Transient
    public void setNextExecIf(Supplier<LocalDateTime> nextExec, boolean bool) {
        if (bool) {
            this.nextExec = nextExec.get();
        }
    }

    @Transient
    public void setNextExecIf(LocalDateTime nextExec, Predicate<LocalDateTime> bool) {
        if (bool.test(nextExec)) {
            this.nextExec = nextExec;
        }
    }

    @Transient
    public void setNextExecIf(LocalDateTime nextExec, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... nextExecs) {
        if (bool.test(nextExec)) {
            this.nextExec = nextExec;
            return;
        }
        for (Supplier<LocalDateTime> supplier : nextExecs) {
            nextExec = supplier.get();
            if (bool.test(nextExec)) {
                this.nextExec = nextExec;
                return;
            }
        }
    }

    @Transient
    public void setNextExecIfNot(LocalDateTime nextExec, Predicate<LocalDateTime> bool) {
        if (!bool.test(nextExec)) {
            this.nextExec = nextExec;
        }
    }

    @Transient
    public void setNextExecIfNot(LocalDateTime nextExec, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... nextExecs) {
        if (!bool.test(nextExec)) {
            this.nextExec = nextExec;
            return;
        }
        for (Supplier<LocalDateTime> supplier : nextExecs) {
            nextExec = supplier.get();
            if (!bool.test(nextExec)) {
                this.nextExec = nextExec;
                return;
            }
        }
    }

    @Transient
    public void setNextExecIf(UnaryOperator<LocalDateTime> nextExec) {
        this.nextExec = nextExec.apply(this.nextExec);
    }


    /**
     * Getter for <code>win_task_define.next_lock</code>.
     */
    @Override
    public Integer getNextLock() {
        return this.nextLock;
    }

    /**
     * Setter for <code>win_task_define.next_lock</code>.
     */
    @Override
    public void setNextLock(Integer nextLock) {
        this.nextLock = nextLock;
    }

    @Transient
    public void setNextLockIf(Integer nextLock, boolean bool) {
        if (bool) {
            this.nextLock = nextLock;
        }
    }

    @Transient
    public void setNextLockIf(Supplier<Integer> nextLock, boolean bool) {
        if (bool) {
            this.nextLock = nextLock.get();
        }
    }

    @Transient
    public void setNextLockIf(Integer nextLock, Predicate<Integer> bool) {
        if (bool.test(nextLock)) {
            this.nextLock = nextLock;
        }
    }

    @Transient
    public void setNextLockIf(Integer nextLock, Predicate<Integer> bool, Supplier<Integer>... nextLocks) {
        if (bool.test(nextLock)) {
            this.nextLock = nextLock;
            return;
        }
        for (Supplier<Integer> supplier : nextLocks) {
            nextLock = supplier.get();
            if (bool.test(nextLock)) {
                this.nextLock = nextLock;
                return;
            }
        }
    }

    @Transient
    public void setNextLockIfNot(Integer nextLock, Predicate<Integer> bool) {
        if (!bool.test(nextLock)) {
            this.nextLock = nextLock;
        }
    }

    @Transient
    public void setNextLockIfNot(Integer nextLock, Predicate<Integer> bool, Supplier<Integer>... nextLocks) {
        if (!bool.test(nextLock)) {
            this.nextLock = nextLock;
            return;
        }
        for (Supplier<Integer> supplier : nextLocks) {
            nextLock = supplier.get();
            if (!bool.test(nextLock)) {
                this.nextLock = nextLock;
                return;
            }
        }
    }

    @Transient
    public void setNextLockIf(UnaryOperator<Integer> nextLock) {
        this.nextLock = nextLock.apply(this.nextLock);
    }


    /**
     * Getter for <code>win_task_define.dur_fail</code>.
     */
    @Override
    public Integer getDurFail() {
        return this.durFail;
    }

    /**
     * Setter for <code>win_task_define.dur_fail</code>.
     */
    @Override
    public void setDurFail(Integer durFail) {
        this.durFail = durFail;
    }

    @Transient
    public void setDurFailIf(Integer durFail, boolean bool) {
        if (bool) {
            this.durFail = durFail;
        }
    }

    @Transient
    public void setDurFailIf(Supplier<Integer> durFail, boolean bool) {
        if (bool) {
            this.durFail = durFail.get();
        }
    }

    @Transient
    public void setDurFailIf(Integer durFail, Predicate<Integer> bool) {
        if (bool.test(durFail)) {
            this.durFail = durFail;
        }
    }

    @Transient
    public void setDurFailIf(Integer durFail, Predicate<Integer> bool, Supplier<Integer>... durFails) {
        if (bool.test(durFail)) {
            this.durFail = durFail;
            return;
        }
        for (Supplier<Integer> supplier : durFails) {
            durFail = supplier.get();
            if (bool.test(durFail)) {
                this.durFail = durFail;
                return;
            }
        }
    }

    @Transient
    public void setDurFailIfNot(Integer durFail, Predicate<Integer> bool) {
        if (!bool.test(durFail)) {
            this.durFail = durFail;
        }
    }

    @Transient
    public void setDurFailIfNot(Integer durFail, Predicate<Integer> bool, Supplier<Integer>... durFails) {
        if (!bool.test(durFail)) {
            this.durFail = durFail;
            return;
        }
        for (Supplier<Integer> supplier : durFails) {
            durFail = supplier.get();
            if (!bool.test(durFail)) {
                this.durFail = durFail;
                return;
            }
        }
    }

    @Transient
    public void setDurFailIf(UnaryOperator<Integer> durFail) {
        this.durFail = durFail.apply(this.durFail);
    }


    /**
     * Getter for <code>win_task_define.sum_exec</code>.
     */
    @Override
    public Integer getSumExec() {
        return this.sumExec;
    }

    /**
     * Setter for <code>win_task_define.sum_exec</code>.
     */
    @Override
    public void setSumExec(Integer sumExec) {
        this.sumExec = sumExec;
    }

    @Transient
    public void setSumExecIf(Integer sumExec, boolean bool) {
        if (bool) {
            this.sumExec = sumExec;
        }
    }

    @Transient
    public void setSumExecIf(Supplier<Integer> sumExec, boolean bool) {
        if (bool) {
            this.sumExec = sumExec.get();
        }
    }

    @Transient
    public void setSumExecIf(Integer sumExec, Predicate<Integer> bool) {
        if (bool.test(sumExec)) {
            this.sumExec = sumExec;
        }
    }

    @Transient
    public void setSumExecIf(Integer sumExec, Predicate<Integer> bool, Supplier<Integer>... sumExecs) {
        if (bool.test(sumExec)) {
            this.sumExec = sumExec;
            return;
        }
        for (Supplier<Integer> supplier : sumExecs) {
            sumExec = supplier.get();
            if (bool.test(sumExec)) {
                this.sumExec = sumExec;
                return;
            }
        }
    }

    @Transient
    public void setSumExecIfNot(Integer sumExec, Predicate<Integer> bool) {
        if (!bool.test(sumExec)) {
            this.sumExec = sumExec;
        }
    }

    @Transient
    public void setSumExecIfNot(Integer sumExec, Predicate<Integer> bool, Supplier<Integer>... sumExecs) {
        if (!bool.test(sumExec)) {
            this.sumExec = sumExec;
            return;
        }
        for (Supplier<Integer> supplier : sumExecs) {
            sumExec = supplier.get();
            if (!bool.test(sumExec)) {
                this.sumExec = sumExec;
                return;
            }
        }
    }

    @Transient
    public void setSumExecIf(UnaryOperator<Integer> sumExec) {
        this.sumExec = sumExec.apply(this.sumExec);
    }


    /**
     * Getter for <code>win_task_define.sum_fail</code>.
     */
    @Override
    public Integer getSumFail() {
        return this.sumFail;
    }

    /**
     * Setter for <code>win_task_define.sum_fail</code>.
     */
    @Override
    public void setSumFail(Integer sumFail) {
        this.sumFail = sumFail;
    }

    @Transient
    public void setSumFailIf(Integer sumFail, boolean bool) {
        if (bool) {
            this.sumFail = sumFail;
        }
    }

    @Transient
    public void setSumFailIf(Supplier<Integer> sumFail, boolean bool) {
        if (bool) {
            this.sumFail = sumFail.get();
        }
    }

    @Transient
    public void setSumFailIf(Integer sumFail, Predicate<Integer> bool) {
        if (bool.test(sumFail)) {
            this.sumFail = sumFail;
        }
    }

    @Transient
    public void setSumFailIf(Integer sumFail, Predicate<Integer> bool, Supplier<Integer>... sumFails) {
        if (bool.test(sumFail)) {
            this.sumFail = sumFail;
            return;
        }
        for (Supplier<Integer> supplier : sumFails) {
            sumFail = supplier.get();
            if (bool.test(sumFail)) {
                this.sumFail = sumFail;
                return;
            }
        }
    }

    @Transient
    public void setSumFailIfNot(Integer sumFail, Predicate<Integer> bool) {
        if (!bool.test(sumFail)) {
            this.sumFail = sumFail;
        }
    }

    @Transient
    public void setSumFailIfNot(Integer sumFail, Predicate<Integer> bool, Supplier<Integer>... sumFails) {
        if (!bool.test(sumFail)) {
            this.sumFail = sumFail;
            return;
        }
        for (Supplier<Integer> supplier : sumFails) {
            sumFail = supplier.get();
            if (!bool.test(sumFail)) {
                this.sumFail = sumFail;
                return;
            }
        }
    }

    @Transient
    public void setSumFailIf(UnaryOperator<Integer> sumFail) {
        this.sumFail = sumFail.apply(this.sumFail);
    }


    /**
     * Getter for <code>win_task_define.sum_done</code>.
     */
    @Override
    public Integer getSumDone() {
        return this.sumDone;
    }

    /**
     * Setter for <code>win_task_define.sum_done</code>.
     */
    @Override
    public void setSumDone(Integer sumDone) {
        this.sumDone = sumDone;
    }

    @Transient
    public void setSumDoneIf(Integer sumDone, boolean bool) {
        if (bool) {
            this.sumDone = sumDone;
        }
    }

    @Transient
    public void setSumDoneIf(Supplier<Integer> sumDone, boolean bool) {
        if (bool) {
            this.sumDone = sumDone.get();
        }
    }

    @Transient
    public void setSumDoneIf(Integer sumDone, Predicate<Integer> bool) {
        if (bool.test(sumDone)) {
            this.sumDone = sumDone;
        }
    }

    @Transient
    public void setSumDoneIf(Integer sumDone, Predicate<Integer> bool, Supplier<Integer>... sumDones) {
        if (bool.test(sumDone)) {
            this.sumDone = sumDone;
            return;
        }
        for (Supplier<Integer> supplier : sumDones) {
            sumDone = supplier.get();
            if (bool.test(sumDone)) {
                this.sumDone = sumDone;
                return;
            }
        }
    }

    @Transient
    public void setSumDoneIfNot(Integer sumDone, Predicate<Integer> bool) {
        if (!bool.test(sumDone)) {
            this.sumDone = sumDone;
        }
    }

    @Transient
    public void setSumDoneIfNot(Integer sumDone, Predicate<Integer> bool, Supplier<Integer>... sumDones) {
        if (!bool.test(sumDone)) {
            this.sumDone = sumDone;
            return;
        }
        for (Supplier<Integer> supplier : sumDones) {
            sumDone = supplier.get();
            if (!bool.test(sumDone)) {
                this.sumDone = sumDone;
                return;
            }
        }
    }

    @Transient
    public void setSumDoneIf(UnaryOperator<Integer> sumDone) {
        this.sumDone = sumDone.apply(this.sumDone);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinTaskDefine other = (WinTaskDefine) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!this.createDt.equals(other.createDt))
            return false;
        if (this.modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!this.modifyDt.equals(other.modifyDt))
            return false;
        if (this.deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!this.deleteDt.equals(other.deleteDt))
            return false;
        if (this.commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!this.commitId.equals(other.commitId))
            return false;
        if (this.propkey == null) {
            if (other.propkey != null)
                return false;
        }
        else if (!this.propkey.equals(other.propkey))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.autorun == null) {
            if (other.autorun != null)
                return false;
        }
        else if (!this.autorun.equals(other.autorun))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        }
        else if (!this.version.equals(other.version))
            return false;
        if (this.taskerBean == null) {
            if (other.taskerBean != null)
                return false;
        }
        else if (!this.taskerBean.equals(other.taskerBean))
            return false;
        if (this.taskerPara == null) {
            if (other.taskerPara != null)
                return false;
        }
        else if (!this.taskerPara.equals(other.taskerPara))
            return false;
        if (this.taskerName == null) {
            if (other.taskerName != null)
                return false;
        }
        else if (!this.taskerName.equals(other.taskerName))
            return false;
        if (this.taskerFast == null) {
            if (other.taskerFast != null)
                return false;
        }
        else if (!this.taskerFast.equals(other.taskerFast))
            return false;
        if (this.taskerApps == null) {
            if (other.taskerApps != null)
                return false;
        }
        else if (!this.taskerApps.equals(other.taskerApps))
            return false;
        if (this.taskerRuns == null) {
            if (other.taskerRuns != null)
                return false;
        }
        else if (!this.taskerRuns.equals(other.taskerRuns))
            return false;
        if (this.noticeBean == null) {
            if (other.noticeBean != null)
                return false;
        }
        else if (!this.noticeBean.equals(other.noticeBean))
            return false;
        if (this.noticeWhen == null) {
            if (other.noticeWhen != null)
                return false;
        }
        else if (!this.noticeWhen.equals(other.noticeWhen))
            return false;
        if (this.noticeConf == null) {
            if (other.noticeConf != null)
                return false;
        }
        else if (!this.noticeConf.equals(other.noticeConf))
            return false;
        if (this.timingZone == null) {
            if (other.timingZone != null)
                return false;
        }
        else if (!this.timingZone.equals(other.timingZone))
            return false;
        if (this.timingType == null) {
            if (other.timingType != null)
                return false;
        }
        else if (!this.timingType.equals(other.timingType))
            return false;
        if (this.timingCron == null) {
            if (other.timingCron != null)
                return false;
        }
        else if (!this.timingCron.equals(other.timingCron))
            return false;
        if (this.timingIdle == null) {
            if (other.timingIdle != null)
                return false;
        }
        else if (!this.timingIdle.equals(other.timingIdle))
            return false;
        if (this.timingRate == null) {
            if (other.timingRate != null)
                return false;
        }
        else if (!this.timingRate.equals(other.timingRate))
            return false;
        if (this.timingTune == null) {
            if (other.timingTune != null)
                return false;
        }
        else if (!this.timingTune.equals(other.timingTune))
            return false;
        if (this.timingMiss == null) {
            if (other.timingMiss != null)
                return false;
        }
        else if (!this.timingMiss.equals(other.timingMiss))
            return false;
        if (this.timingBeat == null) {
            if (other.timingBeat != null)
                return false;
        }
        else if (!this.timingBeat.equals(other.timingBeat))
            return false;
        if (this.duringFrom == null) {
            if (other.duringFrom != null)
                return false;
        }
        else if (!this.duringFrom.equals(other.duringFrom))
            return false;
        if (this.duringStop == null) {
            if (other.duringStop != null)
                return false;
        }
        else if (!this.duringStop.equals(other.duringStop))
            return false;
        if (this.duringExec == null) {
            if (other.duringExec != null)
                return false;
        }
        else if (!this.duringExec.equals(other.duringExec))
            return false;
        if (this.duringFail == null) {
            if (other.duringFail != null)
                return false;
        }
        else if (!this.duringFail.equals(other.duringFail))
            return false;
        if (this.duringDone == null) {
            if (other.duringDone != null)
                return false;
        }
        else if (!this.duringDone.equals(other.duringDone))
            return false;
        if (this.duringBoot == null) {
            if (other.duringBoot != null)
                return false;
        }
        else if (!this.duringBoot.equals(other.duringBoot))
            return false;
        if (this.resultKeep == null) {
            if (other.resultKeep != null)
                return false;
        }
        else if (!this.resultKeep.equals(other.resultKeep))
            return false;
        if (this.lastExec == null) {
            if (other.lastExec != null)
                return false;
        }
        else if (!this.lastExec.equals(other.lastExec))
            return false;
        if (this.lastExit == null) {
            if (other.lastExit != null)
                return false;
        }
        else if (!this.lastExit.equals(other.lastExit))
            return false;
        if (this.lastFail == null) {
            if (other.lastFail != null)
                return false;
        }
        else if (!this.lastFail.equals(other.lastFail))
            return false;
        if (this.nextExec == null) {
            if (other.nextExec != null)
                return false;
        }
        else if (!this.nextExec.equals(other.nextExec))
            return false;
        if (this.nextLock == null) {
            if (other.nextLock != null)
                return false;
        }
        else if (!this.nextLock.equals(other.nextLock))
            return false;
        if (this.durFail == null) {
            if (other.durFail != null)
                return false;
        }
        else if (!this.durFail.equals(other.durFail))
            return false;
        if (this.sumExec == null) {
            if (other.sumExec != null)
                return false;
        }
        else if (!this.sumExec.equals(other.sumExec))
            return false;
        if (this.sumFail == null) {
            if (other.sumFail != null)
                return false;
        }
        else if (!this.sumFail.equals(other.sumFail))
            return false;
        if (this.sumDone == null) {
            if (other.sumDone != null)
                return false;
        }
        else if (!this.sumDone.equals(other.sumDone))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.propkey == null) ? 0 : this.propkey.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.autorun == null) ? 0 : this.autorun.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.taskerBean == null) ? 0 : this.taskerBean.hashCode());
        result = prime * result + ((this.taskerPara == null) ? 0 : this.taskerPara.hashCode());
        result = prime * result + ((this.taskerName == null) ? 0 : this.taskerName.hashCode());
        result = prime * result + ((this.taskerFast == null) ? 0 : this.taskerFast.hashCode());
        result = prime * result + ((this.taskerApps == null) ? 0 : this.taskerApps.hashCode());
        result = prime * result + ((this.taskerRuns == null) ? 0 : this.taskerRuns.hashCode());
        result = prime * result + ((this.noticeBean == null) ? 0 : this.noticeBean.hashCode());
        result = prime * result + ((this.noticeWhen == null) ? 0 : this.noticeWhen.hashCode());
        result = prime * result + ((this.noticeConf == null) ? 0 : this.noticeConf.hashCode());
        result = prime * result + ((this.timingZone == null) ? 0 : this.timingZone.hashCode());
        result = prime * result + ((this.timingType == null) ? 0 : this.timingType.hashCode());
        result = prime * result + ((this.timingCron == null) ? 0 : this.timingCron.hashCode());
        result = prime * result + ((this.timingIdle == null) ? 0 : this.timingIdle.hashCode());
        result = prime * result + ((this.timingRate == null) ? 0 : this.timingRate.hashCode());
        result = prime * result + ((this.timingTune == null) ? 0 : this.timingTune.hashCode());
        result = prime * result + ((this.timingMiss == null) ? 0 : this.timingMiss.hashCode());
        result = prime * result + ((this.timingBeat == null) ? 0 : this.timingBeat.hashCode());
        result = prime * result + ((this.duringFrom == null) ? 0 : this.duringFrom.hashCode());
        result = prime * result + ((this.duringStop == null) ? 0 : this.duringStop.hashCode());
        result = prime * result + ((this.duringExec == null) ? 0 : this.duringExec.hashCode());
        result = prime * result + ((this.duringFail == null) ? 0 : this.duringFail.hashCode());
        result = prime * result + ((this.duringDone == null) ? 0 : this.duringDone.hashCode());
        result = prime * result + ((this.duringBoot == null) ? 0 : this.duringBoot.hashCode());
        result = prime * result + ((this.resultKeep == null) ? 0 : this.resultKeep.hashCode());
        result = prime * result + ((this.lastExec == null) ? 0 : this.lastExec.hashCode());
        result = prime * result + ((this.lastExit == null) ? 0 : this.lastExit.hashCode());
        result = prime * result + ((this.lastFail == null) ? 0 : this.lastFail.hashCode());
        result = prime * result + ((this.nextExec == null) ? 0 : this.nextExec.hashCode());
        result = prime * result + ((this.nextLock == null) ? 0 : this.nextLock.hashCode());
        result = prime * result + ((this.durFail == null) ? 0 : this.durFail.hashCode());
        result = prime * result + ((this.sumExec == null) ? 0 : this.sumExec.hashCode());
        result = prime * result + ((this.sumFail == null) ? 0 : this.sumFail.hashCode());
        result = prime * result + ((this.sumDone == null) ? 0 : this.sumDone.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinTaskDefine (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(propkey);
        sb.append(", ").append(enabled);
        sb.append(", ").append(autorun);
        sb.append(", ").append(version);
        sb.append(", ").append(taskerBean);
        sb.append(", ").append(taskerPara);
        sb.append(", ").append(taskerName);
        sb.append(", ").append(taskerFast);
        sb.append(", ").append(taskerApps);
        sb.append(", ").append(taskerRuns);
        sb.append(", ").append(noticeBean);
        sb.append(", ").append(noticeWhen);
        sb.append(", ").append(noticeConf);
        sb.append(", ").append(timingZone);
        sb.append(", ").append(timingType);
        sb.append(", ").append(timingCron);
        sb.append(", ").append(timingIdle);
        sb.append(", ").append(timingRate);
        sb.append(", ").append(timingTune);
        sb.append(", ").append(timingMiss);
        sb.append(", ").append(timingBeat);
        sb.append(", ").append(duringFrom);
        sb.append(", ").append(duringStop);
        sb.append(", ").append(duringExec);
        sb.append(", ").append(duringFail);
        sb.append(", ").append(duringDone);
        sb.append(", ").append(duringBoot);
        sb.append(", ").append(resultKeep);
        sb.append(", ").append(lastExec);
        sb.append(", ").append(lastExit);
        sb.append(", ").append(lastFail);
        sb.append(", ").append(nextExec);
        sb.append(", ").append(nextLock);
        sb.append(", ").append(durFail);
        sb.append(", ").append(sumExec);
        sb.append(", ").append(sumFail);
        sb.append(", ").append(sumDone);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinTaskDefine from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setPropkey(from.getPropkey());
        setEnabled(from.getEnabled());
        setAutorun(from.getAutorun());
        setVersion(from.getVersion());
        setTaskerBean(from.getTaskerBean());
        setTaskerPara(from.getTaskerPara());
        setTaskerName(from.getTaskerName());
        setTaskerFast(from.getTaskerFast());
        setTaskerApps(from.getTaskerApps());
        setTaskerRuns(from.getTaskerRuns());
        setNoticeBean(from.getNoticeBean());
        setNoticeWhen(from.getNoticeWhen());
        setNoticeConf(from.getNoticeConf());
        setTimingZone(from.getTimingZone());
        setTimingType(from.getTimingType());
        setTimingCron(from.getTimingCron());
        setTimingIdle(from.getTimingIdle());
        setTimingRate(from.getTimingRate());
        setTimingTune(from.getTimingTune());
        setTimingMiss(from.getTimingMiss());
        setTimingBeat(from.getTimingBeat());
        setDuringFrom(from.getDuringFrom());
        setDuringStop(from.getDuringStop());
        setDuringExec(from.getDuringExec());
        setDuringFail(from.getDuringFail());
        setDuringDone(from.getDuringDone());
        setDuringBoot(from.getDuringBoot());
        setResultKeep(from.getResultKeep());
        setLastExec(from.getLastExec());
        setLastExit(from.getLastExit());
        setLastFail(from.getLastFail());
        setNextExec(from.getNextExec());
        setNextLock(from.getNextLock());
        setDurFail(from.getDurFail());
        setSumExec(from.getSumExec());
        setSumFail(from.getSumFail());
        setSumDone(from.getSumDone());
    }

    @Override
    public <E extends IWinTaskDefine> E into(E into) {
        into.from(this);
        return into;
    }
}
