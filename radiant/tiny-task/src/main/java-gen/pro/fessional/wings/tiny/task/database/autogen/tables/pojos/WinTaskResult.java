/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.task.database.autogen.tables.pojos;


import java.beans.Transient;
import java.time.LocalDateTime;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;

import javax.annotation.processing.Generated;

import pro.fessional.wings.tiny.task.database.autogen.tables.interfaces.IWinTaskResult;


/**
 * The table <code>wings.win_task_result</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinTaskResult implements IWinTaskResult {

    private static final long serialVersionUID = 1L;

    private Long id;
    private Long taskId;
    private String taskApp;
    private Integer taskPid;
    private String exitData;
    private Boolean exitFail;
    private LocalDateTime timeExec;
    private LocalDateTime timeExit;
    private Integer timeCost;

    public WinTaskResult() {}

    public WinTaskResult(IWinTaskResult value) {
        this.id = value.getId();
        this.taskId = value.getTaskId();
        this.taskApp = value.getTaskApp();
        this.taskPid = value.getTaskPid();
        this.exitData = value.getExitData();
        this.exitFail = value.getExitFail();
        this.timeExec = value.getTimeExec();
        this.timeExit = value.getTimeExit();
        this.timeCost = value.getTimeCost();
    }

    public WinTaskResult(
        Long id,
        Long taskId,
        String taskApp,
        Integer taskPid,
        String exitData,
        Boolean exitFail,
        LocalDateTime timeExec,
        LocalDateTime timeExit,
        Integer timeCost
    ) {
        this.id = id;
        this.taskId = taskId;
        this.taskApp = taskApp;
        this.taskPid = taskPid;
        this.exitData = exitData;
        this.exitFail = exitFail;
        this.timeExec = timeExec;
        this.timeExit = timeExit;
        this.timeCost = timeCost;
    }

    /**
     * Getter for <code>win_task_result.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_task_result.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    @Transient
    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>win_task_result.task_id</code>.
     */
    @Override
    public Long getTaskId() {
        return this.taskId;
    }

    /**
     * Setter for <code>win_task_result.task_id</code>.
     */
    @Override
    public void setTaskId(Long taskId) {
        this.taskId = taskId;
    }

    @Transient
    public void setTaskIdIf(Long taskId, boolean bool) {
        if (bool) {
            this.taskId = taskId;
        }
    }

    @Transient
    public void setTaskIdIf(Supplier<Long> taskId, boolean bool) {
        if (bool) {
            this.taskId = taskId.get();
        }
    }

    @Transient
    public void setTaskIdIf(Long taskId, Predicate<Long> bool) {
        if (bool.test(taskId)) {
            this.taskId = taskId;
        }
    }

    @Transient
    public void setTaskIdIf(Long taskId, Predicate<Long> bool, Supplier<Long>... taskIds) {
        if (bool.test(taskId)) {
            this.taskId = taskId;
            return;
        }
        for (Supplier<Long> supplier : taskIds) {
            taskId = supplier.get();
            if (bool.test(taskId)) {
                this.taskId = taskId;
                return;
            }
        }
    }

    @Transient
    public void setTaskIdIfNot(Long taskId, Predicate<Long> bool) {
        if (!bool.test(taskId)) {
            this.taskId = taskId;
        }
    }

    @Transient
    public void setTaskIdIfNot(Long taskId, Predicate<Long> bool, Supplier<Long>... taskIds) {
        if (!bool.test(taskId)) {
            this.taskId = taskId;
            return;
        }
        for (Supplier<Long> supplier : taskIds) {
            taskId = supplier.get();
            if (!bool.test(taskId)) {
                this.taskId = taskId;
                return;
            }
        }
    }

    @Transient
    public void setTaskIdIf(UnaryOperator<Long> taskId) {
        this.taskId = taskId.apply(this.taskId);
    }


    /**
     * Getter for <code>win_task_result.task_app</code>.
     */
    @Override
    public String getTaskApp() {
        return this.taskApp;
    }

    /**
     * Setter for <code>win_task_result.task_app</code>.
     */
    @Override
    public void setTaskApp(String taskApp) {
        this.taskApp = taskApp;
    }

    @Transient
    public void setTaskAppIf(String taskApp, boolean bool) {
        if (bool) {
            this.taskApp = taskApp;
        }
    }

    @Transient
    public void setTaskAppIf(Supplier<String> taskApp, boolean bool) {
        if (bool) {
            this.taskApp = taskApp.get();
        }
    }

    @Transient
    public void setTaskAppIf(String taskApp, Predicate<String> bool) {
        if (bool.test(taskApp)) {
            this.taskApp = taskApp;
        }
    }

    @Transient
    public void setTaskAppIf(String taskApp, Predicate<String> bool, Supplier<String>... taskApps) {
        if (bool.test(taskApp)) {
            this.taskApp = taskApp;
            return;
        }
        for (Supplier<String> supplier : taskApps) {
            taskApp = supplier.get();
            if (bool.test(taskApp)) {
                this.taskApp = taskApp;
                return;
            }
        }
    }

    @Transient
    public void setTaskAppIfNot(String taskApp, Predicate<String> bool) {
        if (!bool.test(taskApp)) {
            this.taskApp = taskApp;
        }
    }

    @Transient
    public void setTaskAppIfNot(String taskApp, Predicate<String> bool, Supplier<String>... taskApps) {
        if (!bool.test(taskApp)) {
            this.taskApp = taskApp;
            return;
        }
        for (Supplier<String> supplier : taskApps) {
            taskApp = supplier.get();
            if (!bool.test(taskApp)) {
                this.taskApp = taskApp;
                return;
            }
        }
    }

    @Transient
    public void setTaskAppIf(UnaryOperator<String> taskApp) {
        this.taskApp = taskApp.apply(this.taskApp);
    }


    /**
     * Getter for <code>win_task_result.task_pid</code>.
     */
    @Override
    public Integer getTaskPid() {
        return this.taskPid;
    }

    /**
     * Setter for <code>win_task_result.task_pid</code>.
     */
    @Override
    public void setTaskPid(Integer taskPid) {
        this.taskPid = taskPid;
    }

    @Transient
    public void setTaskPidIf(Integer taskPid, boolean bool) {
        if (bool) {
            this.taskPid = taskPid;
        }
    }

    @Transient
    public void setTaskPidIf(Supplier<Integer> taskPid, boolean bool) {
        if (bool) {
            this.taskPid = taskPid.get();
        }
    }

    @Transient
    public void setTaskPidIf(Integer taskPid, Predicate<Integer> bool) {
        if (bool.test(taskPid)) {
            this.taskPid = taskPid;
        }
    }

    @Transient
    public void setTaskPidIf(Integer taskPid, Predicate<Integer> bool, Supplier<Integer>... taskPids) {
        if (bool.test(taskPid)) {
            this.taskPid = taskPid;
            return;
        }
        for (Supplier<Integer> supplier : taskPids) {
            taskPid = supplier.get();
            if (bool.test(taskPid)) {
                this.taskPid = taskPid;
                return;
            }
        }
    }

    @Transient
    public void setTaskPidIfNot(Integer taskPid, Predicate<Integer> bool) {
        if (!bool.test(taskPid)) {
            this.taskPid = taskPid;
        }
    }

    @Transient
    public void setTaskPidIfNot(Integer taskPid, Predicate<Integer> bool, Supplier<Integer>... taskPids) {
        if (!bool.test(taskPid)) {
            this.taskPid = taskPid;
            return;
        }
        for (Supplier<Integer> supplier : taskPids) {
            taskPid = supplier.get();
            if (!bool.test(taskPid)) {
                this.taskPid = taskPid;
                return;
            }
        }
    }

    @Transient
    public void setTaskPidIf(UnaryOperator<Integer> taskPid) {
        this.taskPid = taskPid.apply(this.taskPid);
    }


    /**
     * Getter for <code>win_task_result.exit_data</code>.
     */
    @Override
    public String getExitData() {
        return this.exitData;
    }

    /**
     * Setter for <code>win_task_result.exit_data</code>.
     */
    @Override
    public void setExitData(String exitData) {
        this.exitData = exitData;
    }

    @Transient
    public void setExitDataIf(String exitData, boolean bool) {
        if (bool) {
            this.exitData = exitData;
        }
    }

    @Transient
    public void setExitDataIf(Supplier<String> exitData, boolean bool) {
        if (bool) {
            this.exitData = exitData.get();
        }
    }

    @Transient
    public void setExitDataIf(String exitData, Predicate<String> bool) {
        if (bool.test(exitData)) {
            this.exitData = exitData;
        }
    }

    @Transient
    public void setExitDataIf(String exitData, Predicate<String> bool, Supplier<String>... exitDatas) {
        if (bool.test(exitData)) {
            this.exitData = exitData;
            return;
        }
        for (Supplier<String> supplier : exitDatas) {
            exitData = supplier.get();
            if (bool.test(exitData)) {
                this.exitData = exitData;
                return;
            }
        }
    }

    @Transient
    public void setExitDataIfNot(String exitData, Predicate<String> bool) {
        if (!bool.test(exitData)) {
            this.exitData = exitData;
        }
    }

    @Transient
    public void setExitDataIfNot(String exitData, Predicate<String> bool, Supplier<String>... exitDatas) {
        if (!bool.test(exitData)) {
            this.exitData = exitData;
            return;
        }
        for (Supplier<String> supplier : exitDatas) {
            exitData = supplier.get();
            if (!bool.test(exitData)) {
                this.exitData = exitData;
                return;
            }
        }
    }

    @Transient
    public void setExitDataIf(UnaryOperator<String> exitData) {
        this.exitData = exitData.apply(this.exitData);
    }


    /**
     * Getter for <code>win_task_result.exit_fail</code>.
     */
    @Override
    public Boolean getExitFail() {
        return this.exitFail;
    }

    /**
     * Setter for <code>win_task_result.exit_fail</code>.
     */
    @Override
    public void setExitFail(Boolean exitFail) {
        this.exitFail = exitFail;
    }

    @Transient
    public void setExitFailIf(Boolean exitFail, boolean bool) {
        if (bool) {
            this.exitFail = exitFail;
        }
    }

    @Transient
    public void setExitFailIf(Supplier<Boolean> exitFail, boolean bool) {
        if (bool) {
            this.exitFail = exitFail.get();
        }
    }

    @Transient
    public void setExitFailIf(Boolean exitFail, Predicate<Boolean> bool) {
        if (bool.test(exitFail)) {
            this.exitFail = exitFail;
        }
    }

    @Transient
    public void setExitFailIf(Boolean exitFail, Predicate<Boolean> bool, Supplier<Boolean>... exitFails) {
        if (bool.test(exitFail)) {
            this.exitFail = exitFail;
            return;
        }
        for (Supplier<Boolean> supplier : exitFails) {
            exitFail = supplier.get();
            if (bool.test(exitFail)) {
                this.exitFail = exitFail;
                return;
            }
        }
    }

    @Transient
    public void setExitFailIfNot(Boolean exitFail, Predicate<Boolean> bool) {
        if (!bool.test(exitFail)) {
            this.exitFail = exitFail;
        }
    }

    @Transient
    public void setExitFailIfNot(Boolean exitFail, Predicate<Boolean> bool, Supplier<Boolean>... exitFails) {
        if (!bool.test(exitFail)) {
            this.exitFail = exitFail;
            return;
        }
        for (Supplier<Boolean> supplier : exitFails) {
            exitFail = supplier.get();
            if (!bool.test(exitFail)) {
                this.exitFail = exitFail;
                return;
            }
        }
    }

    @Transient
    public void setExitFailIf(UnaryOperator<Boolean> exitFail) {
        this.exitFail = exitFail.apply(this.exitFail);
    }


    /**
     * Getter for <code>win_task_result.time_exec</code>.
     */
    @Override
    public LocalDateTime getTimeExec() {
        return this.timeExec;
    }

    /**
     * Setter for <code>win_task_result.time_exec</code>.
     */
    @Override
    public void setTimeExec(LocalDateTime timeExec) {
        this.timeExec = timeExec;
    }

    @Transient
    public void setTimeExecIf(LocalDateTime timeExec, boolean bool) {
        if (bool) {
            this.timeExec = timeExec;
        }
    }

    @Transient
    public void setTimeExecIf(Supplier<LocalDateTime> timeExec, boolean bool) {
        if (bool) {
            this.timeExec = timeExec.get();
        }
    }

    @Transient
    public void setTimeExecIf(LocalDateTime timeExec, Predicate<LocalDateTime> bool) {
        if (bool.test(timeExec)) {
            this.timeExec = timeExec;
        }
    }

    @Transient
    public void setTimeExecIf(LocalDateTime timeExec, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... timeExecs) {
        if (bool.test(timeExec)) {
            this.timeExec = timeExec;
            return;
        }
        for (Supplier<LocalDateTime> supplier : timeExecs) {
            timeExec = supplier.get();
            if (bool.test(timeExec)) {
                this.timeExec = timeExec;
                return;
            }
        }
    }

    @Transient
    public void setTimeExecIfNot(LocalDateTime timeExec, Predicate<LocalDateTime> bool) {
        if (!bool.test(timeExec)) {
            this.timeExec = timeExec;
        }
    }

    @Transient
    public void setTimeExecIfNot(LocalDateTime timeExec, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... timeExecs) {
        if (!bool.test(timeExec)) {
            this.timeExec = timeExec;
            return;
        }
        for (Supplier<LocalDateTime> supplier : timeExecs) {
            timeExec = supplier.get();
            if (!bool.test(timeExec)) {
                this.timeExec = timeExec;
                return;
            }
        }
    }

    @Transient
    public void setTimeExecIf(UnaryOperator<LocalDateTime> timeExec) {
        this.timeExec = timeExec.apply(this.timeExec);
    }


    /**
     * Getter for <code>win_task_result.time_exit</code>.
     */
    @Override
    public LocalDateTime getTimeExit() {
        return this.timeExit;
    }

    /**
     * Setter for <code>win_task_result.time_exit</code>.
     */
    @Override
    public void setTimeExit(LocalDateTime timeExit) {
        this.timeExit = timeExit;
    }

    @Transient
    public void setTimeExitIf(LocalDateTime timeExit, boolean bool) {
        if (bool) {
            this.timeExit = timeExit;
        }
    }

    @Transient
    public void setTimeExitIf(Supplier<LocalDateTime> timeExit, boolean bool) {
        if (bool) {
            this.timeExit = timeExit.get();
        }
    }

    @Transient
    public void setTimeExitIf(LocalDateTime timeExit, Predicate<LocalDateTime> bool) {
        if (bool.test(timeExit)) {
            this.timeExit = timeExit;
        }
    }

    @Transient
    public void setTimeExitIf(LocalDateTime timeExit, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... timeExits) {
        if (bool.test(timeExit)) {
            this.timeExit = timeExit;
            return;
        }
        for (Supplier<LocalDateTime> supplier : timeExits) {
            timeExit = supplier.get();
            if (bool.test(timeExit)) {
                this.timeExit = timeExit;
                return;
            }
        }
    }

    @Transient
    public void setTimeExitIfNot(LocalDateTime timeExit, Predicate<LocalDateTime> bool) {
        if (!bool.test(timeExit)) {
            this.timeExit = timeExit;
        }
    }

    @Transient
    public void setTimeExitIfNot(LocalDateTime timeExit, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... timeExits) {
        if (!bool.test(timeExit)) {
            this.timeExit = timeExit;
            return;
        }
        for (Supplier<LocalDateTime> supplier : timeExits) {
            timeExit = supplier.get();
            if (!bool.test(timeExit)) {
                this.timeExit = timeExit;
                return;
            }
        }
    }

    @Transient
    public void setTimeExitIf(UnaryOperator<LocalDateTime> timeExit) {
        this.timeExit = timeExit.apply(this.timeExit);
    }


    /**
     * Getter for <code>win_task_result.time_cost</code>.
     */
    @Override
    public Integer getTimeCost() {
        return this.timeCost;
    }

    /**
     * Setter for <code>win_task_result.time_cost</code>.
     */
    @Override
    public void setTimeCost(Integer timeCost) {
        this.timeCost = timeCost;
    }

    @Transient
    public void setTimeCostIf(Integer timeCost, boolean bool) {
        if (bool) {
            this.timeCost = timeCost;
        }
    }

    @Transient
    public void setTimeCostIf(Supplier<Integer> timeCost, boolean bool) {
        if (bool) {
            this.timeCost = timeCost.get();
        }
    }

    @Transient
    public void setTimeCostIf(Integer timeCost, Predicate<Integer> bool) {
        if (bool.test(timeCost)) {
            this.timeCost = timeCost;
        }
    }

    @Transient
    public void setTimeCostIf(Integer timeCost, Predicate<Integer> bool, Supplier<Integer>... timeCosts) {
        if (bool.test(timeCost)) {
            this.timeCost = timeCost;
            return;
        }
        for (Supplier<Integer> supplier : timeCosts) {
            timeCost = supplier.get();
            if (bool.test(timeCost)) {
                this.timeCost = timeCost;
                return;
            }
        }
    }

    @Transient
    public void setTimeCostIfNot(Integer timeCost, Predicate<Integer> bool) {
        if (!bool.test(timeCost)) {
            this.timeCost = timeCost;
        }
    }

    @Transient
    public void setTimeCostIfNot(Integer timeCost, Predicate<Integer> bool, Supplier<Integer>... timeCosts) {
        if (!bool.test(timeCost)) {
            this.timeCost = timeCost;
            return;
        }
        for (Supplier<Integer> supplier : timeCosts) {
            timeCost = supplier.get();
            if (!bool.test(timeCost)) {
                this.timeCost = timeCost;
                return;
            }
        }
    }

    @Transient
    public void setTimeCostIf(UnaryOperator<Integer> timeCost) {
        this.timeCost = timeCost.apply(this.timeCost);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinTaskResult other = (WinTaskResult) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.taskId == null) {
            if (other.taskId != null)
                return false;
        }
        else if (!this.taskId.equals(other.taskId))
            return false;
        if (this.taskApp == null) {
            if (other.taskApp != null)
                return false;
        }
        else if (!this.taskApp.equals(other.taskApp))
            return false;
        if (this.taskPid == null) {
            if (other.taskPid != null)
                return false;
        }
        else if (!this.taskPid.equals(other.taskPid))
            return false;
        if (this.exitData == null) {
            if (other.exitData != null)
                return false;
        }
        else if (!this.exitData.equals(other.exitData))
            return false;
        if (this.exitFail == null) {
            if (other.exitFail != null)
                return false;
        }
        else if (!this.exitFail.equals(other.exitFail))
            return false;
        if (this.timeExec == null) {
            if (other.timeExec != null)
                return false;
        }
        else if (!this.timeExec.equals(other.timeExec))
            return false;
        if (this.timeExit == null) {
            if (other.timeExit != null)
                return false;
        }
        else if (!this.timeExit.equals(other.timeExit))
            return false;
        if (this.timeCost == null) {
            if (other.timeCost != null)
                return false;
        }
        else if (!this.timeCost.equals(other.timeCost))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.taskId == null) ? 0 : this.taskId.hashCode());
        result = prime * result + ((this.taskApp == null) ? 0 : this.taskApp.hashCode());
        result = prime * result + ((this.taskPid == null) ? 0 : this.taskPid.hashCode());
        result = prime * result + ((this.exitData == null) ? 0 : this.exitData.hashCode());
        result = prime * result + ((this.exitFail == null) ? 0 : this.exitFail.hashCode());
        result = prime * result + ((this.timeExec == null) ? 0 : this.timeExec.hashCode());
        result = prime * result + ((this.timeExit == null) ? 0 : this.timeExit.hashCode());
        result = prime * result + ((this.timeCost == null) ? 0 : this.timeCost.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinTaskResult (");

        sb.append(id);
        sb.append(", ").append(taskId);
        sb.append(", ").append(taskApp);
        sb.append(", ").append(taskPid);
        sb.append(", ").append(exitData);
        sb.append(", ").append(exitFail);
        sb.append(", ").append(timeExec);
        sb.append(", ").append(timeExit);
        sb.append(", ").append(timeCost);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinTaskResult from) {
        setId(from.getId());
        setTaskId(from.getTaskId());
        setTaskApp(from.getTaskApp());
        setTaskPid(from.getTaskPid());
        setExitData(from.getExitData());
        setExitFail(from.getExitFail());
        setTimeExec(from.getTimeExec());
        setTimeExit(from.getTimeExit());
        setTimeCost(from.getTimeCost());
    }

    @Override
    public <E extends IWinTaskResult> E into(E into) {
        into.from(this);
        return into;
    }
}
