/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.task.database.autogen.tables.daos;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoAliasImpl;
import pro.fessional.wings.silencer.spring.boot.ConditionalWingsEnabled;
import pro.fessional.wings.tiny.task.database.autogen.tables.WinTaskResultTable;
import pro.fessional.wings.tiny.task.database.autogen.tables.pojos.WinTaskResult;
import pro.fessional.wings.tiny.task.database.autogen.tables.records.WinTaskResultRecord;


/**
 * The table <code>wings.win_task_result</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
@ConditionalWingsEnabled
public class WinTaskResultDao extends WingsJooqDaoAliasImpl<WinTaskResultTable, WinTaskResultRecord, WinTaskResult, Long> {

    /**
     * Create a new WinTaskResultDao without any configuration
     */
    public WinTaskResultDao() {
        super(WinTaskResultTable.WinTaskResult, WinTaskResult.class);
    }

    /**
     * Create a new WinTaskResultDao with an attached configuration
     */
    @Autowired
    public WinTaskResultDao(Configuration configuration) {
        super(WinTaskResultTable.WinTaskResult, WinTaskResult.class, configuration);
    }

    @Override
    public Long getId(WinTaskResult object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinTaskResult> fetchById(Long... values) {
        return fetch(WinTaskResultTable.WinTaskResult.Id, values);
    }

    public List<WinTaskResult> fetchById(Collection<? extends Long> values) {
        return fetch(WinTaskResultTable.WinTaskResult.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinTaskResult fetchOneById(Long value) {
        return fetchOne(WinTaskResultTable.WinTaskResult.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinTaskResult> fetchOptionalById(Long value) {
        return fetchOptional(WinTaskResultTable.WinTaskResult.Id, value);
    }

    /**
     * Fetch records that have <code>task_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfTaskId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.TaskId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>task_id IN (values)</code>
     */
    public List<WinTaskResult> fetchByTaskId(Long... values) {
        return fetch(WinTaskResultTable.WinTaskResult.TaskId, values);
    }

    public List<WinTaskResult> fetchByTaskId(Collection<? extends Long> values) {
        return fetch(WinTaskResultTable.WinTaskResult.TaskId, values);
    }

    /**
     * Fetch records that have <code>task_app BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfTaskApp(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.TaskApp, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>task_app IN (values)</code>
     */
    public List<WinTaskResult> fetchByTaskApp(String... values) {
        return fetch(WinTaskResultTable.WinTaskResult.TaskApp, values);
    }

    public List<WinTaskResult> fetchByTaskApp(Collection<? extends String> values) {
        return fetch(WinTaskResultTable.WinTaskResult.TaskApp, values);
    }

    /**
     * Fetch records that have <code>task_pid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfTaskPid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.TaskPid, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>task_pid IN (values)</code>
     */
    public List<WinTaskResult> fetchByTaskPid(Integer... values) {
        return fetch(WinTaskResultTable.WinTaskResult.TaskPid, values);
    }

    public List<WinTaskResult> fetchByTaskPid(Collection<? extends Integer> values) {
        return fetch(WinTaskResultTable.WinTaskResult.TaskPid, values);
    }

    /**
     * Fetch records that have <code>exit_data BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfExitData(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.ExitData, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>exit_data IN (values)</code>
     */
    public List<WinTaskResult> fetchByExitData(String... values) {
        return fetch(WinTaskResultTable.WinTaskResult.ExitData, values);
    }

    public List<WinTaskResult> fetchByExitData(Collection<? extends String> values) {
        return fetch(WinTaskResultTable.WinTaskResult.ExitData, values);
    }

    /**
     * Fetch records that have <code>exit_fail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfExitFail(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.ExitFail, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>exit_fail IN (values)</code>
     */
    public List<WinTaskResult> fetchByExitFail(Boolean... values) {
        return fetch(WinTaskResultTable.WinTaskResult.ExitFail, values);
    }

    public List<WinTaskResult> fetchByExitFail(Collection<? extends Boolean> values) {
        return fetch(WinTaskResultTable.WinTaskResult.ExitFail, values);
    }

    /**
     * Fetch records that have <code>time_exec BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfTimeExec(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.TimeExec, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time_exec IN (values)</code>
     */
    public List<WinTaskResult> fetchByTimeExec(LocalDateTime... values) {
        return fetch(WinTaskResultTable.WinTaskResult.TimeExec, values);
    }

    public List<WinTaskResult> fetchByTimeExec(Collection<? extends LocalDateTime> values) {
        return fetch(WinTaskResultTable.WinTaskResult.TimeExec, values);
    }

    /**
     * Fetch records that have <code>time_exit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfTimeExit(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.TimeExit, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time_exit IN (values)</code>
     */
    public List<WinTaskResult> fetchByTimeExit(LocalDateTime... values) {
        return fetch(WinTaskResultTable.WinTaskResult.TimeExit, values);
    }

    public List<WinTaskResult> fetchByTimeExit(Collection<? extends LocalDateTime> values) {
        return fetch(WinTaskResultTable.WinTaskResult.TimeExit, values);
    }

    /**
     * Fetch records that have <code>time_cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinTaskResult> fetchRangeOfTimeCost(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinTaskResultTable.WinTaskResult.TimeCost, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time_cost IN (values)</code>
     */
    public List<WinTaskResult> fetchByTimeCost(Integer... values) {
        return fetch(WinTaskResultTable.WinTaskResult.TimeCost, values);
    }

    public List<WinTaskResult> fetchByTimeCost(Collection<? extends Integer> values) {
        return fetch(WinTaskResultTable.WinTaskResult.TimeCost, values);
    }
}
