/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.grow.database.autogen.tables;


import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Function19;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pro.fessional.wings.faceless.database.jooq.WingsJournalTable;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;
import pro.fessional.wings.tiny.grow.database.autogen.DefaultSchemaTinyGrow;
import pro.fessional.wings.tiny.grow.database.autogen.tables.records.WinGrowTrackRecord;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.function.Function;


/**
 * The table <code>wings.win_grow_track</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102801"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinGrowTrackTable extends TableImpl<WinGrowTrackRecord> implements WingsJournalTable<WinGrowTrackTable>, LightIdAware {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>win_grow_track</code>
     */
    public static final WinGrowTrackTable WinGrowTrack = new WinGrowTrackTable();
    public static final WinGrowTrackTable asK2 = WinGrowTrack.as(pro.fessional.wings.faceless.database.jooq.WingsJooqEnv.uniqueAlias());

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinGrowTrackRecord> getRecordType() {
        return WinGrowTrackRecord.class;
    }

    /**
     * The column <code>win_grow_track.id</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_grow_track.create_dt</code>.
     */
    public final TableField<WinGrowTrackRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP(3)"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_grow_track.track_key</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackKey = createField(DSL.name("track_key"), SQLDataType.VARCHAR(500).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_grow_track.track_ref</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackRef = createField(DSL.name("track_ref"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_grow_track.track_app</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackApp = createField(DSL.name("track_app"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_grow_track.track_env</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackEnv = createField(DSL.name("track_env"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>win_grow_track.track_ins</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackIns = createField(DSL.name("track_ins"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>win_grow_track.track_out</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackOut = createField(DSL.name("track_out"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>win_grow_track.track_err</code>.
     */
    public final TableField<WinGrowTrackRecord, String> TrackErr = createField(DSL.name("track_err"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>win_grow_track.elapse_ms</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> ElapseMs = createField(DSL.name("elapse_ms"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_grow_track.user_key</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> UserKey = createField(DSL.name("user_key"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_grow_track.user_ref</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> UserRef = createField(DSL.name("user_ref"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_grow_track.data_key</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> DataKey = createField(DSL.name("data_key"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_grow_track.data_ref</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> DataRef = createField(DSL.name("data_ref"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_grow_track.data_opt</code>.
     */
    public final TableField<WinGrowTrackRecord, Long> DataOpt = createField(DSL.name("data_opt"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_grow_track.code_key</code>.
     */
    public final TableField<WinGrowTrackRecord, String> CodeKey = createField(DSL.name("code_key"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_grow_track.code_ref</code>.
     */
    public final TableField<WinGrowTrackRecord, String> CodeRef = createField(DSL.name("code_ref"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_grow_track.code_opt</code>.
     */
    public final TableField<WinGrowTrackRecord, String> CodeOpt = createField(DSL.name("code_opt"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_grow_track.word_ref</code>.
     */
    public final TableField<WinGrowTrackRecord, String> WordRef = createField(DSL.name("word_ref"), SQLDataType.VARCHAR(800).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private WinGrowTrackTable(Name alias, Table<WinGrowTrackRecord> aliased) {
        this(alias, aliased, null);
    }

    private WinGrowTrackTable(Name alias, Table<WinGrowTrackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>win_grow_track</code> table reference
     */
    public WinGrowTrackTable(String alias) {
        this(DSL.name(alias), WinGrowTrack);
    }

    /**
     * Create an aliased <code>win_grow_track</code> table reference
     */
    public WinGrowTrackTable(Name alias) {
        this(alias, WinGrowTrack);
    }

    /**
     * Create a <code>win_grow_track</code> table reference
     */
    public WinGrowTrackTable() {
        this(DSL.name("win_grow_track"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchemaTinyGrow.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WinGrowTrackRecord> getPrimaryKey() {
        return Internal.createUniqueKey(WinGrowTrackTable.WinGrowTrack, DSL.name("KEY_win_grow_track_PRIMARY"), new TableField[] { WinGrowTrackTable.WinGrowTrack.Id }, true);
    }

    @Override
    public WinGrowTrackTable as(String alias) {
        return new WinGrowTrackTable(DSL.name(alias), this);
    }

    @Override
    public WinGrowTrackTable as(Name alias) {
        return new WinGrowTrackTable(alias, this);
    }

    @Override
    public WinGrowTrackTable as(Table<?> alias) {
        return new WinGrowTrackTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WinGrowTrackTable rename(String name) {
        return new WinGrowTrackTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinGrowTrackTable rename(Name name) {
        return new WinGrowTrackTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinGrowTrackTable rename(Table<?> name) {
        return new WinGrowTrackTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, LocalDateTime, String, String, String, String, String, String, String, Long, Long, Long, Long, Long, Long, String, String, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }

    /**
     * LightIdAware seqName
     */
    @Override
    @NotNull
    public String getSeqName() {
        return "win_grow_track";
    }

    /**
     * alias asK2
     */
    @Override
    @NotNull
    public WinGrowTrackTable getAliasTable() {
        return asK2;
    }
}
