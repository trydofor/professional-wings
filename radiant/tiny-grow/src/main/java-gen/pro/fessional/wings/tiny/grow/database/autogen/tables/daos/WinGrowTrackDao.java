/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.grow.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;
import pro.fessional.wings.silencer.spring.boot.ConditionalWingsEnabled;
import pro.fessional.wings.tiny.grow.database.autogen.tables.WinGrowTrackTable;
import pro.fessional.wings.tiny.grow.database.autogen.tables.pojos.WinGrowTrack;
import pro.fessional.wings.tiny.grow.database.autogen.tables.records.WinGrowTrackRecord;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;


/**
 * The table <code>wings.win_grow_track</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102801"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
@ConditionalWingsEnabled
public class WinGrowTrackDao extends WingsJooqDaoJournalImpl<WinGrowTrackTable, WinGrowTrackRecord, WinGrowTrack, Long> {

    /**
     * Create a new WinGrowTrackDao without any configuration
     */
    public WinGrowTrackDao() {
        super(WinGrowTrackTable.WinGrowTrack, WinGrowTrack.class);
    }

    /**
     * Create a new WinGrowTrackDao with an attached configuration
     */
    @Autowired
    public WinGrowTrackDao(Configuration configuration) {
        super(WinGrowTrackTable.WinGrowTrack, WinGrowTrack.class, configuration);
    }

    @Override
    public Long getId(WinGrowTrack object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.Id, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinGrowTrack> fetchById(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.Id, values);
    }

    public List<WinGrowTrack> fetchById(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.Id, values);
    }


    public List<WinGrowTrack> fetchByIdLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.Id, values);
    }

    public List<WinGrowTrack> fetchByIdLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinGrowTrack fetchOneById(Long value) {
        return fetchOne(WinGrowTrackTable.WinGrowTrack.Id, value);
    }


    public WinGrowTrack fetchOneByIdLive(Long value) {
        return fetchOneLive(WinGrowTrackTable.WinGrowTrack.Id, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<WinGrowTrack> fetchOptionalById(Long value) {
        return fetchOptional(WinGrowTrackTable.WinGrowTrack.Id, value);
    }


    public Optional<WinGrowTrack> fetchOptionalByIdLive(Long value) {
        return fetchOptionalLive(WinGrowTrackTable.WinGrowTrack.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.CreateDt, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinGrowTrack> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CreateDt, values);
    }

    public List<WinGrowTrack> fetchByCreateDt(Collection<? extends LocalDateTime> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CreateDt, values);
    }


    public List<WinGrowTrack> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CreateDt, values);
    }

    public List<WinGrowTrack> fetchByCreateDtLive(Collection<? extends LocalDateTime> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CreateDt, values);
    }

    /**
     * Fetch records that have <code>track_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackKey, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackKeyLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackKey, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_key IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackKey(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackKey, values);
    }

    public List<WinGrowTrack> fetchByTrackKey(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackKey, values);
    }


    public List<WinGrowTrack> fetchByTrackKeyLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackKey, values);
    }

    public List<WinGrowTrack> fetchByTrackKeyLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackKey, values);
    }

    /**
     * Fetch records that have <code>track_ref BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackRef(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackRef, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackRefLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackRef, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_ref IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackRef(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackRef, values);
    }

    public List<WinGrowTrack> fetchByTrackRef(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackRef, values);
    }


    public List<WinGrowTrack> fetchByTrackRefLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackRef, values);
    }

    public List<WinGrowTrack> fetchByTrackRefLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackRef, values);
    }

    /**
     * Fetch records that have <code>track_app BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackApp(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackApp, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackAppLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackApp, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_app IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackApp(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackApp, values);
    }

    public List<WinGrowTrack> fetchByTrackApp(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackApp, values);
    }


    public List<WinGrowTrack> fetchByTrackAppLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackApp, values);
    }

    public List<WinGrowTrack> fetchByTrackAppLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackApp, values);
    }

    /**
     * Fetch records that have <code>track_env BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackEnv(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackEnv, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackEnvLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackEnv, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_env IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackEnv(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackEnv, values);
    }

    public List<WinGrowTrack> fetchByTrackEnv(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackEnv, values);
    }


    public List<WinGrowTrack> fetchByTrackEnvLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackEnv, values);
    }

    public List<WinGrowTrack> fetchByTrackEnvLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackEnv, values);
    }

    /**
     * Fetch records that have <code>track_ins BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackIns(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackIns, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackInsLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackIns, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_ins IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackIns(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackIns, values);
    }

    public List<WinGrowTrack> fetchByTrackIns(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackIns, values);
    }


    public List<WinGrowTrack> fetchByTrackInsLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackIns, values);
    }

    public List<WinGrowTrack> fetchByTrackInsLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackIns, values);
    }

    /**
     * Fetch records that have <code>track_out BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackOut(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackOut, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackOutLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackOut, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_out IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackOut(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackOut, values);
    }

    public List<WinGrowTrack> fetchByTrackOut(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackOut, values);
    }


    public List<WinGrowTrack> fetchByTrackOutLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackOut, values);
    }

    public List<WinGrowTrack> fetchByTrackOutLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackOut, values);
    }

    /**
     * Fetch records that have <code>track_err BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfTrackErr(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.TrackErr, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfTrackErrLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.TrackErr, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>track_err IN (values)</code>
     */
    public List<WinGrowTrack> fetchByTrackErr(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackErr, values);
    }

    public List<WinGrowTrack> fetchByTrackErr(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.TrackErr, values);
    }


    public List<WinGrowTrack> fetchByTrackErrLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackErr, values);
    }

    public List<WinGrowTrack> fetchByTrackErrLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.TrackErr, values);
    }

    /**
     * Fetch records that have <code>elapse_ms BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfElapseMs(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.ElapseMs, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfElapseMsLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.ElapseMs, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>elapse_ms IN (values)</code>
     */
    public List<WinGrowTrack> fetchByElapseMs(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.ElapseMs, values);
    }

    public List<WinGrowTrack> fetchByElapseMs(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.ElapseMs, values);
    }


    public List<WinGrowTrack> fetchByElapseMsLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.ElapseMs, values);
    }

    public List<WinGrowTrack> fetchByElapseMsLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.ElapseMs, values);
    }

    /**
     * Fetch records that have <code>user_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfUserKey(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.UserKey, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfUserKeyLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.UserKey, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_key IN (values)</code>
     */
    public List<WinGrowTrack> fetchByUserKey(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.UserKey, values);
    }

    public List<WinGrowTrack> fetchByUserKey(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.UserKey, values);
    }


    public List<WinGrowTrack> fetchByUserKeyLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.UserKey, values);
    }

    public List<WinGrowTrack> fetchByUserKeyLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.UserKey, values);
    }

    /**
     * Fetch records that have <code>user_ref BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfUserRef(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.UserRef, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfUserRefLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.UserRef, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_ref IN (values)</code>
     */
    public List<WinGrowTrack> fetchByUserRef(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.UserRef, values);
    }

    public List<WinGrowTrack> fetchByUserRef(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.UserRef, values);
    }


    public List<WinGrowTrack> fetchByUserRefLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.UserRef, values);
    }

    public List<WinGrowTrack> fetchByUserRefLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.UserRef, values);
    }

    /**
     * Fetch records that have <code>data_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfDataKey(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.DataKey, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfDataKeyLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.DataKey, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_key IN (values)</code>
     */
    public List<WinGrowTrack> fetchByDataKey(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.DataKey, values);
    }

    public List<WinGrowTrack> fetchByDataKey(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.DataKey, values);
    }


    public List<WinGrowTrack> fetchByDataKeyLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.DataKey, values);
    }

    public List<WinGrowTrack> fetchByDataKeyLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.DataKey, values);
    }

    /**
     * Fetch records that have <code>data_ref BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfDataRef(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.DataRef, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfDataRefLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.DataRef, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_ref IN (values)</code>
     */
    public List<WinGrowTrack> fetchByDataRef(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.DataRef, values);
    }

    public List<WinGrowTrack> fetchByDataRef(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.DataRef, values);
    }


    public List<WinGrowTrack> fetchByDataRefLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.DataRef, values);
    }

    public List<WinGrowTrack> fetchByDataRefLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.DataRef, values);
    }

    /**
     * Fetch records that have <code>data_opt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfDataOpt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.DataOpt, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfDataOptLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.DataOpt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_opt IN (values)</code>
     */
    public List<WinGrowTrack> fetchByDataOpt(Long... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.DataOpt, values);
    }

    public List<WinGrowTrack> fetchByDataOpt(Collection<? extends Long> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.DataOpt, values);
    }


    public List<WinGrowTrack> fetchByDataOptLive(Long... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.DataOpt, values);
    }

    public List<WinGrowTrack> fetchByDataOptLive(Collection<? extends Long> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.DataOpt, values);
    }

    /**
     * Fetch records that have <code>code_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfCodeKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.CodeKey, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfCodeKeyLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.CodeKey, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code_key IN (values)</code>
     */
    public List<WinGrowTrack> fetchByCodeKey(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CodeKey, values);
    }

    public List<WinGrowTrack> fetchByCodeKey(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CodeKey, values);
    }


    public List<WinGrowTrack> fetchByCodeKeyLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CodeKey, values);
    }

    public List<WinGrowTrack> fetchByCodeKeyLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CodeKey, values);
    }

    /**
     * Fetch records that have <code>code_ref BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfCodeRef(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.CodeRef, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfCodeRefLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.CodeRef, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code_ref IN (values)</code>
     */
    public List<WinGrowTrack> fetchByCodeRef(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CodeRef, values);
    }

    public List<WinGrowTrack> fetchByCodeRef(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CodeRef, values);
    }


    public List<WinGrowTrack> fetchByCodeRefLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CodeRef, values);
    }

    public List<WinGrowTrack> fetchByCodeRefLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CodeRef, values);
    }

    /**
     * Fetch records that have <code>code_opt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfCodeOpt(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.CodeOpt, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfCodeOptLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.CodeOpt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code_opt IN (values)</code>
     */
    public List<WinGrowTrack> fetchByCodeOpt(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CodeOpt, values);
    }

    public List<WinGrowTrack> fetchByCodeOpt(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.CodeOpt, values);
    }


    public List<WinGrowTrack> fetchByCodeOptLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CodeOpt, values);
    }

    public List<WinGrowTrack> fetchByCodeOptLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.CodeOpt, values);
    }

    /**
     * Fetch records that have <code>word_ref BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<WinGrowTrack> fetchRangeOfWordRef(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinGrowTrackTable.WinGrowTrack.WordRef, lowerInclusive, upperInclusive);
    }


    public List<WinGrowTrack> fetchRangeOfWordRefLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinGrowTrackTable.WinGrowTrack.WordRef, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>word_ref IN (values)</code>
     */
    public List<WinGrowTrack> fetchByWordRef(String... values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.WordRef, values);
    }

    public List<WinGrowTrack> fetchByWordRef(Collection<? extends String> values) {
        return fetch(WinGrowTrackTable.WinGrowTrack.WordRef, values);
    }


    public List<WinGrowTrack> fetchByWordRefLive(String... values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.WordRef, values);
    }

    public List<WinGrowTrack> fetchByWordRefLive(Collection<? extends String> values) {
        return fetchLive(WinGrowTrackTable.WinGrowTrack.WordRef, values);
    }
}
