/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.grow.database.autogen.tables.pojos;


import pro.fessional.wings.tiny.grow.database.autogen.tables.interfaces.IWinGrowTrack;

import javax.annotation.processing.Generated;
import java.beans.Transient;
import java.time.LocalDateTime;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;


/**
 * The table <code>wings.win_grow_track</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102801"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinGrowTrack implements IWinGrowTrack {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createDt;
    private String trackKey;
    private String trackRef;
    private String trackApp;
    private String trackEnv;
    private String trackIns;
    private String trackOut;
    private String trackErr;
    private Long elapseMs;
    private Long userKey;
    private Long userRef;
    private Long dataKey;
    private Long dataRef;
    private Long dataOpt;
    private String codeKey;
    private String codeRef;
    private String codeOpt;
    private String wordRef;

    public WinGrowTrack() {}

    public WinGrowTrack(IWinGrowTrack value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.trackKey = value.getTrackKey();
        this.trackRef = value.getTrackRef();
        this.trackApp = value.getTrackApp();
        this.trackEnv = value.getTrackEnv();
        this.trackIns = value.getTrackIns();
        this.trackOut = value.getTrackOut();
        this.trackErr = value.getTrackErr();
        this.elapseMs = value.getElapseMs();
        this.userKey = value.getUserKey();
        this.userRef = value.getUserRef();
        this.dataKey = value.getDataKey();
        this.dataRef = value.getDataRef();
        this.dataOpt = value.getDataOpt();
        this.codeKey = value.getCodeKey();
        this.codeRef = value.getCodeRef();
        this.codeOpt = value.getCodeOpt();
        this.wordRef = value.getWordRef();
    }

    public WinGrowTrack(
        Long id,
        LocalDateTime createDt,
        String trackKey,
        String trackRef,
        String trackApp,
        String trackEnv,
        String trackIns,
        String trackOut,
        String trackErr,
        Long elapseMs,
        Long userKey,
        Long userRef,
        Long dataKey,
        Long dataRef,
        Long dataOpt,
        String codeKey,
        String codeRef,
        String codeOpt,
        String wordRef
    ) {
        this.id = id;
        this.createDt = createDt;
        this.trackKey = trackKey;
        this.trackRef = trackRef;
        this.trackApp = trackApp;
        this.trackEnv = trackEnv;
        this.trackIns = trackIns;
        this.trackOut = trackOut;
        this.trackErr = trackErr;
        this.elapseMs = elapseMs;
        this.userKey = userKey;
        this.userRef = userRef;
        this.dataKey = dataKey;
        this.dataRef = dataRef;
        this.dataOpt = dataOpt;
        this.codeKey = codeKey;
        this.codeRef = codeRef;
        this.codeOpt = codeOpt;
        this.wordRef = wordRef;
    }

    /**
     * Getter for <code>win_grow_track.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_grow_track.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    @Transient
    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>win_grow_track.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_grow_track.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIf(Supplier<LocalDateTime> createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt.get();
        }
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    @Transient
    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (!bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    @Transient
    public void setCreateDtIf(UnaryOperator<LocalDateTime> createDt) {
        this.createDt = createDt.apply(this.createDt);
    }


    /**
     * Getter for <code>win_grow_track.track_key</code>.
     */
    @Override
    public String getTrackKey() {
        return this.trackKey;
    }

    /**
     * Setter for <code>win_grow_track.track_key</code>.
     */
    @Override
    public void setTrackKey(String trackKey) {
        this.trackKey = trackKey;
    }

    @Transient
    public void setTrackKeyIf(String trackKey, boolean bool) {
        if (bool) {
            this.trackKey = trackKey;
        }
    }

    @Transient
    public void setTrackKeyIf(Supplier<String> trackKey, boolean bool) {
        if (bool) {
            this.trackKey = trackKey.get();
        }
    }

    @Transient
    public void setTrackKeyIf(String trackKey, Predicate<String> bool) {
        if (bool.test(trackKey)) {
            this.trackKey = trackKey;
        }
    }

    @Transient
    public void setTrackKeyIf(String trackKey, Predicate<String> bool, Supplier<String>... trackKeys) {
        if (bool.test(trackKey)) {
            this.trackKey = trackKey;
            return;
        }
        for (Supplier<String> supplier : trackKeys) {
            trackKey = supplier.get();
            if (bool.test(trackKey)) {
                this.trackKey = trackKey;
                return;
            }
        }
    }

    @Transient
    public void setTrackKeyIfNot(String trackKey, Predicate<String> bool) {
        if (!bool.test(trackKey)) {
            this.trackKey = trackKey;
        }
    }

    @Transient
    public void setTrackKeyIfNot(String trackKey, Predicate<String> bool, Supplier<String>... trackKeys) {
        if (!bool.test(trackKey)) {
            this.trackKey = trackKey;
            return;
        }
        for (Supplier<String> supplier : trackKeys) {
            trackKey = supplier.get();
            if (!bool.test(trackKey)) {
                this.trackKey = trackKey;
                return;
            }
        }
    }

    @Transient
    public void setTrackKeyIf(UnaryOperator<String> trackKey) {
        this.trackKey = trackKey.apply(this.trackKey);
    }


    /**
     * Getter for <code>win_grow_track.track_ref</code>.
     */
    @Override
    public String getTrackRef() {
        return this.trackRef;
    }

    /**
     * Setter for <code>win_grow_track.track_ref</code>.
     */
    @Override
    public void setTrackRef(String trackRef) {
        this.trackRef = trackRef;
    }

    @Transient
    public void setTrackRefIf(String trackRef, boolean bool) {
        if (bool) {
            this.trackRef = trackRef;
        }
    }

    @Transient
    public void setTrackRefIf(Supplier<String> trackRef, boolean bool) {
        if (bool) {
            this.trackRef = trackRef.get();
        }
    }

    @Transient
    public void setTrackRefIf(String trackRef, Predicate<String> bool) {
        if (bool.test(trackRef)) {
            this.trackRef = trackRef;
        }
    }

    @Transient
    public void setTrackRefIf(String trackRef, Predicate<String> bool, Supplier<String>... trackRefs) {
        if (bool.test(trackRef)) {
            this.trackRef = trackRef;
            return;
        }
        for (Supplier<String> supplier : trackRefs) {
            trackRef = supplier.get();
            if (bool.test(trackRef)) {
                this.trackRef = trackRef;
                return;
            }
        }
    }

    @Transient
    public void setTrackRefIfNot(String trackRef, Predicate<String> bool) {
        if (!bool.test(trackRef)) {
            this.trackRef = trackRef;
        }
    }

    @Transient
    public void setTrackRefIfNot(String trackRef, Predicate<String> bool, Supplier<String>... trackRefs) {
        if (!bool.test(trackRef)) {
            this.trackRef = trackRef;
            return;
        }
        for (Supplier<String> supplier : trackRefs) {
            trackRef = supplier.get();
            if (!bool.test(trackRef)) {
                this.trackRef = trackRef;
                return;
            }
        }
    }

    @Transient
    public void setTrackRefIf(UnaryOperator<String> trackRef) {
        this.trackRef = trackRef.apply(this.trackRef);
    }


    /**
     * Getter for <code>win_grow_track.track_app</code>.
     */
    @Override
    public String getTrackApp() {
        return this.trackApp;
    }

    /**
     * Setter for <code>win_grow_track.track_app</code>.
     */
    @Override
    public void setTrackApp(String trackApp) {
        this.trackApp = trackApp;
    }

    @Transient
    public void setTrackAppIf(String trackApp, boolean bool) {
        if (bool) {
            this.trackApp = trackApp;
        }
    }

    @Transient
    public void setTrackAppIf(Supplier<String> trackApp, boolean bool) {
        if (bool) {
            this.trackApp = trackApp.get();
        }
    }

    @Transient
    public void setTrackAppIf(String trackApp, Predicate<String> bool) {
        if (bool.test(trackApp)) {
            this.trackApp = trackApp;
        }
    }

    @Transient
    public void setTrackAppIf(String trackApp, Predicate<String> bool, Supplier<String>... trackApps) {
        if (bool.test(trackApp)) {
            this.trackApp = trackApp;
            return;
        }
        for (Supplier<String> supplier : trackApps) {
            trackApp = supplier.get();
            if (bool.test(trackApp)) {
                this.trackApp = trackApp;
                return;
            }
        }
    }

    @Transient
    public void setTrackAppIfNot(String trackApp, Predicate<String> bool) {
        if (!bool.test(trackApp)) {
            this.trackApp = trackApp;
        }
    }

    @Transient
    public void setTrackAppIfNot(String trackApp, Predicate<String> bool, Supplier<String>... trackApps) {
        if (!bool.test(trackApp)) {
            this.trackApp = trackApp;
            return;
        }
        for (Supplier<String> supplier : trackApps) {
            trackApp = supplier.get();
            if (!bool.test(trackApp)) {
                this.trackApp = trackApp;
                return;
            }
        }
    }

    @Transient
    public void setTrackAppIf(UnaryOperator<String> trackApp) {
        this.trackApp = trackApp.apply(this.trackApp);
    }


    /**
     * Getter for <code>win_grow_track.track_env</code>.
     */
    @Override
    public String getTrackEnv() {
        return this.trackEnv;
    }

    /**
     * Setter for <code>win_grow_track.track_env</code>.
     */
    @Override
    public void setTrackEnv(String trackEnv) {
        this.trackEnv = trackEnv;
    }

    @Transient
    public void setTrackEnvIf(String trackEnv, boolean bool) {
        if (bool) {
            this.trackEnv = trackEnv;
        }
    }

    @Transient
    public void setTrackEnvIf(Supplier<String> trackEnv, boolean bool) {
        if (bool) {
            this.trackEnv = trackEnv.get();
        }
    }

    @Transient
    public void setTrackEnvIf(String trackEnv, Predicate<String> bool) {
        if (bool.test(trackEnv)) {
            this.trackEnv = trackEnv;
        }
    }

    @Transient
    public void setTrackEnvIf(String trackEnv, Predicate<String> bool, Supplier<String>... trackEnvs) {
        if (bool.test(trackEnv)) {
            this.trackEnv = trackEnv;
            return;
        }
        for (Supplier<String> supplier : trackEnvs) {
            trackEnv = supplier.get();
            if (bool.test(trackEnv)) {
                this.trackEnv = trackEnv;
                return;
            }
        }
    }

    @Transient
    public void setTrackEnvIfNot(String trackEnv, Predicate<String> bool) {
        if (!bool.test(trackEnv)) {
            this.trackEnv = trackEnv;
        }
    }

    @Transient
    public void setTrackEnvIfNot(String trackEnv, Predicate<String> bool, Supplier<String>... trackEnvs) {
        if (!bool.test(trackEnv)) {
            this.trackEnv = trackEnv;
            return;
        }
        for (Supplier<String> supplier : trackEnvs) {
            trackEnv = supplier.get();
            if (!bool.test(trackEnv)) {
                this.trackEnv = trackEnv;
                return;
            }
        }
    }

    @Transient
    public void setTrackEnvIf(UnaryOperator<String> trackEnv) {
        this.trackEnv = trackEnv.apply(this.trackEnv);
    }


    /**
     * Getter for <code>win_grow_track.track_ins</code>.
     */
    @Override
    public String getTrackIns() {
        return this.trackIns;
    }

    /**
     * Setter for <code>win_grow_track.track_ins</code>.
     */
    @Override
    public void setTrackIns(String trackIns) {
        this.trackIns = trackIns;
    }

    @Transient
    public void setTrackInsIf(String trackIns, boolean bool) {
        if (bool) {
            this.trackIns = trackIns;
        }
    }

    @Transient
    public void setTrackInsIf(Supplier<String> trackIns, boolean bool) {
        if (bool) {
            this.trackIns = trackIns.get();
        }
    }

    @Transient
    public void setTrackInsIf(String trackIns, Predicate<String> bool) {
        if (bool.test(trackIns)) {
            this.trackIns = trackIns;
        }
    }

    @Transient
    public void setTrackInsIf(String trackIns, Predicate<String> bool, Supplier<String>... trackInss) {
        if (bool.test(trackIns)) {
            this.trackIns = trackIns;
            return;
        }
        for (Supplier<String> supplier : trackInss) {
            trackIns = supplier.get();
            if (bool.test(trackIns)) {
                this.trackIns = trackIns;
                return;
            }
        }
    }

    @Transient
    public void setTrackInsIfNot(String trackIns, Predicate<String> bool) {
        if (!bool.test(trackIns)) {
            this.trackIns = trackIns;
        }
    }

    @Transient
    public void setTrackInsIfNot(String trackIns, Predicate<String> bool, Supplier<String>... trackInss) {
        if (!bool.test(trackIns)) {
            this.trackIns = trackIns;
            return;
        }
        for (Supplier<String> supplier : trackInss) {
            trackIns = supplier.get();
            if (!bool.test(trackIns)) {
                this.trackIns = trackIns;
                return;
            }
        }
    }

    @Transient
    public void setTrackInsIf(UnaryOperator<String> trackIns) {
        this.trackIns = trackIns.apply(this.trackIns);
    }


    /**
     * Getter for <code>win_grow_track.track_out</code>.
     */
    @Override
    public String getTrackOut() {
        return this.trackOut;
    }

    /**
     * Setter for <code>win_grow_track.track_out</code>.
     */
    @Override
    public void setTrackOut(String trackOut) {
        this.trackOut = trackOut;
    }

    @Transient
    public void setTrackOutIf(String trackOut, boolean bool) {
        if (bool) {
            this.trackOut = trackOut;
        }
    }

    @Transient
    public void setTrackOutIf(Supplier<String> trackOut, boolean bool) {
        if (bool) {
            this.trackOut = trackOut.get();
        }
    }

    @Transient
    public void setTrackOutIf(String trackOut, Predicate<String> bool) {
        if (bool.test(trackOut)) {
            this.trackOut = trackOut;
        }
    }

    @Transient
    public void setTrackOutIf(String trackOut, Predicate<String> bool, Supplier<String>... trackOuts) {
        if (bool.test(trackOut)) {
            this.trackOut = trackOut;
            return;
        }
        for (Supplier<String> supplier : trackOuts) {
            trackOut = supplier.get();
            if (bool.test(trackOut)) {
                this.trackOut = trackOut;
                return;
            }
        }
    }

    @Transient
    public void setTrackOutIfNot(String trackOut, Predicate<String> bool) {
        if (!bool.test(trackOut)) {
            this.trackOut = trackOut;
        }
    }

    @Transient
    public void setTrackOutIfNot(String trackOut, Predicate<String> bool, Supplier<String>... trackOuts) {
        if (!bool.test(trackOut)) {
            this.trackOut = trackOut;
            return;
        }
        for (Supplier<String> supplier : trackOuts) {
            trackOut = supplier.get();
            if (!bool.test(trackOut)) {
                this.trackOut = trackOut;
                return;
            }
        }
    }

    @Transient
    public void setTrackOutIf(UnaryOperator<String> trackOut) {
        this.trackOut = trackOut.apply(this.trackOut);
    }


    /**
     * Getter for <code>win_grow_track.track_err</code>.
     */
    @Override
    public String getTrackErr() {
        return this.trackErr;
    }

    /**
     * Setter for <code>win_grow_track.track_err</code>.
     */
    @Override
    public void setTrackErr(String trackErr) {
        this.trackErr = trackErr;
    }

    @Transient
    public void setTrackErrIf(String trackErr, boolean bool) {
        if (bool) {
            this.trackErr = trackErr;
        }
    }

    @Transient
    public void setTrackErrIf(Supplier<String> trackErr, boolean bool) {
        if (bool) {
            this.trackErr = trackErr.get();
        }
    }

    @Transient
    public void setTrackErrIf(String trackErr, Predicate<String> bool) {
        if (bool.test(trackErr)) {
            this.trackErr = trackErr;
        }
    }

    @Transient
    public void setTrackErrIf(String trackErr, Predicate<String> bool, Supplier<String>... trackErrs) {
        if (bool.test(trackErr)) {
            this.trackErr = trackErr;
            return;
        }
        for (Supplier<String> supplier : trackErrs) {
            trackErr = supplier.get();
            if (bool.test(trackErr)) {
                this.trackErr = trackErr;
                return;
            }
        }
    }

    @Transient
    public void setTrackErrIfNot(String trackErr, Predicate<String> bool) {
        if (!bool.test(trackErr)) {
            this.trackErr = trackErr;
        }
    }

    @Transient
    public void setTrackErrIfNot(String trackErr, Predicate<String> bool, Supplier<String>... trackErrs) {
        if (!bool.test(trackErr)) {
            this.trackErr = trackErr;
            return;
        }
        for (Supplier<String> supplier : trackErrs) {
            trackErr = supplier.get();
            if (!bool.test(trackErr)) {
                this.trackErr = trackErr;
                return;
            }
        }
    }

    @Transient
    public void setTrackErrIf(UnaryOperator<String> trackErr) {
        this.trackErr = trackErr.apply(this.trackErr);
    }


    /**
     * Getter for <code>win_grow_track.elapse_ms</code>.
     */
    @Override
    public Long getElapseMs() {
        return this.elapseMs;
    }

    /**
     * Setter for <code>win_grow_track.elapse_ms</code>.
     */
    @Override
    public void setElapseMs(Long elapseMs) {
        this.elapseMs = elapseMs;
    }

    @Transient
    public void setElapseMsIf(Long elapseMs, boolean bool) {
        if (bool) {
            this.elapseMs = elapseMs;
        }
    }

    @Transient
    public void setElapseMsIf(Supplier<Long> elapseMs, boolean bool) {
        if (bool) {
            this.elapseMs = elapseMs.get();
        }
    }

    @Transient
    public void setElapseMsIf(Long elapseMs, Predicate<Long> bool) {
        if (bool.test(elapseMs)) {
            this.elapseMs = elapseMs;
        }
    }

    @Transient
    public void setElapseMsIf(Long elapseMs, Predicate<Long> bool, Supplier<Long>... elapseMss) {
        if (bool.test(elapseMs)) {
            this.elapseMs = elapseMs;
            return;
        }
        for (Supplier<Long> supplier : elapseMss) {
            elapseMs = supplier.get();
            if (bool.test(elapseMs)) {
                this.elapseMs = elapseMs;
                return;
            }
        }
    }

    @Transient
    public void setElapseMsIfNot(Long elapseMs, Predicate<Long> bool) {
        if (!bool.test(elapseMs)) {
            this.elapseMs = elapseMs;
        }
    }

    @Transient
    public void setElapseMsIfNot(Long elapseMs, Predicate<Long> bool, Supplier<Long>... elapseMss) {
        if (!bool.test(elapseMs)) {
            this.elapseMs = elapseMs;
            return;
        }
        for (Supplier<Long> supplier : elapseMss) {
            elapseMs = supplier.get();
            if (!bool.test(elapseMs)) {
                this.elapseMs = elapseMs;
                return;
            }
        }
    }

    @Transient
    public void setElapseMsIf(UnaryOperator<Long> elapseMs) {
        this.elapseMs = elapseMs.apply(this.elapseMs);
    }


    /**
     * Getter for <code>win_grow_track.user_key</code>.
     */
    @Override
    public Long getUserKey() {
        return this.userKey;
    }

    /**
     * Setter for <code>win_grow_track.user_key</code>.
     */
    @Override
    public void setUserKey(Long userKey) {
        this.userKey = userKey;
    }

    @Transient
    public void setUserKeyIf(Long userKey, boolean bool) {
        if (bool) {
            this.userKey = userKey;
        }
    }

    @Transient
    public void setUserKeyIf(Supplier<Long> userKey, boolean bool) {
        if (bool) {
            this.userKey = userKey.get();
        }
    }

    @Transient
    public void setUserKeyIf(Long userKey, Predicate<Long> bool) {
        if (bool.test(userKey)) {
            this.userKey = userKey;
        }
    }

    @Transient
    public void setUserKeyIf(Long userKey, Predicate<Long> bool, Supplier<Long>... userKeys) {
        if (bool.test(userKey)) {
            this.userKey = userKey;
            return;
        }
        for (Supplier<Long> supplier : userKeys) {
            userKey = supplier.get();
            if (bool.test(userKey)) {
                this.userKey = userKey;
                return;
            }
        }
    }

    @Transient
    public void setUserKeyIfNot(Long userKey, Predicate<Long> bool) {
        if (!bool.test(userKey)) {
            this.userKey = userKey;
        }
    }

    @Transient
    public void setUserKeyIfNot(Long userKey, Predicate<Long> bool, Supplier<Long>... userKeys) {
        if (!bool.test(userKey)) {
            this.userKey = userKey;
            return;
        }
        for (Supplier<Long> supplier : userKeys) {
            userKey = supplier.get();
            if (!bool.test(userKey)) {
                this.userKey = userKey;
                return;
            }
        }
    }

    @Transient
    public void setUserKeyIf(UnaryOperator<Long> userKey) {
        this.userKey = userKey.apply(this.userKey);
    }


    /**
     * Getter for <code>win_grow_track.user_ref</code>.
     */
    @Override
    public Long getUserRef() {
        return this.userRef;
    }

    /**
     * Setter for <code>win_grow_track.user_ref</code>.
     */
    @Override
    public void setUserRef(Long userRef) {
        this.userRef = userRef;
    }

    @Transient
    public void setUserRefIf(Long userRef, boolean bool) {
        if (bool) {
            this.userRef = userRef;
        }
    }

    @Transient
    public void setUserRefIf(Supplier<Long> userRef, boolean bool) {
        if (bool) {
            this.userRef = userRef.get();
        }
    }

    @Transient
    public void setUserRefIf(Long userRef, Predicate<Long> bool) {
        if (bool.test(userRef)) {
            this.userRef = userRef;
        }
    }

    @Transient
    public void setUserRefIf(Long userRef, Predicate<Long> bool, Supplier<Long>... userRefs) {
        if (bool.test(userRef)) {
            this.userRef = userRef;
            return;
        }
        for (Supplier<Long> supplier : userRefs) {
            userRef = supplier.get();
            if (bool.test(userRef)) {
                this.userRef = userRef;
                return;
            }
        }
    }

    @Transient
    public void setUserRefIfNot(Long userRef, Predicate<Long> bool) {
        if (!bool.test(userRef)) {
            this.userRef = userRef;
        }
    }

    @Transient
    public void setUserRefIfNot(Long userRef, Predicate<Long> bool, Supplier<Long>... userRefs) {
        if (!bool.test(userRef)) {
            this.userRef = userRef;
            return;
        }
        for (Supplier<Long> supplier : userRefs) {
            userRef = supplier.get();
            if (!bool.test(userRef)) {
                this.userRef = userRef;
                return;
            }
        }
    }

    @Transient
    public void setUserRefIf(UnaryOperator<Long> userRef) {
        this.userRef = userRef.apply(this.userRef);
    }


    /**
     * Getter for <code>win_grow_track.data_key</code>.
     */
    @Override
    public Long getDataKey() {
        return this.dataKey;
    }

    /**
     * Setter for <code>win_grow_track.data_key</code>.
     */
    @Override
    public void setDataKey(Long dataKey) {
        this.dataKey = dataKey;
    }

    @Transient
    public void setDataKeyIf(Long dataKey, boolean bool) {
        if (bool) {
            this.dataKey = dataKey;
        }
    }

    @Transient
    public void setDataKeyIf(Supplier<Long> dataKey, boolean bool) {
        if (bool) {
            this.dataKey = dataKey.get();
        }
    }

    @Transient
    public void setDataKeyIf(Long dataKey, Predicate<Long> bool) {
        if (bool.test(dataKey)) {
            this.dataKey = dataKey;
        }
    }

    @Transient
    public void setDataKeyIf(Long dataKey, Predicate<Long> bool, Supplier<Long>... dataKeys) {
        if (bool.test(dataKey)) {
            this.dataKey = dataKey;
            return;
        }
        for (Supplier<Long> supplier : dataKeys) {
            dataKey = supplier.get();
            if (bool.test(dataKey)) {
                this.dataKey = dataKey;
                return;
            }
        }
    }

    @Transient
    public void setDataKeyIfNot(Long dataKey, Predicate<Long> bool) {
        if (!bool.test(dataKey)) {
            this.dataKey = dataKey;
        }
    }

    @Transient
    public void setDataKeyIfNot(Long dataKey, Predicate<Long> bool, Supplier<Long>... dataKeys) {
        if (!bool.test(dataKey)) {
            this.dataKey = dataKey;
            return;
        }
        for (Supplier<Long> supplier : dataKeys) {
            dataKey = supplier.get();
            if (!bool.test(dataKey)) {
                this.dataKey = dataKey;
                return;
            }
        }
    }

    @Transient
    public void setDataKeyIf(UnaryOperator<Long> dataKey) {
        this.dataKey = dataKey.apply(this.dataKey);
    }


    /**
     * Getter for <code>win_grow_track.data_ref</code>.
     */
    @Override
    public Long getDataRef() {
        return this.dataRef;
    }

    /**
     * Setter for <code>win_grow_track.data_ref</code>.
     */
    @Override
    public void setDataRef(Long dataRef) {
        this.dataRef = dataRef;
    }

    @Transient
    public void setDataRefIf(Long dataRef, boolean bool) {
        if (bool) {
            this.dataRef = dataRef;
        }
    }

    @Transient
    public void setDataRefIf(Supplier<Long> dataRef, boolean bool) {
        if (bool) {
            this.dataRef = dataRef.get();
        }
    }

    @Transient
    public void setDataRefIf(Long dataRef, Predicate<Long> bool) {
        if (bool.test(dataRef)) {
            this.dataRef = dataRef;
        }
    }

    @Transient
    public void setDataRefIf(Long dataRef, Predicate<Long> bool, Supplier<Long>... dataRefs) {
        if (bool.test(dataRef)) {
            this.dataRef = dataRef;
            return;
        }
        for (Supplier<Long> supplier : dataRefs) {
            dataRef = supplier.get();
            if (bool.test(dataRef)) {
                this.dataRef = dataRef;
                return;
            }
        }
    }

    @Transient
    public void setDataRefIfNot(Long dataRef, Predicate<Long> bool) {
        if (!bool.test(dataRef)) {
            this.dataRef = dataRef;
        }
    }

    @Transient
    public void setDataRefIfNot(Long dataRef, Predicate<Long> bool, Supplier<Long>... dataRefs) {
        if (!bool.test(dataRef)) {
            this.dataRef = dataRef;
            return;
        }
        for (Supplier<Long> supplier : dataRefs) {
            dataRef = supplier.get();
            if (!bool.test(dataRef)) {
                this.dataRef = dataRef;
                return;
            }
        }
    }

    @Transient
    public void setDataRefIf(UnaryOperator<Long> dataRef) {
        this.dataRef = dataRef.apply(this.dataRef);
    }


    /**
     * Getter for <code>win_grow_track.data_opt</code>.
     */
    @Override
    public Long getDataOpt() {
        return this.dataOpt;
    }

    /**
     * Setter for <code>win_grow_track.data_opt</code>.
     */
    @Override
    public void setDataOpt(Long dataOpt) {
        this.dataOpt = dataOpt;
    }

    @Transient
    public void setDataOptIf(Long dataOpt, boolean bool) {
        if (bool) {
            this.dataOpt = dataOpt;
        }
    }

    @Transient
    public void setDataOptIf(Supplier<Long> dataOpt, boolean bool) {
        if (bool) {
            this.dataOpt = dataOpt.get();
        }
    }

    @Transient
    public void setDataOptIf(Long dataOpt, Predicate<Long> bool) {
        if (bool.test(dataOpt)) {
            this.dataOpt = dataOpt;
        }
    }

    @Transient
    public void setDataOptIf(Long dataOpt, Predicate<Long> bool, Supplier<Long>... dataOpts) {
        if (bool.test(dataOpt)) {
            this.dataOpt = dataOpt;
            return;
        }
        for (Supplier<Long> supplier : dataOpts) {
            dataOpt = supplier.get();
            if (bool.test(dataOpt)) {
                this.dataOpt = dataOpt;
                return;
            }
        }
    }

    @Transient
    public void setDataOptIfNot(Long dataOpt, Predicate<Long> bool) {
        if (!bool.test(dataOpt)) {
            this.dataOpt = dataOpt;
        }
    }

    @Transient
    public void setDataOptIfNot(Long dataOpt, Predicate<Long> bool, Supplier<Long>... dataOpts) {
        if (!bool.test(dataOpt)) {
            this.dataOpt = dataOpt;
            return;
        }
        for (Supplier<Long> supplier : dataOpts) {
            dataOpt = supplier.get();
            if (!bool.test(dataOpt)) {
                this.dataOpt = dataOpt;
                return;
            }
        }
    }

    @Transient
    public void setDataOptIf(UnaryOperator<Long> dataOpt) {
        this.dataOpt = dataOpt.apply(this.dataOpt);
    }


    /**
     * Getter for <code>win_grow_track.code_key</code>.
     */
    @Override
    public String getCodeKey() {
        return this.codeKey;
    }

    /**
     * Setter for <code>win_grow_track.code_key</code>.
     */
    @Override
    public void setCodeKey(String codeKey) {
        this.codeKey = codeKey;
    }

    @Transient
    public void setCodeKeyIf(String codeKey, boolean bool) {
        if (bool) {
            this.codeKey = codeKey;
        }
    }

    @Transient
    public void setCodeKeyIf(Supplier<String> codeKey, boolean bool) {
        if (bool) {
            this.codeKey = codeKey.get();
        }
    }

    @Transient
    public void setCodeKeyIf(String codeKey, Predicate<String> bool) {
        if (bool.test(codeKey)) {
            this.codeKey = codeKey;
        }
    }

    @Transient
    public void setCodeKeyIf(String codeKey, Predicate<String> bool, Supplier<String>... codeKeys) {
        if (bool.test(codeKey)) {
            this.codeKey = codeKey;
            return;
        }
        for (Supplier<String> supplier : codeKeys) {
            codeKey = supplier.get();
            if (bool.test(codeKey)) {
                this.codeKey = codeKey;
                return;
            }
        }
    }

    @Transient
    public void setCodeKeyIfNot(String codeKey, Predicate<String> bool) {
        if (!bool.test(codeKey)) {
            this.codeKey = codeKey;
        }
    }

    @Transient
    public void setCodeKeyIfNot(String codeKey, Predicate<String> bool, Supplier<String>... codeKeys) {
        if (!bool.test(codeKey)) {
            this.codeKey = codeKey;
            return;
        }
        for (Supplier<String> supplier : codeKeys) {
            codeKey = supplier.get();
            if (!bool.test(codeKey)) {
                this.codeKey = codeKey;
                return;
            }
        }
    }

    @Transient
    public void setCodeKeyIf(UnaryOperator<String> codeKey) {
        this.codeKey = codeKey.apply(this.codeKey);
    }


    /**
     * Getter for <code>win_grow_track.code_ref</code>.
     */
    @Override
    public String getCodeRef() {
        return this.codeRef;
    }

    /**
     * Setter for <code>win_grow_track.code_ref</code>.
     */
    @Override
    public void setCodeRef(String codeRef) {
        this.codeRef = codeRef;
    }

    @Transient
    public void setCodeRefIf(String codeRef, boolean bool) {
        if (bool) {
            this.codeRef = codeRef;
        }
    }

    @Transient
    public void setCodeRefIf(Supplier<String> codeRef, boolean bool) {
        if (bool) {
            this.codeRef = codeRef.get();
        }
    }

    @Transient
    public void setCodeRefIf(String codeRef, Predicate<String> bool) {
        if (bool.test(codeRef)) {
            this.codeRef = codeRef;
        }
    }

    @Transient
    public void setCodeRefIf(String codeRef, Predicate<String> bool, Supplier<String>... codeRefs) {
        if (bool.test(codeRef)) {
            this.codeRef = codeRef;
            return;
        }
        for (Supplier<String> supplier : codeRefs) {
            codeRef = supplier.get();
            if (bool.test(codeRef)) {
                this.codeRef = codeRef;
                return;
            }
        }
    }

    @Transient
    public void setCodeRefIfNot(String codeRef, Predicate<String> bool) {
        if (!bool.test(codeRef)) {
            this.codeRef = codeRef;
        }
    }

    @Transient
    public void setCodeRefIfNot(String codeRef, Predicate<String> bool, Supplier<String>... codeRefs) {
        if (!bool.test(codeRef)) {
            this.codeRef = codeRef;
            return;
        }
        for (Supplier<String> supplier : codeRefs) {
            codeRef = supplier.get();
            if (!bool.test(codeRef)) {
                this.codeRef = codeRef;
                return;
            }
        }
    }

    @Transient
    public void setCodeRefIf(UnaryOperator<String> codeRef) {
        this.codeRef = codeRef.apply(this.codeRef);
    }


    /**
     * Getter for <code>win_grow_track.code_opt</code>.
     */
    @Override
    public String getCodeOpt() {
        return this.codeOpt;
    }

    /**
     * Setter for <code>win_grow_track.code_opt</code>.
     */
    @Override
    public void setCodeOpt(String codeOpt) {
        this.codeOpt = codeOpt;
    }

    @Transient
    public void setCodeOptIf(String codeOpt, boolean bool) {
        if (bool) {
            this.codeOpt = codeOpt;
        }
    }

    @Transient
    public void setCodeOptIf(Supplier<String> codeOpt, boolean bool) {
        if (bool) {
            this.codeOpt = codeOpt.get();
        }
    }

    @Transient
    public void setCodeOptIf(String codeOpt, Predicate<String> bool) {
        if (bool.test(codeOpt)) {
            this.codeOpt = codeOpt;
        }
    }

    @Transient
    public void setCodeOptIf(String codeOpt, Predicate<String> bool, Supplier<String>... codeOpts) {
        if (bool.test(codeOpt)) {
            this.codeOpt = codeOpt;
            return;
        }
        for (Supplier<String> supplier : codeOpts) {
            codeOpt = supplier.get();
            if (bool.test(codeOpt)) {
                this.codeOpt = codeOpt;
                return;
            }
        }
    }

    @Transient
    public void setCodeOptIfNot(String codeOpt, Predicate<String> bool) {
        if (!bool.test(codeOpt)) {
            this.codeOpt = codeOpt;
        }
    }

    @Transient
    public void setCodeOptIfNot(String codeOpt, Predicate<String> bool, Supplier<String>... codeOpts) {
        if (!bool.test(codeOpt)) {
            this.codeOpt = codeOpt;
            return;
        }
        for (Supplier<String> supplier : codeOpts) {
            codeOpt = supplier.get();
            if (!bool.test(codeOpt)) {
                this.codeOpt = codeOpt;
                return;
            }
        }
    }

    @Transient
    public void setCodeOptIf(UnaryOperator<String> codeOpt) {
        this.codeOpt = codeOpt.apply(this.codeOpt);
    }


    /**
     * Getter for <code>win_grow_track.word_ref</code>.
     */
    @Override
    public String getWordRef() {
        return this.wordRef;
    }

    /**
     * Setter for <code>win_grow_track.word_ref</code>.
     */
    @Override
    public void setWordRef(String wordRef) {
        this.wordRef = wordRef;
    }

    @Transient
    public void setWordRefIf(String wordRef, boolean bool) {
        if (bool) {
            this.wordRef = wordRef;
        }
    }

    @Transient
    public void setWordRefIf(Supplier<String> wordRef, boolean bool) {
        if (bool) {
            this.wordRef = wordRef.get();
        }
    }

    @Transient
    public void setWordRefIf(String wordRef, Predicate<String> bool) {
        if (bool.test(wordRef)) {
            this.wordRef = wordRef;
        }
    }

    @Transient
    public void setWordRefIf(String wordRef, Predicate<String> bool, Supplier<String>... wordRefs) {
        if (bool.test(wordRef)) {
            this.wordRef = wordRef;
            return;
        }
        for (Supplier<String> supplier : wordRefs) {
            wordRef = supplier.get();
            if (bool.test(wordRef)) {
                this.wordRef = wordRef;
                return;
            }
        }
    }

    @Transient
    public void setWordRefIfNot(String wordRef, Predicate<String> bool) {
        if (!bool.test(wordRef)) {
            this.wordRef = wordRef;
        }
    }

    @Transient
    public void setWordRefIfNot(String wordRef, Predicate<String> bool, Supplier<String>... wordRefs) {
        if (!bool.test(wordRef)) {
            this.wordRef = wordRef;
            return;
        }
        for (Supplier<String> supplier : wordRefs) {
            wordRef = supplier.get();
            if (!bool.test(wordRef)) {
                this.wordRef = wordRef;
                return;
            }
        }
    }

    @Transient
    public void setWordRefIf(UnaryOperator<String> wordRef) {
        this.wordRef = wordRef.apply(this.wordRef);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinGrowTrack other = (WinGrowTrack) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!this.createDt.equals(other.createDt))
            return false;
        if (this.trackKey == null) {
            if (other.trackKey != null)
                return false;
        }
        else if (!this.trackKey.equals(other.trackKey))
            return false;
        if (this.trackRef == null) {
            if (other.trackRef != null)
                return false;
        }
        else if (!this.trackRef.equals(other.trackRef))
            return false;
        if (this.trackApp == null) {
            if (other.trackApp != null)
                return false;
        }
        else if (!this.trackApp.equals(other.trackApp))
            return false;
        if (this.trackEnv == null) {
            if (other.trackEnv != null)
                return false;
        }
        else if (!this.trackEnv.equals(other.trackEnv))
            return false;
        if (this.trackIns == null) {
            if (other.trackIns != null)
                return false;
        }
        else if (!this.trackIns.equals(other.trackIns))
            return false;
        if (this.trackOut == null) {
            if (other.trackOut != null)
                return false;
        }
        else if (!this.trackOut.equals(other.trackOut))
            return false;
        if (this.trackErr == null) {
            if (other.trackErr != null)
                return false;
        }
        else if (!this.trackErr.equals(other.trackErr))
            return false;
        if (this.elapseMs == null) {
            if (other.elapseMs != null)
                return false;
        }
        else if (!this.elapseMs.equals(other.elapseMs))
            return false;
        if (this.userKey == null) {
            if (other.userKey != null)
                return false;
        }
        else if (!this.userKey.equals(other.userKey))
            return false;
        if (this.userRef == null) {
            if (other.userRef != null)
                return false;
        }
        else if (!this.userRef.equals(other.userRef))
            return false;
        if (this.dataKey == null) {
            if (other.dataKey != null)
                return false;
        }
        else if (!this.dataKey.equals(other.dataKey))
            return false;
        if (this.dataRef == null) {
            if (other.dataRef != null)
                return false;
        }
        else if (!this.dataRef.equals(other.dataRef))
            return false;
        if (this.dataOpt == null) {
            if (other.dataOpt != null)
                return false;
        }
        else if (!this.dataOpt.equals(other.dataOpt))
            return false;
        if (this.codeKey == null) {
            if (other.codeKey != null)
                return false;
        }
        else if (!this.codeKey.equals(other.codeKey))
            return false;
        if (this.codeRef == null) {
            if (other.codeRef != null)
                return false;
        }
        else if (!this.codeRef.equals(other.codeRef))
            return false;
        if (this.codeOpt == null) {
            if (other.codeOpt != null)
                return false;
        }
        else if (!this.codeOpt.equals(other.codeOpt))
            return false;
        if (this.wordRef == null) {
            if (other.wordRef != null)
                return false;
        }
        else if (!this.wordRef.equals(other.wordRef))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.trackKey == null) ? 0 : this.trackKey.hashCode());
        result = prime * result + ((this.trackRef == null) ? 0 : this.trackRef.hashCode());
        result = prime * result + ((this.trackApp == null) ? 0 : this.trackApp.hashCode());
        result = prime * result + ((this.trackEnv == null) ? 0 : this.trackEnv.hashCode());
        result = prime * result + ((this.trackIns == null) ? 0 : this.trackIns.hashCode());
        result = prime * result + ((this.trackOut == null) ? 0 : this.trackOut.hashCode());
        result = prime * result + ((this.trackErr == null) ? 0 : this.trackErr.hashCode());
        result = prime * result + ((this.elapseMs == null) ? 0 : this.elapseMs.hashCode());
        result = prime * result + ((this.userKey == null) ? 0 : this.userKey.hashCode());
        result = prime * result + ((this.userRef == null) ? 0 : this.userRef.hashCode());
        result = prime * result + ((this.dataKey == null) ? 0 : this.dataKey.hashCode());
        result = prime * result + ((this.dataRef == null) ? 0 : this.dataRef.hashCode());
        result = prime * result + ((this.dataOpt == null) ? 0 : this.dataOpt.hashCode());
        result = prime * result + ((this.codeKey == null) ? 0 : this.codeKey.hashCode());
        result = prime * result + ((this.codeRef == null) ? 0 : this.codeRef.hashCode());
        result = prime * result + ((this.codeOpt == null) ? 0 : this.codeOpt.hashCode());
        result = prime * result + ((this.wordRef == null) ? 0 : this.wordRef.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinGrowTrack (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(trackKey);
        sb.append(", ").append(trackRef);
        sb.append(", ").append(trackApp);
        sb.append(", ").append(trackEnv);
        sb.append(", ").append(trackIns);
        sb.append(", ").append(trackOut);
        sb.append(", ").append(trackErr);
        sb.append(", ").append(elapseMs);
        sb.append(", ").append(userKey);
        sb.append(", ").append(userRef);
        sb.append(", ").append(dataKey);
        sb.append(", ").append(dataRef);
        sb.append(", ").append(dataOpt);
        sb.append(", ").append(codeKey);
        sb.append(", ").append(codeRef);
        sb.append(", ").append(codeOpt);
        sb.append(", ").append(wordRef);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinGrowTrack from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setTrackKey(from.getTrackKey());
        setTrackRef(from.getTrackRef());
        setTrackApp(from.getTrackApp());
        setTrackEnv(from.getTrackEnv());
        setTrackIns(from.getTrackIns());
        setTrackOut(from.getTrackOut());
        setTrackErr(from.getTrackErr());
        setElapseMs(from.getElapseMs());
        setUserKey(from.getUserKey());
        setUserRef(from.getUserRef());
        setDataKey(from.getDataKey());
        setDataRef(from.getDataRef());
        setDataOpt(from.getDataOpt());
        setCodeKey(from.getCodeKey());
        setCodeRef(from.getCodeRef());
        setCodeOpt(from.getCodeOpt());
        setWordRef(from.getWordRef());
    }

    @Override
    public <E extends IWinGrowTrack> E into(E into) {
        into.from(this);
        return into;
    }
}
