/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.mail.database.autogen.tables.pojos;


import pro.fessional.wings.tiny.mail.database.autogen.tables.interfaces.IWinMailSender;

import javax.annotation.processing.Generated;
import java.beans.Transient;
import java.time.LocalDateTime;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;


/**
 * The table <code>wings.win_mail_sender</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinMailSender implements IWinMailSender {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private LocalDateTime deleteDt;
    private Long commitId;
    private String mailApps;
    private String mailRuns;
    private String mailConf;
    private String mailFrom;
    private String mailTo;
    private String mailCc;
    private String mailBcc;
    private String mailReply;
    private String mailSubj;
    private String mailText;
    private Boolean mailHtml;
    private String mailFile;
    private String mailMark;
    private LocalDateTime mailDate;
    private LocalDateTime lastSend;
    private String lastFail;
    private LocalDateTime lastDone;
    private Integer lastCost;
    private LocalDateTime nextSend;
    private Integer nextLock;
    private Integer sumSend;
    private Integer sumFail;
    private Integer sumDone;
    private Integer maxFail;
    private Integer maxDone;
    private Integer refType;
    private Long refKey1;
    private String refKey2;

    public WinMailSender() {}

    public WinMailSender(IWinMailSender value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.mailApps = value.getMailApps();
        this.mailRuns = value.getMailRuns();
        this.mailConf = value.getMailConf();
        this.mailFrom = value.getMailFrom();
        this.mailTo = value.getMailTo();
        this.mailCc = value.getMailCc();
        this.mailBcc = value.getMailBcc();
        this.mailReply = value.getMailReply();
        this.mailSubj = value.getMailSubj();
        this.mailText = value.getMailText();
        this.mailHtml = value.getMailHtml();
        this.mailFile = value.getMailFile();
        this.mailMark = value.getMailMark();
        this.mailDate = value.getMailDate();
        this.lastSend = value.getLastSend();
        this.lastFail = value.getLastFail();
        this.lastDone = value.getLastDone();
        this.lastCost = value.getLastCost();
        this.nextSend = value.getNextSend();
        this.nextLock = value.getNextLock();
        this.sumSend = value.getSumSend();
        this.sumFail = value.getSumFail();
        this.sumDone = value.getSumDone();
        this.maxFail = value.getMaxFail();
        this.maxDone = value.getMaxDone();
        this.refType = value.getRefType();
        this.refKey1 = value.getRefKey1();
        this.refKey2 = value.getRefKey2();
    }

    public WinMailSender(
        Long id,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        LocalDateTime deleteDt,
        Long commitId,
        String mailApps,
        String mailRuns,
        String mailConf,
        String mailFrom,
        String mailTo,
        String mailCc,
        String mailBcc,
        String mailReply,
        String mailSubj,
        String mailText,
        Boolean mailHtml,
        String mailFile,
        String mailMark,
        LocalDateTime mailDate,
        LocalDateTime lastSend,
        String lastFail,
        LocalDateTime lastDone,
        Integer lastCost,
        LocalDateTime nextSend,
        Integer nextLock,
        Integer sumSend,
        Integer sumFail,
        Integer sumDone,
        Integer maxFail,
        Integer maxDone,
        Integer refType,
        Long refKey1,
        String refKey2
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.mailApps = mailApps;
        this.mailRuns = mailRuns;
        this.mailConf = mailConf;
        this.mailFrom = mailFrom;
        this.mailTo = mailTo;
        this.mailCc = mailCc;
        this.mailBcc = mailBcc;
        this.mailReply = mailReply;
        this.mailSubj = mailSubj;
        this.mailText = mailText;
        this.mailHtml = mailHtml;
        this.mailFile = mailFile;
        this.mailMark = mailMark;
        this.mailDate = mailDate;
        this.lastSend = lastSend;
        this.lastFail = lastFail;
        this.lastDone = lastDone;
        this.lastCost = lastCost;
        this.nextSend = nextSend;
        this.nextLock = nextLock;
        this.sumSend = sumSend;
        this.sumFail = sumFail;
        this.sumDone = sumDone;
        this.maxFail = maxFail;
        this.maxDone = maxDone;
        this.refType = refType;
        this.refKey1 = refKey1;
        this.refKey2 = refKey2;
    }

    /**
     * Getter for <code>win_mail_sender.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_mail_sender.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    @Transient
    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    @Transient
    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    @Transient
    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>win_mail_sender.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_mail_sender.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIf(Supplier<LocalDateTime> createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt.get();
        }
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    @Transient
    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    @Transient
    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (!bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    @Transient
    public void setCreateDtIf(UnaryOperator<LocalDateTime> createDt) {
        this.createDt = createDt.apply(this.createDt);
    }


    /**
     * Getter for <code>win_mail_sender.modify_dt</code>.
     */
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>win_mail_sender.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    @Transient
    public void setModifyDtIf(LocalDateTime modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt;
        }
    }

    @Transient
    public void setModifyDtIf(Supplier<LocalDateTime> modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt.get();
        }
    }

    @Transient
    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    @Transient
    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    @Transient
    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    @Transient
    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (!bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    @Transient
    public void setModifyDtIf(UnaryOperator<LocalDateTime> modifyDt) {
        this.modifyDt = modifyDt.apply(this.modifyDt);
    }


    /**
     * Getter for <code>win_mail_sender.delete_dt</code>.
     */
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>win_mail_sender.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    @Transient
    public void setDeleteDtIf(LocalDateTime deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt;
        }
    }

    @Transient
    public void setDeleteDtIf(Supplier<LocalDateTime> deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt.get();
        }
    }

    @Transient
    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    @Transient
    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    @Transient
    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    @Transient
    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (!bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    @Transient
    public void setDeleteDtIf(UnaryOperator<LocalDateTime> deleteDt) {
        this.deleteDt = deleteDt.apply(this.deleteDt);
    }


    /**
     * Getter for <code>win_mail_sender.commit_id</code>.
     */
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>win_mail_sender.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    @Transient
    public void setCommitIdIf(Long commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId;
        }
    }

    @Transient
    public void setCommitIdIf(Supplier<Long> commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId.get();
        }
    }

    @Transient
    public void setCommitIdIf(Long commitId, Predicate<Long> bool) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    @Transient
    public void setCommitIdIf(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    @Transient
    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    @Transient
    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (!bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    @Transient
    public void setCommitIdIf(UnaryOperator<Long> commitId) {
        this.commitId = commitId.apply(this.commitId);
    }


    /**
     * Getter for <code>win_mail_sender.mail_apps</code>.
     */
    @Override
    public String getMailApps() {
        return this.mailApps;
    }

    /**
     * Setter for <code>win_mail_sender.mail_apps</code>.
     */
    @Override
    public void setMailApps(String mailApps) {
        this.mailApps = mailApps;
    }

    @Transient
    public void setMailAppsIf(String mailApps, boolean bool) {
        if (bool) {
            this.mailApps = mailApps;
        }
    }

    @Transient
    public void setMailAppsIf(Supplier<String> mailApps, boolean bool) {
        if (bool) {
            this.mailApps = mailApps.get();
        }
    }

    @Transient
    public void setMailAppsIf(String mailApps, Predicate<String> bool) {
        if (bool.test(mailApps)) {
            this.mailApps = mailApps;
        }
    }

    @Transient
    public void setMailAppsIf(String mailApps, Predicate<String> bool, Supplier<String>... mailAppss) {
        if (bool.test(mailApps)) {
            this.mailApps = mailApps;
            return;
        }
        for (Supplier<String> supplier : mailAppss) {
            mailApps = supplier.get();
            if (bool.test(mailApps)) {
                this.mailApps = mailApps;
                return;
            }
        }
    }

    @Transient
    public void setMailAppsIfNot(String mailApps, Predicate<String> bool) {
        if (!bool.test(mailApps)) {
            this.mailApps = mailApps;
        }
    }

    @Transient
    public void setMailAppsIfNot(String mailApps, Predicate<String> bool, Supplier<String>... mailAppss) {
        if (!bool.test(mailApps)) {
            this.mailApps = mailApps;
            return;
        }
        for (Supplier<String> supplier : mailAppss) {
            mailApps = supplier.get();
            if (!bool.test(mailApps)) {
                this.mailApps = mailApps;
                return;
            }
        }
    }

    @Transient
    public void setMailAppsIf(UnaryOperator<String> mailApps) {
        this.mailApps = mailApps.apply(this.mailApps);
    }


    /**
     * Getter for <code>win_mail_sender.mail_runs</code>.
     */
    @Override
    public String getMailRuns() {
        return this.mailRuns;
    }

    /**
     * Setter for <code>win_mail_sender.mail_runs</code>.
     */
    @Override
    public void setMailRuns(String mailRuns) {
        this.mailRuns = mailRuns;
    }

    @Transient
    public void setMailRunsIf(String mailRuns, boolean bool) {
        if (bool) {
            this.mailRuns = mailRuns;
        }
    }

    @Transient
    public void setMailRunsIf(Supplier<String> mailRuns, boolean bool) {
        if (bool) {
            this.mailRuns = mailRuns.get();
        }
    }

    @Transient
    public void setMailRunsIf(String mailRuns, Predicate<String> bool) {
        if (bool.test(mailRuns)) {
            this.mailRuns = mailRuns;
        }
    }

    @Transient
    public void setMailRunsIf(String mailRuns, Predicate<String> bool, Supplier<String>... mailRunss) {
        if (bool.test(mailRuns)) {
            this.mailRuns = mailRuns;
            return;
        }
        for (Supplier<String> supplier : mailRunss) {
            mailRuns = supplier.get();
            if (bool.test(mailRuns)) {
                this.mailRuns = mailRuns;
                return;
            }
        }
    }

    @Transient
    public void setMailRunsIfNot(String mailRuns, Predicate<String> bool) {
        if (!bool.test(mailRuns)) {
            this.mailRuns = mailRuns;
        }
    }

    @Transient
    public void setMailRunsIfNot(String mailRuns, Predicate<String> bool, Supplier<String>... mailRunss) {
        if (!bool.test(mailRuns)) {
            this.mailRuns = mailRuns;
            return;
        }
        for (Supplier<String> supplier : mailRunss) {
            mailRuns = supplier.get();
            if (!bool.test(mailRuns)) {
                this.mailRuns = mailRuns;
                return;
            }
        }
    }

    @Transient
    public void setMailRunsIf(UnaryOperator<String> mailRuns) {
        this.mailRuns = mailRuns.apply(this.mailRuns);
    }


    /**
     * Getter for <code>win_mail_sender.mail_conf</code>.
     */
    @Override
    public String getMailConf() {
        return this.mailConf;
    }

    /**
     * Setter for <code>win_mail_sender.mail_conf</code>.
     */
    @Override
    public void setMailConf(String mailConf) {
        this.mailConf = mailConf;
    }

    @Transient
    public void setMailConfIf(String mailConf, boolean bool) {
        if (bool) {
            this.mailConf = mailConf;
        }
    }

    @Transient
    public void setMailConfIf(Supplier<String> mailConf, boolean bool) {
        if (bool) {
            this.mailConf = mailConf.get();
        }
    }

    @Transient
    public void setMailConfIf(String mailConf, Predicate<String> bool) {
        if (bool.test(mailConf)) {
            this.mailConf = mailConf;
        }
    }

    @Transient
    public void setMailConfIf(String mailConf, Predicate<String> bool, Supplier<String>... mailConfs) {
        if (bool.test(mailConf)) {
            this.mailConf = mailConf;
            return;
        }
        for (Supplier<String> supplier : mailConfs) {
            mailConf = supplier.get();
            if (bool.test(mailConf)) {
                this.mailConf = mailConf;
                return;
            }
        }
    }

    @Transient
    public void setMailConfIfNot(String mailConf, Predicate<String> bool) {
        if (!bool.test(mailConf)) {
            this.mailConf = mailConf;
        }
    }

    @Transient
    public void setMailConfIfNot(String mailConf, Predicate<String> bool, Supplier<String>... mailConfs) {
        if (!bool.test(mailConf)) {
            this.mailConf = mailConf;
            return;
        }
        for (Supplier<String> supplier : mailConfs) {
            mailConf = supplier.get();
            if (!bool.test(mailConf)) {
                this.mailConf = mailConf;
                return;
            }
        }
    }

    @Transient
    public void setMailConfIf(UnaryOperator<String> mailConf) {
        this.mailConf = mailConf.apply(this.mailConf);
    }


    /**
     * Getter for <code>win_mail_sender.mail_from</code>.
     */
    @Override
    public String getMailFrom() {
        return this.mailFrom;
    }

    /**
     * Setter for <code>win_mail_sender.mail_from</code>.
     */
    @Override
    public void setMailFrom(String mailFrom) {
        this.mailFrom = mailFrom;
    }

    @Transient
    public void setMailFromIf(String mailFrom, boolean bool) {
        if (bool) {
            this.mailFrom = mailFrom;
        }
    }

    @Transient
    public void setMailFromIf(Supplier<String> mailFrom, boolean bool) {
        if (bool) {
            this.mailFrom = mailFrom.get();
        }
    }

    @Transient
    public void setMailFromIf(String mailFrom, Predicate<String> bool) {
        if (bool.test(mailFrom)) {
            this.mailFrom = mailFrom;
        }
    }

    @Transient
    public void setMailFromIf(String mailFrom, Predicate<String> bool, Supplier<String>... mailFroms) {
        if (bool.test(mailFrom)) {
            this.mailFrom = mailFrom;
            return;
        }
        for (Supplier<String> supplier : mailFroms) {
            mailFrom = supplier.get();
            if (bool.test(mailFrom)) {
                this.mailFrom = mailFrom;
                return;
            }
        }
    }

    @Transient
    public void setMailFromIfNot(String mailFrom, Predicate<String> bool) {
        if (!bool.test(mailFrom)) {
            this.mailFrom = mailFrom;
        }
    }

    @Transient
    public void setMailFromIfNot(String mailFrom, Predicate<String> bool, Supplier<String>... mailFroms) {
        if (!bool.test(mailFrom)) {
            this.mailFrom = mailFrom;
            return;
        }
        for (Supplier<String> supplier : mailFroms) {
            mailFrom = supplier.get();
            if (!bool.test(mailFrom)) {
                this.mailFrom = mailFrom;
                return;
            }
        }
    }

    @Transient
    public void setMailFromIf(UnaryOperator<String> mailFrom) {
        this.mailFrom = mailFrom.apply(this.mailFrom);
    }


    /**
     * Getter for <code>win_mail_sender.mail_to</code>.
     */
    @Override
    public String getMailTo() {
        return this.mailTo;
    }

    /**
     * Setter for <code>win_mail_sender.mail_to</code>.
     */
    @Override
    public void setMailTo(String mailTo) {
        this.mailTo = mailTo;
    }

    @Transient
    public void setMailToIf(String mailTo, boolean bool) {
        if (bool) {
            this.mailTo = mailTo;
        }
    }

    @Transient
    public void setMailToIf(Supplier<String> mailTo, boolean bool) {
        if (bool) {
            this.mailTo = mailTo.get();
        }
    }

    @Transient
    public void setMailToIf(String mailTo, Predicate<String> bool) {
        if (bool.test(mailTo)) {
            this.mailTo = mailTo;
        }
    }

    @Transient
    public void setMailToIf(String mailTo, Predicate<String> bool, Supplier<String>... mailTos) {
        if (bool.test(mailTo)) {
            this.mailTo = mailTo;
            return;
        }
        for (Supplier<String> supplier : mailTos) {
            mailTo = supplier.get();
            if (bool.test(mailTo)) {
                this.mailTo = mailTo;
                return;
            }
        }
    }

    @Transient
    public void setMailToIfNot(String mailTo, Predicate<String> bool) {
        if (!bool.test(mailTo)) {
            this.mailTo = mailTo;
        }
    }

    @Transient
    public void setMailToIfNot(String mailTo, Predicate<String> bool, Supplier<String>... mailTos) {
        if (!bool.test(mailTo)) {
            this.mailTo = mailTo;
            return;
        }
        for (Supplier<String> supplier : mailTos) {
            mailTo = supplier.get();
            if (!bool.test(mailTo)) {
                this.mailTo = mailTo;
                return;
            }
        }
    }

    @Transient
    public void setMailToIf(UnaryOperator<String> mailTo) {
        this.mailTo = mailTo.apply(this.mailTo);
    }


    /**
     * Getter for <code>win_mail_sender.mail_cc</code>.
     */
    @Override
    public String getMailCc() {
        return this.mailCc;
    }

    /**
     * Setter for <code>win_mail_sender.mail_cc</code>.
     */
    @Override
    public void setMailCc(String mailCc) {
        this.mailCc = mailCc;
    }

    @Transient
    public void setMailCcIf(String mailCc, boolean bool) {
        if (bool) {
            this.mailCc = mailCc;
        }
    }

    @Transient
    public void setMailCcIf(Supplier<String> mailCc, boolean bool) {
        if (bool) {
            this.mailCc = mailCc.get();
        }
    }

    @Transient
    public void setMailCcIf(String mailCc, Predicate<String> bool) {
        if (bool.test(mailCc)) {
            this.mailCc = mailCc;
        }
    }

    @Transient
    public void setMailCcIf(String mailCc, Predicate<String> bool, Supplier<String>... mailCcs) {
        if (bool.test(mailCc)) {
            this.mailCc = mailCc;
            return;
        }
        for (Supplier<String> supplier : mailCcs) {
            mailCc = supplier.get();
            if (bool.test(mailCc)) {
                this.mailCc = mailCc;
                return;
            }
        }
    }

    @Transient
    public void setMailCcIfNot(String mailCc, Predicate<String> bool) {
        if (!bool.test(mailCc)) {
            this.mailCc = mailCc;
        }
    }

    @Transient
    public void setMailCcIfNot(String mailCc, Predicate<String> bool, Supplier<String>... mailCcs) {
        if (!bool.test(mailCc)) {
            this.mailCc = mailCc;
            return;
        }
        for (Supplier<String> supplier : mailCcs) {
            mailCc = supplier.get();
            if (!bool.test(mailCc)) {
                this.mailCc = mailCc;
                return;
            }
        }
    }

    @Transient
    public void setMailCcIf(UnaryOperator<String> mailCc) {
        this.mailCc = mailCc.apply(this.mailCc);
    }


    /**
     * Getter for <code>win_mail_sender.mail_bcc</code>.
     */
    @Override
    public String getMailBcc() {
        return this.mailBcc;
    }

    /**
     * Setter for <code>win_mail_sender.mail_bcc</code>.
     */
    @Override
    public void setMailBcc(String mailBcc) {
        this.mailBcc = mailBcc;
    }

    @Transient
    public void setMailBccIf(String mailBcc, boolean bool) {
        if (bool) {
            this.mailBcc = mailBcc;
        }
    }

    @Transient
    public void setMailBccIf(Supplier<String> mailBcc, boolean bool) {
        if (bool) {
            this.mailBcc = mailBcc.get();
        }
    }

    @Transient
    public void setMailBccIf(String mailBcc, Predicate<String> bool) {
        if (bool.test(mailBcc)) {
            this.mailBcc = mailBcc;
        }
    }

    @Transient
    public void setMailBccIf(String mailBcc, Predicate<String> bool, Supplier<String>... mailBccs) {
        if (bool.test(mailBcc)) {
            this.mailBcc = mailBcc;
            return;
        }
        for (Supplier<String> supplier : mailBccs) {
            mailBcc = supplier.get();
            if (bool.test(mailBcc)) {
                this.mailBcc = mailBcc;
                return;
            }
        }
    }

    @Transient
    public void setMailBccIfNot(String mailBcc, Predicate<String> bool) {
        if (!bool.test(mailBcc)) {
            this.mailBcc = mailBcc;
        }
    }

    @Transient
    public void setMailBccIfNot(String mailBcc, Predicate<String> bool, Supplier<String>... mailBccs) {
        if (!bool.test(mailBcc)) {
            this.mailBcc = mailBcc;
            return;
        }
        for (Supplier<String> supplier : mailBccs) {
            mailBcc = supplier.get();
            if (!bool.test(mailBcc)) {
                this.mailBcc = mailBcc;
                return;
            }
        }
    }

    @Transient
    public void setMailBccIf(UnaryOperator<String> mailBcc) {
        this.mailBcc = mailBcc.apply(this.mailBcc);
    }


    /**
     * Getter for <code>win_mail_sender.mail_reply</code>.
     */
    @Override
    public String getMailReply() {
        return this.mailReply;
    }

    /**
     * Setter for <code>win_mail_sender.mail_reply</code>.
     */
    @Override
    public void setMailReply(String mailReply) {
        this.mailReply = mailReply;
    }

    @Transient
    public void setMailReplyIf(String mailReply, boolean bool) {
        if (bool) {
            this.mailReply = mailReply;
        }
    }

    @Transient
    public void setMailReplyIf(Supplier<String> mailReply, boolean bool) {
        if (bool) {
            this.mailReply = mailReply.get();
        }
    }

    @Transient
    public void setMailReplyIf(String mailReply, Predicate<String> bool) {
        if (bool.test(mailReply)) {
            this.mailReply = mailReply;
        }
    }

    @Transient
    public void setMailReplyIf(String mailReply, Predicate<String> bool, Supplier<String>... mailReplys) {
        if (bool.test(mailReply)) {
            this.mailReply = mailReply;
            return;
        }
        for (Supplier<String> supplier : mailReplys) {
            mailReply = supplier.get();
            if (bool.test(mailReply)) {
                this.mailReply = mailReply;
                return;
            }
        }
    }

    @Transient
    public void setMailReplyIfNot(String mailReply, Predicate<String> bool) {
        if (!bool.test(mailReply)) {
            this.mailReply = mailReply;
        }
    }

    @Transient
    public void setMailReplyIfNot(String mailReply, Predicate<String> bool, Supplier<String>... mailReplys) {
        if (!bool.test(mailReply)) {
            this.mailReply = mailReply;
            return;
        }
        for (Supplier<String> supplier : mailReplys) {
            mailReply = supplier.get();
            if (!bool.test(mailReply)) {
                this.mailReply = mailReply;
                return;
            }
        }
    }

    @Transient
    public void setMailReplyIf(UnaryOperator<String> mailReply) {
        this.mailReply = mailReply.apply(this.mailReply);
    }


    /**
     * Getter for <code>win_mail_sender.mail_subj</code>.
     */
    @Override
    public String getMailSubj() {
        return this.mailSubj;
    }

    /**
     * Setter for <code>win_mail_sender.mail_subj</code>.
     */
    @Override
    public void setMailSubj(String mailSubj) {
        this.mailSubj = mailSubj;
    }

    @Transient
    public void setMailSubjIf(String mailSubj, boolean bool) {
        if (bool) {
            this.mailSubj = mailSubj;
        }
    }

    @Transient
    public void setMailSubjIf(Supplier<String> mailSubj, boolean bool) {
        if (bool) {
            this.mailSubj = mailSubj.get();
        }
    }

    @Transient
    public void setMailSubjIf(String mailSubj, Predicate<String> bool) {
        if (bool.test(mailSubj)) {
            this.mailSubj = mailSubj;
        }
    }

    @Transient
    public void setMailSubjIf(String mailSubj, Predicate<String> bool, Supplier<String>... mailSubjs) {
        if (bool.test(mailSubj)) {
            this.mailSubj = mailSubj;
            return;
        }
        for (Supplier<String> supplier : mailSubjs) {
            mailSubj = supplier.get();
            if (bool.test(mailSubj)) {
                this.mailSubj = mailSubj;
                return;
            }
        }
    }

    @Transient
    public void setMailSubjIfNot(String mailSubj, Predicate<String> bool) {
        if (!bool.test(mailSubj)) {
            this.mailSubj = mailSubj;
        }
    }

    @Transient
    public void setMailSubjIfNot(String mailSubj, Predicate<String> bool, Supplier<String>... mailSubjs) {
        if (!bool.test(mailSubj)) {
            this.mailSubj = mailSubj;
            return;
        }
        for (Supplier<String> supplier : mailSubjs) {
            mailSubj = supplier.get();
            if (!bool.test(mailSubj)) {
                this.mailSubj = mailSubj;
                return;
            }
        }
    }

    @Transient
    public void setMailSubjIf(UnaryOperator<String> mailSubj) {
        this.mailSubj = mailSubj.apply(this.mailSubj);
    }


    /**
     * Getter for <code>win_mail_sender.mail_text</code>.
     */
    @Override
    public String getMailText() {
        return this.mailText;
    }

    /**
     * Setter for <code>win_mail_sender.mail_text</code>.
     */
    @Override
    public void setMailText(String mailText) {
        this.mailText = mailText;
    }

    @Transient
    public void setMailTextIf(String mailText, boolean bool) {
        if (bool) {
            this.mailText = mailText;
        }
    }

    @Transient
    public void setMailTextIf(Supplier<String> mailText, boolean bool) {
        if (bool) {
            this.mailText = mailText.get();
        }
    }

    @Transient
    public void setMailTextIf(String mailText, Predicate<String> bool) {
        if (bool.test(mailText)) {
            this.mailText = mailText;
        }
    }

    @Transient
    public void setMailTextIf(String mailText, Predicate<String> bool, Supplier<String>... mailTexts) {
        if (bool.test(mailText)) {
            this.mailText = mailText;
            return;
        }
        for (Supplier<String> supplier : mailTexts) {
            mailText = supplier.get();
            if (bool.test(mailText)) {
                this.mailText = mailText;
                return;
            }
        }
    }

    @Transient
    public void setMailTextIfNot(String mailText, Predicate<String> bool) {
        if (!bool.test(mailText)) {
            this.mailText = mailText;
        }
    }

    @Transient
    public void setMailTextIfNot(String mailText, Predicate<String> bool, Supplier<String>... mailTexts) {
        if (!bool.test(mailText)) {
            this.mailText = mailText;
            return;
        }
        for (Supplier<String> supplier : mailTexts) {
            mailText = supplier.get();
            if (!bool.test(mailText)) {
                this.mailText = mailText;
                return;
            }
        }
    }

    @Transient
    public void setMailTextIf(UnaryOperator<String> mailText) {
        this.mailText = mailText.apply(this.mailText);
    }


    /**
     * Getter for <code>win_mail_sender.mail_html</code>.
     */
    @Override
    public Boolean getMailHtml() {
        return this.mailHtml;
    }

    /**
     * Setter for <code>win_mail_sender.mail_html</code>.
     */
    @Override
    public void setMailHtml(Boolean mailHtml) {
        this.mailHtml = mailHtml;
    }

    @Transient
    public void setMailHtmlIf(Boolean mailHtml, boolean bool) {
        if (bool) {
            this.mailHtml = mailHtml;
        }
    }

    @Transient
    public void setMailHtmlIf(Supplier<Boolean> mailHtml, boolean bool) {
        if (bool) {
            this.mailHtml = mailHtml.get();
        }
    }

    @Transient
    public void setMailHtmlIf(Boolean mailHtml, Predicate<Boolean> bool) {
        if (bool.test(mailHtml)) {
            this.mailHtml = mailHtml;
        }
    }

    @Transient
    public void setMailHtmlIf(Boolean mailHtml, Predicate<Boolean> bool, Supplier<Boolean>... mailHtmls) {
        if (bool.test(mailHtml)) {
            this.mailHtml = mailHtml;
            return;
        }
        for (Supplier<Boolean> supplier : mailHtmls) {
            mailHtml = supplier.get();
            if (bool.test(mailHtml)) {
                this.mailHtml = mailHtml;
                return;
            }
        }
    }

    @Transient
    public void setMailHtmlIfNot(Boolean mailHtml, Predicate<Boolean> bool) {
        if (!bool.test(mailHtml)) {
            this.mailHtml = mailHtml;
        }
    }

    @Transient
    public void setMailHtmlIfNot(Boolean mailHtml, Predicate<Boolean> bool, Supplier<Boolean>... mailHtmls) {
        if (!bool.test(mailHtml)) {
            this.mailHtml = mailHtml;
            return;
        }
        for (Supplier<Boolean> supplier : mailHtmls) {
            mailHtml = supplier.get();
            if (!bool.test(mailHtml)) {
                this.mailHtml = mailHtml;
                return;
            }
        }
    }

    @Transient
    public void setMailHtmlIf(UnaryOperator<Boolean> mailHtml) {
        this.mailHtml = mailHtml.apply(this.mailHtml);
    }


    /**
     * Getter for <code>win_mail_sender.mail_file</code>.
     */
    @Override
    public String getMailFile() {
        return this.mailFile;
    }

    /**
     * Setter for <code>win_mail_sender.mail_file</code>.
     */
    @Override
    public void setMailFile(String mailFile) {
        this.mailFile = mailFile;
    }

    @Transient
    public void setMailFileIf(String mailFile, boolean bool) {
        if (bool) {
            this.mailFile = mailFile;
        }
    }

    @Transient
    public void setMailFileIf(Supplier<String> mailFile, boolean bool) {
        if (bool) {
            this.mailFile = mailFile.get();
        }
    }

    @Transient
    public void setMailFileIf(String mailFile, Predicate<String> bool) {
        if (bool.test(mailFile)) {
            this.mailFile = mailFile;
        }
    }

    @Transient
    public void setMailFileIf(String mailFile, Predicate<String> bool, Supplier<String>... mailFiles) {
        if (bool.test(mailFile)) {
            this.mailFile = mailFile;
            return;
        }
        for (Supplier<String> supplier : mailFiles) {
            mailFile = supplier.get();
            if (bool.test(mailFile)) {
                this.mailFile = mailFile;
                return;
            }
        }
    }

    @Transient
    public void setMailFileIfNot(String mailFile, Predicate<String> bool) {
        if (!bool.test(mailFile)) {
            this.mailFile = mailFile;
        }
    }

    @Transient
    public void setMailFileIfNot(String mailFile, Predicate<String> bool, Supplier<String>... mailFiles) {
        if (!bool.test(mailFile)) {
            this.mailFile = mailFile;
            return;
        }
        for (Supplier<String> supplier : mailFiles) {
            mailFile = supplier.get();
            if (!bool.test(mailFile)) {
                this.mailFile = mailFile;
                return;
            }
        }
    }

    @Transient
    public void setMailFileIf(UnaryOperator<String> mailFile) {
        this.mailFile = mailFile.apply(this.mailFile);
    }


    /**
     * Getter for <code>win_mail_sender.mail_mark</code>.
     */
    @Override
    public String getMailMark() {
        return this.mailMark;
    }

    /**
     * Setter for <code>win_mail_sender.mail_mark</code>.
     */
    @Override
    public void setMailMark(String mailMark) {
        this.mailMark = mailMark;
    }

    @Transient
    public void setMailMarkIf(String mailMark, boolean bool) {
        if (bool) {
            this.mailMark = mailMark;
        }
    }

    @Transient
    public void setMailMarkIf(Supplier<String> mailMark, boolean bool) {
        if (bool) {
            this.mailMark = mailMark.get();
        }
    }

    @Transient
    public void setMailMarkIf(String mailMark, Predicate<String> bool) {
        if (bool.test(mailMark)) {
            this.mailMark = mailMark;
        }
    }

    @Transient
    public void setMailMarkIf(String mailMark, Predicate<String> bool, Supplier<String>... mailMarks) {
        if (bool.test(mailMark)) {
            this.mailMark = mailMark;
            return;
        }
        for (Supplier<String> supplier : mailMarks) {
            mailMark = supplier.get();
            if (bool.test(mailMark)) {
                this.mailMark = mailMark;
                return;
            }
        }
    }

    @Transient
    public void setMailMarkIfNot(String mailMark, Predicate<String> bool) {
        if (!bool.test(mailMark)) {
            this.mailMark = mailMark;
        }
    }

    @Transient
    public void setMailMarkIfNot(String mailMark, Predicate<String> bool, Supplier<String>... mailMarks) {
        if (!bool.test(mailMark)) {
            this.mailMark = mailMark;
            return;
        }
        for (Supplier<String> supplier : mailMarks) {
            mailMark = supplier.get();
            if (!bool.test(mailMark)) {
                this.mailMark = mailMark;
                return;
            }
        }
    }

    @Transient
    public void setMailMarkIf(UnaryOperator<String> mailMark) {
        this.mailMark = mailMark.apply(this.mailMark);
    }


    /**
     * Getter for <code>win_mail_sender.mail_date</code>.
     */
    @Override
    public LocalDateTime getMailDate() {
        return this.mailDate;
    }

    /**
     * Setter for <code>win_mail_sender.mail_date</code>.
     */
    @Override
    public void setMailDate(LocalDateTime mailDate) {
        this.mailDate = mailDate;
    }

    @Transient
    public void setMailDateIf(LocalDateTime mailDate, boolean bool) {
        if (bool) {
            this.mailDate = mailDate;
        }
    }

    @Transient
    public void setMailDateIf(Supplier<LocalDateTime> mailDate, boolean bool) {
        if (bool) {
            this.mailDate = mailDate.get();
        }
    }

    @Transient
    public void setMailDateIf(LocalDateTime mailDate, Predicate<LocalDateTime> bool) {
        if (bool.test(mailDate)) {
            this.mailDate = mailDate;
        }
    }

    @Transient
    public void setMailDateIf(LocalDateTime mailDate, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... mailDates) {
        if (bool.test(mailDate)) {
            this.mailDate = mailDate;
            return;
        }
        for (Supplier<LocalDateTime> supplier : mailDates) {
            mailDate = supplier.get();
            if (bool.test(mailDate)) {
                this.mailDate = mailDate;
                return;
            }
        }
    }

    @Transient
    public void setMailDateIfNot(LocalDateTime mailDate, Predicate<LocalDateTime> bool) {
        if (!bool.test(mailDate)) {
            this.mailDate = mailDate;
        }
    }

    @Transient
    public void setMailDateIfNot(LocalDateTime mailDate, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... mailDates) {
        if (!bool.test(mailDate)) {
            this.mailDate = mailDate;
            return;
        }
        for (Supplier<LocalDateTime> supplier : mailDates) {
            mailDate = supplier.get();
            if (!bool.test(mailDate)) {
                this.mailDate = mailDate;
                return;
            }
        }
    }

    @Transient
    public void setMailDateIf(UnaryOperator<LocalDateTime> mailDate) {
        this.mailDate = mailDate.apply(this.mailDate);
    }


    /**
     * Getter for <code>win_mail_sender.last_send</code>.
     */
    @Override
    public LocalDateTime getLastSend() {
        return this.lastSend;
    }

    /**
     * Setter for <code>win_mail_sender.last_send</code>.
     */
    @Override
    public void setLastSend(LocalDateTime lastSend) {
        this.lastSend = lastSend;
    }

    @Transient
    public void setLastSendIf(LocalDateTime lastSend, boolean bool) {
        if (bool) {
            this.lastSend = lastSend;
        }
    }

    @Transient
    public void setLastSendIf(Supplier<LocalDateTime> lastSend, boolean bool) {
        if (bool) {
            this.lastSend = lastSend.get();
        }
    }

    @Transient
    public void setLastSendIf(LocalDateTime lastSend, Predicate<LocalDateTime> bool) {
        if (bool.test(lastSend)) {
            this.lastSend = lastSend;
        }
    }

    @Transient
    public void setLastSendIf(LocalDateTime lastSend, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastSends) {
        if (bool.test(lastSend)) {
            this.lastSend = lastSend;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastSends) {
            lastSend = supplier.get();
            if (bool.test(lastSend)) {
                this.lastSend = lastSend;
                return;
            }
        }
    }

    @Transient
    public void setLastSendIfNot(LocalDateTime lastSend, Predicate<LocalDateTime> bool) {
        if (!bool.test(lastSend)) {
            this.lastSend = lastSend;
        }
    }

    @Transient
    public void setLastSendIfNot(LocalDateTime lastSend, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastSends) {
        if (!bool.test(lastSend)) {
            this.lastSend = lastSend;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastSends) {
            lastSend = supplier.get();
            if (!bool.test(lastSend)) {
                this.lastSend = lastSend;
                return;
            }
        }
    }

    @Transient
    public void setLastSendIf(UnaryOperator<LocalDateTime> lastSend) {
        this.lastSend = lastSend.apply(this.lastSend);
    }


    /**
     * Getter for <code>win_mail_sender.last_fail</code>.
     */
    @Override
    public String getLastFail() {
        return this.lastFail;
    }

    /**
     * Setter for <code>win_mail_sender.last_fail</code>.
     */
    @Override
    public void setLastFail(String lastFail) {
        this.lastFail = lastFail;
    }

    @Transient
    public void setLastFailIf(String lastFail, boolean bool) {
        if (bool) {
            this.lastFail = lastFail;
        }
    }

    @Transient
    public void setLastFailIf(Supplier<String> lastFail, boolean bool) {
        if (bool) {
            this.lastFail = lastFail.get();
        }
    }

    @Transient
    public void setLastFailIf(String lastFail, Predicate<String> bool) {
        if (bool.test(lastFail)) {
            this.lastFail = lastFail;
        }
    }

    @Transient
    public void setLastFailIf(String lastFail, Predicate<String> bool, Supplier<String>... lastFails) {
        if (bool.test(lastFail)) {
            this.lastFail = lastFail;
            return;
        }
        for (Supplier<String> supplier : lastFails) {
            lastFail = supplier.get();
            if (bool.test(lastFail)) {
                this.lastFail = lastFail;
                return;
            }
        }
    }

    @Transient
    public void setLastFailIfNot(String lastFail, Predicate<String> bool) {
        if (!bool.test(lastFail)) {
            this.lastFail = lastFail;
        }
    }

    @Transient
    public void setLastFailIfNot(String lastFail, Predicate<String> bool, Supplier<String>... lastFails) {
        if (!bool.test(lastFail)) {
            this.lastFail = lastFail;
            return;
        }
        for (Supplier<String> supplier : lastFails) {
            lastFail = supplier.get();
            if (!bool.test(lastFail)) {
                this.lastFail = lastFail;
                return;
            }
        }
    }

    @Transient
    public void setLastFailIf(UnaryOperator<String> lastFail) {
        this.lastFail = lastFail.apply(this.lastFail);
    }


    /**
     * Getter for <code>win_mail_sender.last_done</code>.
     */
    @Override
    public LocalDateTime getLastDone() {
        return this.lastDone;
    }

    /**
     * Setter for <code>win_mail_sender.last_done</code>.
     */
    @Override
    public void setLastDone(LocalDateTime lastDone) {
        this.lastDone = lastDone;
    }

    @Transient
    public void setLastDoneIf(LocalDateTime lastDone, boolean bool) {
        if (bool) {
            this.lastDone = lastDone;
        }
    }

    @Transient
    public void setLastDoneIf(Supplier<LocalDateTime> lastDone, boolean bool) {
        if (bool) {
            this.lastDone = lastDone.get();
        }
    }

    @Transient
    public void setLastDoneIf(LocalDateTime lastDone, Predicate<LocalDateTime> bool) {
        if (bool.test(lastDone)) {
            this.lastDone = lastDone;
        }
    }

    @Transient
    public void setLastDoneIf(LocalDateTime lastDone, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastDones) {
        if (bool.test(lastDone)) {
            this.lastDone = lastDone;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastDones) {
            lastDone = supplier.get();
            if (bool.test(lastDone)) {
                this.lastDone = lastDone;
                return;
            }
        }
    }

    @Transient
    public void setLastDoneIfNot(LocalDateTime lastDone, Predicate<LocalDateTime> bool) {
        if (!bool.test(lastDone)) {
            this.lastDone = lastDone;
        }
    }

    @Transient
    public void setLastDoneIfNot(LocalDateTime lastDone, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... lastDones) {
        if (!bool.test(lastDone)) {
            this.lastDone = lastDone;
            return;
        }
        for (Supplier<LocalDateTime> supplier : lastDones) {
            lastDone = supplier.get();
            if (!bool.test(lastDone)) {
                this.lastDone = lastDone;
                return;
            }
        }
    }

    @Transient
    public void setLastDoneIf(UnaryOperator<LocalDateTime> lastDone) {
        this.lastDone = lastDone.apply(this.lastDone);
    }


    /**
     * Getter for <code>win_mail_sender.last_cost</code>.
     */
    @Override
    public Integer getLastCost() {
        return this.lastCost;
    }

    /**
     * Setter for <code>win_mail_sender.last_cost</code>.
     */
    @Override
    public void setLastCost(Integer lastCost) {
        this.lastCost = lastCost;
    }

    @Transient
    public void setLastCostIf(Integer lastCost, boolean bool) {
        if (bool) {
            this.lastCost = lastCost;
        }
    }

    @Transient
    public void setLastCostIf(Supplier<Integer> lastCost, boolean bool) {
        if (bool) {
            this.lastCost = lastCost.get();
        }
    }

    @Transient
    public void setLastCostIf(Integer lastCost, Predicate<Integer> bool) {
        if (bool.test(lastCost)) {
            this.lastCost = lastCost;
        }
    }

    @Transient
    public void setLastCostIf(Integer lastCost, Predicate<Integer> bool, Supplier<Integer>... lastCosts) {
        if (bool.test(lastCost)) {
            this.lastCost = lastCost;
            return;
        }
        for (Supplier<Integer> supplier : lastCosts) {
            lastCost = supplier.get();
            if (bool.test(lastCost)) {
                this.lastCost = lastCost;
                return;
            }
        }
    }

    @Transient
    public void setLastCostIfNot(Integer lastCost, Predicate<Integer> bool) {
        if (!bool.test(lastCost)) {
            this.lastCost = lastCost;
        }
    }

    @Transient
    public void setLastCostIfNot(Integer lastCost, Predicate<Integer> bool, Supplier<Integer>... lastCosts) {
        if (!bool.test(lastCost)) {
            this.lastCost = lastCost;
            return;
        }
        for (Supplier<Integer> supplier : lastCosts) {
            lastCost = supplier.get();
            if (!bool.test(lastCost)) {
                this.lastCost = lastCost;
                return;
            }
        }
    }

    @Transient
    public void setLastCostIf(UnaryOperator<Integer> lastCost) {
        this.lastCost = lastCost.apply(this.lastCost);
    }


    /**
     * Getter for <code>win_mail_sender.next_send</code>.
     */
    @Override
    public LocalDateTime getNextSend() {
        return this.nextSend;
    }

    /**
     * Setter for <code>win_mail_sender.next_send</code>.
     */
    @Override
    public void setNextSend(LocalDateTime nextSend) {
        this.nextSend = nextSend;
    }

    @Transient
    public void setNextSendIf(LocalDateTime nextSend, boolean bool) {
        if (bool) {
            this.nextSend = nextSend;
        }
    }

    @Transient
    public void setNextSendIf(Supplier<LocalDateTime> nextSend, boolean bool) {
        if (bool) {
            this.nextSend = nextSend.get();
        }
    }

    @Transient
    public void setNextSendIf(LocalDateTime nextSend, Predicate<LocalDateTime> bool) {
        if (bool.test(nextSend)) {
            this.nextSend = nextSend;
        }
    }

    @Transient
    public void setNextSendIf(LocalDateTime nextSend, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... nextSends) {
        if (bool.test(nextSend)) {
            this.nextSend = nextSend;
            return;
        }
        for (Supplier<LocalDateTime> supplier : nextSends) {
            nextSend = supplier.get();
            if (bool.test(nextSend)) {
                this.nextSend = nextSend;
                return;
            }
        }
    }

    @Transient
    public void setNextSendIfNot(LocalDateTime nextSend, Predicate<LocalDateTime> bool) {
        if (!bool.test(nextSend)) {
            this.nextSend = nextSend;
        }
    }

    @Transient
    public void setNextSendIfNot(LocalDateTime nextSend, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... nextSends) {
        if (!bool.test(nextSend)) {
            this.nextSend = nextSend;
            return;
        }
        for (Supplier<LocalDateTime> supplier : nextSends) {
            nextSend = supplier.get();
            if (!bool.test(nextSend)) {
                this.nextSend = nextSend;
                return;
            }
        }
    }

    @Transient
    public void setNextSendIf(UnaryOperator<LocalDateTime> nextSend) {
        this.nextSend = nextSend.apply(this.nextSend);
    }


    /**
     * Getter for <code>win_mail_sender.next_lock</code>.
     */
    @Override
    public Integer getNextLock() {
        return this.nextLock;
    }

    /**
     * Setter for <code>win_mail_sender.next_lock</code>.
     */
    @Override
    public void setNextLock(Integer nextLock) {
        this.nextLock = nextLock;
    }

    @Transient
    public void setNextLockIf(Integer nextLock, boolean bool) {
        if (bool) {
            this.nextLock = nextLock;
        }
    }

    @Transient
    public void setNextLockIf(Supplier<Integer> nextLock, boolean bool) {
        if (bool) {
            this.nextLock = nextLock.get();
        }
    }

    @Transient
    public void setNextLockIf(Integer nextLock, Predicate<Integer> bool) {
        if (bool.test(nextLock)) {
            this.nextLock = nextLock;
        }
    }

    @Transient
    public void setNextLockIf(Integer nextLock, Predicate<Integer> bool, Supplier<Integer>... nextLocks) {
        if (bool.test(nextLock)) {
            this.nextLock = nextLock;
            return;
        }
        for (Supplier<Integer> supplier : nextLocks) {
            nextLock = supplier.get();
            if (bool.test(nextLock)) {
                this.nextLock = nextLock;
                return;
            }
        }
    }

    @Transient
    public void setNextLockIfNot(Integer nextLock, Predicate<Integer> bool) {
        if (!bool.test(nextLock)) {
            this.nextLock = nextLock;
        }
    }

    @Transient
    public void setNextLockIfNot(Integer nextLock, Predicate<Integer> bool, Supplier<Integer>... nextLocks) {
        if (!bool.test(nextLock)) {
            this.nextLock = nextLock;
            return;
        }
        for (Supplier<Integer> supplier : nextLocks) {
            nextLock = supplier.get();
            if (!bool.test(nextLock)) {
                this.nextLock = nextLock;
                return;
            }
        }
    }

    @Transient
    public void setNextLockIf(UnaryOperator<Integer> nextLock) {
        this.nextLock = nextLock.apply(this.nextLock);
    }


    /**
     * Getter for <code>win_mail_sender.sum_send</code>.
     */
    @Override
    public Integer getSumSend() {
        return this.sumSend;
    }

    /**
     * Setter for <code>win_mail_sender.sum_send</code>.
     */
    @Override
    public void setSumSend(Integer sumSend) {
        this.sumSend = sumSend;
    }

    @Transient
    public void setSumSendIf(Integer sumSend, boolean bool) {
        if (bool) {
            this.sumSend = sumSend;
        }
    }

    @Transient
    public void setSumSendIf(Supplier<Integer> sumSend, boolean bool) {
        if (bool) {
            this.sumSend = sumSend.get();
        }
    }

    @Transient
    public void setSumSendIf(Integer sumSend, Predicate<Integer> bool) {
        if (bool.test(sumSend)) {
            this.sumSend = sumSend;
        }
    }

    @Transient
    public void setSumSendIf(Integer sumSend, Predicate<Integer> bool, Supplier<Integer>... sumSends) {
        if (bool.test(sumSend)) {
            this.sumSend = sumSend;
            return;
        }
        for (Supplier<Integer> supplier : sumSends) {
            sumSend = supplier.get();
            if (bool.test(sumSend)) {
                this.sumSend = sumSend;
                return;
            }
        }
    }

    @Transient
    public void setSumSendIfNot(Integer sumSend, Predicate<Integer> bool) {
        if (!bool.test(sumSend)) {
            this.sumSend = sumSend;
        }
    }

    @Transient
    public void setSumSendIfNot(Integer sumSend, Predicate<Integer> bool, Supplier<Integer>... sumSends) {
        if (!bool.test(sumSend)) {
            this.sumSend = sumSend;
            return;
        }
        for (Supplier<Integer> supplier : sumSends) {
            sumSend = supplier.get();
            if (!bool.test(sumSend)) {
                this.sumSend = sumSend;
                return;
            }
        }
    }

    @Transient
    public void setSumSendIf(UnaryOperator<Integer> sumSend) {
        this.sumSend = sumSend.apply(this.sumSend);
    }


    /**
     * Getter for <code>win_mail_sender.sum_fail</code>.
     */
    @Override
    public Integer getSumFail() {
        return this.sumFail;
    }

    /**
     * Setter for <code>win_mail_sender.sum_fail</code>.
     */
    @Override
    public void setSumFail(Integer sumFail) {
        this.sumFail = sumFail;
    }

    @Transient
    public void setSumFailIf(Integer sumFail, boolean bool) {
        if (bool) {
            this.sumFail = sumFail;
        }
    }

    @Transient
    public void setSumFailIf(Supplier<Integer> sumFail, boolean bool) {
        if (bool) {
            this.sumFail = sumFail.get();
        }
    }

    @Transient
    public void setSumFailIf(Integer sumFail, Predicate<Integer> bool) {
        if (bool.test(sumFail)) {
            this.sumFail = sumFail;
        }
    }

    @Transient
    public void setSumFailIf(Integer sumFail, Predicate<Integer> bool, Supplier<Integer>... sumFails) {
        if (bool.test(sumFail)) {
            this.sumFail = sumFail;
            return;
        }
        for (Supplier<Integer> supplier : sumFails) {
            sumFail = supplier.get();
            if (bool.test(sumFail)) {
                this.sumFail = sumFail;
                return;
            }
        }
    }

    @Transient
    public void setSumFailIfNot(Integer sumFail, Predicate<Integer> bool) {
        if (!bool.test(sumFail)) {
            this.sumFail = sumFail;
        }
    }

    @Transient
    public void setSumFailIfNot(Integer sumFail, Predicate<Integer> bool, Supplier<Integer>... sumFails) {
        if (!bool.test(sumFail)) {
            this.sumFail = sumFail;
            return;
        }
        for (Supplier<Integer> supplier : sumFails) {
            sumFail = supplier.get();
            if (!bool.test(sumFail)) {
                this.sumFail = sumFail;
                return;
            }
        }
    }

    @Transient
    public void setSumFailIf(UnaryOperator<Integer> sumFail) {
        this.sumFail = sumFail.apply(this.sumFail);
    }


    /**
     * Getter for <code>win_mail_sender.sum_done</code>.
     */
    @Override
    public Integer getSumDone() {
        return this.sumDone;
    }

    /**
     * Setter for <code>win_mail_sender.sum_done</code>.
     */
    @Override
    public void setSumDone(Integer sumDone) {
        this.sumDone = sumDone;
    }

    @Transient
    public void setSumDoneIf(Integer sumDone, boolean bool) {
        if (bool) {
            this.sumDone = sumDone;
        }
    }

    @Transient
    public void setSumDoneIf(Supplier<Integer> sumDone, boolean bool) {
        if (bool) {
            this.sumDone = sumDone.get();
        }
    }

    @Transient
    public void setSumDoneIf(Integer sumDone, Predicate<Integer> bool) {
        if (bool.test(sumDone)) {
            this.sumDone = sumDone;
        }
    }

    @Transient
    public void setSumDoneIf(Integer sumDone, Predicate<Integer> bool, Supplier<Integer>... sumDones) {
        if (bool.test(sumDone)) {
            this.sumDone = sumDone;
            return;
        }
        for (Supplier<Integer> supplier : sumDones) {
            sumDone = supplier.get();
            if (bool.test(sumDone)) {
                this.sumDone = sumDone;
                return;
            }
        }
    }

    @Transient
    public void setSumDoneIfNot(Integer sumDone, Predicate<Integer> bool) {
        if (!bool.test(sumDone)) {
            this.sumDone = sumDone;
        }
    }

    @Transient
    public void setSumDoneIfNot(Integer sumDone, Predicate<Integer> bool, Supplier<Integer>... sumDones) {
        if (!bool.test(sumDone)) {
            this.sumDone = sumDone;
            return;
        }
        for (Supplier<Integer> supplier : sumDones) {
            sumDone = supplier.get();
            if (!bool.test(sumDone)) {
                this.sumDone = sumDone;
                return;
            }
        }
    }

    @Transient
    public void setSumDoneIf(UnaryOperator<Integer> sumDone) {
        this.sumDone = sumDone.apply(this.sumDone);
    }


    /**
     * Getter for <code>win_mail_sender.max_fail</code>.
     */
    @Override
    public Integer getMaxFail() {
        return this.maxFail;
    }

    /**
     * Setter for <code>win_mail_sender.max_fail</code>.
     */
    @Override
    public void setMaxFail(Integer maxFail) {
        this.maxFail = maxFail;
    }

    @Transient
    public void setMaxFailIf(Integer maxFail, boolean bool) {
        if (bool) {
            this.maxFail = maxFail;
        }
    }

    @Transient
    public void setMaxFailIf(Supplier<Integer> maxFail, boolean bool) {
        if (bool) {
            this.maxFail = maxFail.get();
        }
    }

    @Transient
    public void setMaxFailIf(Integer maxFail, Predicate<Integer> bool) {
        if (bool.test(maxFail)) {
            this.maxFail = maxFail;
        }
    }

    @Transient
    public void setMaxFailIf(Integer maxFail, Predicate<Integer> bool, Supplier<Integer>... maxFails) {
        if (bool.test(maxFail)) {
            this.maxFail = maxFail;
            return;
        }
        for (Supplier<Integer> supplier : maxFails) {
            maxFail = supplier.get();
            if (bool.test(maxFail)) {
                this.maxFail = maxFail;
                return;
            }
        }
    }

    @Transient
    public void setMaxFailIfNot(Integer maxFail, Predicate<Integer> bool) {
        if (!bool.test(maxFail)) {
            this.maxFail = maxFail;
        }
    }

    @Transient
    public void setMaxFailIfNot(Integer maxFail, Predicate<Integer> bool, Supplier<Integer>... maxFails) {
        if (!bool.test(maxFail)) {
            this.maxFail = maxFail;
            return;
        }
        for (Supplier<Integer> supplier : maxFails) {
            maxFail = supplier.get();
            if (!bool.test(maxFail)) {
                this.maxFail = maxFail;
                return;
            }
        }
    }

    @Transient
    public void setMaxFailIf(UnaryOperator<Integer> maxFail) {
        this.maxFail = maxFail.apply(this.maxFail);
    }


    /**
     * Getter for <code>win_mail_sender.max_done</code>.
     */
    @Override
    public Integer getMaxDone() {
        return this.maxDone;
    }

    /**
     * Setter for <code>win_mail_sender.max_done</code>.
     */
    @Override
    public void setMaxDone(Integer maxDone) {
        this.maxDone = maxDone;
    }

    @Transient
    public void setMaxDoneIf(Integer maxDone, boolean bool) {
        if (bool) {
            this.maxDone = maxDone;
        }
    }

    @Transient
    public void setMaxDoneIf(Supplier<Integer> maxDone, boolean bool) {
        if (bool) {
            this.maxDone = maxDone.get();
        }
    }

    @Transient
    public void setMaxDoneIf(Integer maxDone, Predicate<Integer> bool) {
        if (bool.test(maxDone)) {
            this.maxDone = maxDone;
        }
    }

    @Transient
    public void setMaxDoneIf(Integer maxDone, Predicate<Integer> bool, Supplier<Integer>... maxDones) {
        if (bool.test(maxDone)) {
            this.maxDone = maxDone;
            return;
        }
        for (Supplier<Integer> supplier : maxDones) {
            maxDone = supplier.get();
            if (bool.test(maxDone)) {
                this.maxDone = maxDone;
                return;
            }
        }
    }

    @Transient
    public void setMaxDoneIfNot(Integer maxDone, Predicate<Integer> bool) {
        if (!bool.test(maxDone)) {
            this.maxDone = maxDone;
        }
    }

    @Transient
    public void setMaxDoneIfNot(Integer maxDone, Predicate<Integer> bool, Supplier<Integer>... maxDones) {
        if (!bool.test(maxDone)) {
            this.maxDone = maxDone;
            return;
        }
        for (Supplier<Integer> supplier : maxDones) {
            maxDone = supplier.get();
            if (!bool.test(maxDone)) {
                this.maxDone = maxDone;
                return;
            }
        }
    }

    @Transient
    public void setMaxDoneIf(UnaryOperator<Integer> maxDone) {
        this.maxDone = maxDone.apply(this.maxDone);
    }


    /**
     * Getter for <code>win_mail_sender.ref_type</code>.
     */
    @Override
    public Integer getRefType() {
        return this.refType;
    }

    /**
     * Setter for <code>win_mail_sender.ref_type</code>.
     */
    @Override
    public void setRefType(Integer refType) {
        this.refType = refType;
    }

    @Transient
    public void setRefTypeIf(Integer refType, boolean bool) {
        if (bool) {
            this.refType = refType;
        }
    }

    @Transient
    public void setRefTypeIf(Supplier<Integer> refType, boolean bool) {
        if (bool) {
            this.refType = refType.get();
        }
    }

    @Transient
    public void setRefTypeIf(Integer refType, Predicate<Integer> bool) {
        if (bool.test(refType)) {
            this.refType = refType;
        }
    }

    @Transient
    public void setRefTypeIf(Integer refType, Predicate<Integer> bool, Supplier<Integer>... refTypes) {
        if (bool.test(refType)) {
            this.refType = refType;
            return;
        }
        for (Supplier<Integer> supplier : refTypes) {
            refType = supplier.get();
            if (bool.test(refType)) {
                this.refType = refType;
                return;
            }
        }
    }

    @Transient
    public void setRefTypeIfNot(Integer refType, Predicate<Integer> bool) {
        if (!bool.test(refType)) {
            this.refType = refType;
        }
    }

    @Transient
    public void setRefTypeIfNot(Integer refType, Predicate<Integer> bool, Supplier<Integer>... refTypes) {
        if (!bool.test(refType)) {
            this.refType = refType;
            return;
        }
        for (Supplier<Integer> supplier : refTypes) {
            refType = supplier.get();
            if (!bool.test(refType)) {
                this.refType = refType;
                return;
            }
        }
    }

    @Transient
    public void setRefTypeIf(UnaryOperator<Integer> refType) {
        this.refType = refType.apply(this.refType);
    }


    /**
     * Getter for <code>win_mail_sender.ref_key1</code>.
     */
    @Override
    public Long getRefKey1() {
        return this.refKey1;
    }

    /**
     * Setter for <code>win_mail_sender.ref_key1</code>.
     */
    @Override
    public void setRefKey1(Long refKey1) {
        this.refKey1 = refKey1;
    }

    @Transient
    public void setRefKey1If(Long refKey1, boolean bool) {
        if (bool) {
            this.refKey1 = refKey1;
        }
    }

    @Transient
    public void setRefKey1If(Supplier<Long> refKey1, boolean bool) {
        if (bool) {
            this.refKey1 = refKey1.get();
        }
    }

    @Transient
    public void setRefKey1If(Long refKey1, Predicate<Long> bool) {
        if (bool.test(refKey1)) {
            this.refKey1 = refKey1;
        }
    }

    @Transient
    public void setRefKey1If(Long refKey1, Predicate<Long> bool, Supplier<Long>... refKey1s) {
        if (bool.test(refKey1)) {
            this.refKey1 = refKey1;
            return;
        }
        for (Supplier<Long> supplier : refKey1s) {
            refKey1 = supplier.get();
            if (bool.test(refKey1)) {
                this.refKey1 = refKey1;
                return;
            }
        }
    }

    @Transient
    public void setRefKey1IfNot(Long refKey1, Predicate<Long> bool) {
        if (!bool.test(refKey1)) {
            this.refKey1 = refKey1;
        }
    }

    @Transient
    public void setRefKey1IfNot(Long refKey1, Predicate<Long> bool, Supplier<Long>... refKey1s) {
        if (!bool.test(refKey1)) {
            this.refKey1 = refKey1;
            return;
        }
        for (Supplier<Long> supplier : refKey1s) {
            refKey1 = supplier.get();
            if (!bool.test(refKey1)) {
                this.refKey1 = refKey1;
                return;
            }
        }
    }

    @Transient
    public void setRefKey1If(UnaryOperator<Long> refKey1) {
        this.refKey1 = refKey1.apply(this.refKey1);
    }


    /**
     * Getter for <code>win_mail_sender.ref_key2</code>.
     */
    @Override
    public String getRefKey2() {
        return this.refKey2;
    }

    /**
     * Setter for <code>win_mail_sender.ref_key2</code>.
     */
    @Override
    public void setRefKey2(String refKey2) {
        this.refKey2 = refKey2;
    }

    @Transient
    public void setRefKey2If(String refKey2, boolean bool) {
        if (bool) {
            this.refKey2 = refKey2;
        }
    }

    @Transient
    public void setRefKey2If(Supplier<String> refKey2, boolean bool) {
        if (bool) {
            this.refKey2 = refKey2.get();
        }
    }

    @Transient
    public void setRefKey2If(String refKey2, Predicate<String> bool) {
        if (bool.test(refKey2)) {
            this.refKey2 = refKey2;
        }
    }

    @Transient
    public void setRefKey2If(String refKey2, Predicate<String> bool, Supplier<String>... refKey2s) {
        if (bool.test(refKey2)) {
            this.refKey2 = refKey2;
            return;
        }
        for (Supplier<String> supplier : refKey2s) {
            refKey2 = supplier.get();
            if (bool.test(refKey2)) {
                this.refKey2 = refKey2;
                return;
            }
        }
    }

    @Transient
    public void setRefKey2IfNot(String refKey2, Predicate<String> bool) {
        if (!bool.test(refKey2)) {
            this.refKey2 = refKey2;
        }
    }

    @Transient
    public void setRefKey2IfNot(String refKey2, Predicate<String> bool, Supplier<String>... refKey2s) {
        if (!bool.test(refKey2)) {
            this.refKey2 = refKey2;
            return;
        }
        for (Supplier<String> supplier : refKey2s) {
            refKey2 = supplier.get();
            if (!bool.test(refKey2)) {
                this.refKey2 = refKey2;
                return;
            }
        }
    }

    @Transient
    public void setRefKey2If(UnaryOperator<String> refKey2) {
        this.refKey2 = refKey2.apply(this.refKey2);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinMailSender other = (WinMailSender) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!this.createDt.equals(other.createDt))
            return false;
        if (this.modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!this.modifyDt.equals(other.modifyDt))
            return false;
        if (this.deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!this.deleteDt.equals(other.deleteDt))
            return false;
        if (this.commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!this.commitId.equals(other.commitId))
            return false;
        if (this.mailApps == null) {
            if (other.mailApps != null)
                return false;
        }
        else if (!this.mailApps.equals(other.mailApps))
            return false;
        if (this.mailRuns == null) {
            if (other.mailRuns != null)
                return false;
        }
        else if (!this.mailRuns.equals(other.mailRuns))
            return false;
        if (this.mailConf == null) {
            if (other.mailConf != null)
                return false;
        }
        else if (!this.mailConf.equals(other.mailConf))
            return false;
        if (this.mailFrom == null) {
            if (other.mailFrom != null)
                return false;
        }
        else if (!this.mailFrom.equals(other.mailFrom))
            return false;
        if (this.mailTo == null) {
            if (other.mailTo != null)
                return false;
        }
        else if (!this.mailTo.equals(other.mailTo))
            return false;
        if (this.mailCc == null) {
            if (other.mailCc != null)
                return false;
        }
        else if (!this.mailCc.equals(other.mailCc))
            return false;
        if (this.mailBcc == null) {
            if (other.mailBcc != null)
                return false;
        }
        else if (!this.mailBcc.equals(other.mailBcc))
            return false;
        if (this.mailReply == null) {
            if (other.mailReply != null)
                return false;
        }
        else if (!this.mailReply.equals(other.mailReply))
            return false;
        if (this.mailSubj == null) {
            if (other.mailSubj != null)
                return false;
        }
        else if (!this.mailSubj.equals(other.mailSubj))
            return false;
        if (this.mailText == null) {
            if (other.mailText != null)
                return false;
        }
        else if (!this.mailText.equals(other.mailText))
            return false;
        if (this.mailHtml == null) {
            if (other.mailHtml != null)
                return false;
        }
        else if (!this.mailHtml.equals(other.mailHtml))
            return false;
        if (this.mailFile == null) {
            if (other.mailFile != null)
                return false;
        }
        else if (!this.mailFile.equals(other.mailFile))
            return false;
        if (this.mailMark == null) {
            if (other.mailMark != null)
                return false;
        }
        else if (!this.mailMark.equals(other.mailMark))
            return false;
        if (this.mailDate == null) {
            if (other.mailDate != null)
                return false;
        }
        else if (!this.mailDate.equals(other.mailDate))
            return false;
        if (this.lastSend == null) {
            if (other.lastSend != null)
                return false;
        }
        else if (!this.lastSend.equals(other.lastSend))
            return false;
        if (this.lastFail == null) {
            if (other.lastFail != null)
                return false;
        }
        else if (!this.lastFail.equals(other.lastFail))
            return false;
        if (this.lastDone == null) {
            if (other.lastDone != null)
                return false;
        }
        else if (!this.lastDone.equals(other.lastDone))
            return false;
        if (this.lastCost == null) {
            if (other.lastCost != null)
                return false;
        }
        else if (!this.lastCost.equals(other.lastCost))
            return false;
        if (this.nextSend == null) {
            if (other.nextSend != null)
                return false;
        }
        else if (!this.nextSend.equals(other.nextSend))
            return false;
        if (this.nextLock == null) {
            if (other.nextLock != null)
                return false;
        }
        else if (!this.nextLock.equals(other.nextLock))
            return false;
        if (this.sumSend == null) {
            if (other.sumSend != null)
                return false;
        }
        else if (!this.sumSend.equals(other.sumSend))
            return false;
        if (this.sumFail == null) {
            if (other.sumFail != null)
                return false;
        }
        else if (!this.sumFail.equals(other.sumFail))
            return false;
        if (this.sumDone == null) {
            if (other.sumDone != null)
                return false;
        }
        else if (!this.sumDone.equals(other.sumDone))
            return false;
        if (this.maxFail == null) {
            if (other.maxFail != null)
                return false;
        }
        else if (!this.maxFail.equals(other.maxFail))
            return false;
        if (this.maxDone == null) {
            if (other.maxDone != null)
                return false;
        }
        else if (!this.maxDone.equals(other.maxDone))
            return false;
        if (this.refType == null) {
            if (other.refType != null)
                return false;
        }
        else if (!this.refType.equals(other.refType))
            return false;
        if (this.refKey1 == null) {
            if (other.refKey1 != null)
                return false;
        }
        else if (!this.refKey1.equals(other.refKey1))
            return false;
        if (this.refKey2 == null) {
            if (other.refKey2 != null)
                return false;
        }
        else if (!this.refKey2.equals(other.refKey2))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.mailApps == null) ? 0 : this.mailApps.hashCode());
        result = prime * result + ((this.mailRuns == null) ? 0 : this.mailRuns.hashCode());
        result = prime * result + ((this.mailConf == null) ? 0 : this.mailConf.hashCode());
        result = prime * result + ((this.mailFrom == null) ? 0 : this.mailFrom.hashCode());
        result = prime * result + ((this.mailTo == null) ? 0 : this.mailTo.hashCode());
        result = prime * result + ((this.mailCc == null) ? 0 : this.mailCc.hashCode());
        result = prime * result + ((this.mailBcc == null) ? 0 : this.mailBcc.hashCode());
        result = prime * result + ((this.mailReply == null) ? 0 : this.mailReply.hashCode());
        result = prime * result + ((this.mailSubj == null) ? 0 : this.mailSubj.hashCode());
        result = prime * result + ((this.mailText == null) ? 0 : this.mailText.hashCode());
        result = prime * result + ((this.mailHtml == null) ? 0 : this.mailHtml.hashCode());
        result = prime * result + ((this.mailFile == null) ? 0 : this.mailFile.hashCode());
        result = prime * result + ((this.mailMark == null) ? 0 : this.mailMark.hashCode());
        result = prime * result + ((this.mailDate == null) ? 0 : this.mailDate.hashCode());
        result = prime * result + ((this.lastSend == null) ? 0 : this.lastSend.hashCode());
        result = prime * result + ((this.lastFail == null) ? 0 : this.lastFail.hashCode());
        result = prime * result + ((this.lastDone == null) ? 0 : this.lastDone.hashCode());
        result = prime * result + ((this.lastCost == null) ? 0 : this.lastCost.hashCode());
        result = prime * result + ((this.nextSend == null) ? 0 : this.nextSend.hashCode());
        result = prime * result + ((this.nextLock == null) ? 0 : this.nextLock.hashCode());
        result = prime * result + ((this.sumSend == null) ? 0 : this.sumSend.hashCode());
        result = prime * result + ((this.sumFail == null) ? 0 : this.sumFail.hashCode());
        result = prime * result + ((this.sumDone == null) ? 0 : this.sumDone.hashCode());
        result = prime * result + ((this.maxFail == null) ? 0 : this.maxFail.hashCode());
        result = prime * result + ((this.maxDone == null) ? 0 : this.maxDone.hashCode());
        result = prime * result + ((this.refType == null) ? 0 : this.refType.hashCode());
        result = prime * result + ((this.refKey1 == null) ? 0 : this.refKey1.hashCode());
        result = prime * result + ((this.refKey2 == null) ? 0 : this.refKey2.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinMailSender (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(mailApps);
        sb.append(", ").append(mailRuns);
        sb.append(", ").append(mailConf);
        sb.append(", ").append(mailFrom);
        sb.append(", ").append(mailTo);
        sb.append(", ").append(mailCc);
        sb.append(", ").append(mailBcc);
        sb.append(", ").append(mailReply);
        sb.append(", ").append(mailSubj);
        sb.append(", ").append(mailText);
        sb.append(", ").append(mailHtml);
        sb.append(", ").append(mailFile);
        sb.append(", ").append(mailMark);
        sb.append(", ").append(mailDate);
        sb.append(", ").append(lastSend);
        sb.append(", ").append(lastFail);
        sb.append(", ").append(lastDone);
        sb.append(", ").append(lastCost);
        sb.append(", ").append(nextSend);
        sb.append(", ").append(nextLock);
        sb.append(", ").append(sumSend);
        sb.append(", ").append(sumFail);
        sb.append(", ").append(sumDone);
        sb.append(", ").append(maxFail);
        sb.append(", ").append(maxDone);
        sb.append(", ").append(refType);
        sb.append(", ").append(refKey1);
        sb.append(", ").append(refKey2);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinMailSender from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setMailApps(from.getMailApps());
        setMailRuns(from.getMailRuns());
        setMailConf(from.getMailConf());
        setMailFrom(from.getMailFrom());
        setMailTo(from.getMailTo());
        setMailCc(from.getMailCc());
        setMailBcc(from.getMailBcc());
        setMailReply(from.getMailReply());
        setMailSubj(from.getMailSubj());
        setMailText(from.getMailText());
        setMailHtml(from.getMailHtml());
        setMailFile(from.getMailFile());
        setMailMark(from.getMailMark());
        setMailDate(from.getMailDate());
        setLastSend(from.getLastSend());
        setLastFail(from.getLastFail());
        setLastDone(from.getLastDone());
        setLastCost(from.getLastCost());
        setNextSend(from.getNextSend());
        setNextLock(from.getNextLock());
        setSumSend(from.getSumSend());
        setSumFail(from.getSumFail());
        setSumDone(from.getSumDone());
        setMaxFail(from.getMaxFail());
        setMaxDone(from.getMaxDone());
        setRefType(from.getRefType());
        setRefKey1(from.getRefKey1());
        setRefKey2(from.getRefKey2());
    }

    @Override
    public <E extends IWinMailSender> E into(E into) {
        into.from(this);
        return into;
    }
}
