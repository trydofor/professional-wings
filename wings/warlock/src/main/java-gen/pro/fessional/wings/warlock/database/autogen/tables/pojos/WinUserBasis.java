/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.pojos;


import pro.fessional.wings.warlock.database.autogen.tables.interfaces.IWinUserBasis;
import pro.fessional.wings.warlock.enums.autogen.UserGender;
import pro.fessional.wings.warlock.enums.autogen.UserStatus;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Locale;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;


/**
 * The table <code>wings.win_user_basis</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinUserBasis implements IWinUserBasis {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private LocalDateTime deleteDt;
    private Long commitId;
    private String nickname;
    private String passsalt;
    private UserGender gender;
    private String avatar;
    private Locale locale;
    private ZoneId zoneid;
    private String remark;
    private UserStatus status;

    public WinUserBasis() {}

    public WinUserBasis(IWinUserBasis value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.nickname = value.getNickname();
        this.passsalt = value.getPasssalt();
        this.gender = value.getGender();
        this.avatar = value.getAvatar();
        this.locale = value.getLocale();
        this.zoneid = value.getZoneid();
        this.remark = value.getRemark();
        this.status = value.getStatus();
    }

    public WinUserBasis(
        Long id,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        LocalDateTime deleteDt,
        Long commitId,
        String nickname,
        String passsalt,
        UserGender gender,
        String avatar,
        Locale locale,
        ZoneId zoneid,
        String remark,
        UserStatus status
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.nickname = nickname;
        this.passsalt = passsalt;
        this.gender = gender;
        this.avatar = avatar;
        this.locale = locale;
        this.zoneid = zoneid;
        this.remark = remark;
        this.status = status;
    }

    /**
     * Getter for <code>win_user_basis.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_user_basis.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>win_user_basis.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_user_basis.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    public void setCreateDtIf(LocalDateTime createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIf(Supplier<LocalDateTime> createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt.get();
        }
    }

    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (!bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    public void setCreateDtIf(UnaryOperator<LocalDateTime> createDt) {
        this.createDt = createDt.apply(this.createDt);
    }


    /**
     * Getter for <code>win_user_basis.modify_dt</code>.
     */
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>win_user_basis.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    public void setModifyDtIf(LocalDateTime modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIf(Supplier<LocalDateTime> modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt.get();
        }
    }

    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (!bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    public void setModifyDtIf(UnaryOperator<LocalDateTime> modifyDt) {
        this.modifyDt = modifyDt.apply(this.modifyDt);
    }


    /**
     * Getter for <code>win_user_basis.delete_dt</code>.
     */
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>win_user_basis.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIf(Supplier<LocalDateTime> deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt.get();
        }
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (!bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    public void setDeleteDtIf(UnaryOperator<LocalDateTime> deleteDt) {
        this.deleteDt = deleteDt.apply(this.deleteDt);
    }


    /**
     * Getter for <code>win_user_basis.commit_id</code>.
     */
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>win_user_basis.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    public void setCommitIdIf(Long commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIf(Supplier<Long> commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId.get();
        }
    }

    public void setCommitIdIf(Long commitId, Predicate<Long> bool) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIf(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (!bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    public void setCommitIdIf(UnaryOperator<Long> commitId) {
        this.commitId = commitId.apply(this.commitId);
    }


    /**
     * Getter for <code>win_user_basis.nickname</code>.
     */
    @Override
    public String getNickname() {
        return this.nickname;
    }

    /**
     * Setter for <code>win_user_basis.nickname</code>.
     */
    @Override
    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public void setNicknameIf(String nickname, boolean bool) {
        if (bool) {
            this.nickname = nickname;
        }
    }

    public void setNicknameIf(Supplier<String> nickname, boolean bool) {
        if (bool) {
            this.nickname = nickname.get();
        }
    }

    public void setNicknameIf(String nickname, Predicate<String> bool) {
        if (bool.test(nickname)) {
            this.nickname = nickname;
        }
    }

    public void setNicknameIf(String nickname, Predicate<String> bool, Supplier<String>... nicknames) {
        if (bool.test(nickname)) {
            this.nickname = nickname;
            return;
        }
        for (Supplier<String> supplier : nicknames) {
            nickname = supplier.get();
            if (bool.test(nickname)) {
                this.nickname = nickname;
                return;
            }
        }
    }

    public void setNicknameIfNot(String nickname, Predicate<String> bool) {
        if (!bool.test(nickname)) {
            this.nickname = nickname;
        }
    }

    public void setNicknameIfNot(String nickname, Predicate<String> bool, Supplier<String>... nicknames) {
        if (!bool.test(nickname)) {
            this.nickname = nickname;
            return;
        }
        for (Supplier<String> supplier : nicknames) {
            nickname = supplier.get();
            if (!bool.test(nickname)) {
                this.nickname = nickname;
                return;
            }
        }
    }

    public void setNicknameIf(UnaryOperator<String> nickname) {
        this.nickname = nickname.apply(this.nickname);
    }


    /**
     * Getter for <code>win_user_basis.passsalt</code>.
     */
    @Override
    public String getPasssalt() {
        return this.passsalt;
    }

    /**
     * Setter for <code>win_user_basis.passsalt</code>.
     */
    @Override
    public void setPasssalt(String passsalt) {
        this.passsalt = passsalt;
    }

    public void setPasssaltIf(String passsalt, boolean bool) {
        if (bool) {
            this.passsalt = passsalt;
        }
    }

    public void setPasssaltIf(Supplier<String> passsalt, boolean bool) {
        if (bool) {
            this.passsalt = passsalt.get();
        }
    }

    public void setPasssaltIf(String passsalt, Predicate<String> bool) {
        if (bool.test(passsalt)) {
            this.passsalt = passsalt;
        }
    }

    public void setPasssaltIf(String passsalt, Predicate<String> bool, Supplier<String>... passsalts) {
        if (bool.test(passsalt)) {
            this.passsalt = passsalt;
            return;
        }
        for (Supplier<String> supplier : passsalts) {
            passsalt = supplier.get();
            if (bool.test(passsalt)) {
                this.passsalt = passsalt;
                return;
            }
        }
    }

    public void setPasssaltIfNot(String passsalt, Predicate<String> bool) {
        if (!bool.test(passsalt)) {
            this.passsalt = passsalt;
        }
    }

    public void setPasssaltIfNot(String passsalt, Predicate<String> bool, Supplier<String>... passsalts) {
        if (!bool.test(passsalt)) {
            this.passsalt = passsalt;
            return;
        }
        for (Supplier<String> supplier : passsalts) {
            passsalt = supplier.get();
            if (!bool.test(passsalt)) {
                this.passsalt = passsalt;
                return;
            }
        }
    }

    public void setPasssaltIf(UnaryOperator<String> passsalt) {
        this.passsalt = passsalt.apply(this.passsalt);
    }


    /**
     * Getter for <code>win_user_basis.gender</code>.
     */
    @Override
    public UserGender getGender() {
        return this.gender;
    }

    /**
     * Setter for <code>win_user_basis.gender</code>.
     */
    @Override
    public void setGender(UserGender gender) {
        this.gender = gender;
    }

    public void setGenderIf(UserGender gender, boolean bool) {
        if (bool) {
            this.gender = gender;
        }
    }

    public void setGenderIf(Supplier<UserGender> gender, boolean bool) {
        if (bool) {
            this.gender = gender.get();
        }
    }

    public void setGenderIf(UserGender gender, Predicate<UserGender> bool) {
        if (bool.test(gender)) {
            this.gender = gender;
        }
    }

    public void setGenderIf(UserGender gender, Predicate<UserGender> bool, Supplier<UserGender>... genders) {
        if (bool.test(gender)) {
            this.gender = gender;
            return;
        }
        for (Supplier<UserGender> supplier : genders) {
            gender = supplier.get();
            if (bool.test(gender)) {
                this.gender = gender;
                return;
            }
        }
    }

    public void setGenderIfNot(UserGender gender, Predicate<UserGender> bool) {
        if (!bool.test(gender)) {
            this.gender = gender;
        }
    }

    public void setGenderIfNot(UserGender gender, Predicate<UserGender> bool, Supplier<UserGender>... genders) {
        if (!bool.test(gender)) {
            this.gender = gender;
            return;
        }
        for (Supplier<UserGender> supplier : genders) {
            gender = supplier.get();
            if (!bool.test(gender)) {
                this.gender = gender;
                return;
            }
        }
    }

    public void setGenderIf(UnaryOperator<UserGender> gender) {
        this.gender = gender.apply(this.gender);
    }


    /**
     * Getter for <code>win_user_basis.avatar</code>.
     */
    @Override
    public String getAvatar() {
        return this.avatar;
    }

    /**
     * Setter for <code>win_user_basis.avatar</code>.
     */
    @Override
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public void setAvatarIf(String avatar, boolean bool) {
        if (bool) {
            this.avatar = avatar;
        }
    }

    public void setAvatarIf(Supplier<String> avatar, boolean bool) {
        if (bool) {
            this.avatar = avatar.get();
        }
    }

    public void setAvatarIf(String avatar, Predicate<String> bool) {
        if (bool.test(avatar)) {
            this.avatar = avatar;
        }
    }

    public void setAvatarIf(String avatar, Predicate<String> bool, Supplier<String>... avatars) {
        if (bool.test(avatar)) {
            this.avatar = avatar;
            return;
        }
        for (Supplier<String> supplier : avatars) {
            avatar = supplier.get();
            if (bool.test(avatar)) {
                this.avatar = avatar;
                return;
            }
        }
    }

    public void setAvatarIfNot(String avatar, Predicate<String> bool) {
        if (!bool.test(avatar)) {
            this.avatar = avatar;
        }
    }

    public void setAvatarIfNot(String avatar, Predicate<String> bool, Supplier<String>... avatars) {
        if (!bool.test(avatar)) {
            this.avatar = avatar;
            return;
        }
        for (Supplier<String> supplier : avatars) {
            avatar = supplier.get();
            if (!bool.test(avatar)) {
                this.avatar = avatar;
                return;
            }
        }
    }

    public void setAvatarIf(UnaryOperator<String> avatar) {
        this.avatar = avatar.apply(this.avatar);
    }


    /**
     * Getter for <code>win_user_basis.locale</code>.
     */
    @Override
    public Locale getLocale() {
        return this.locale;
    }

    /**
     * Setter for <code>win_user_basis.locale</code>.
     */
    @Override
    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    public void setLocaleIf(Locale locale, boolean bool) {
        if (bool) {
            this.locale = locale;
        }
    }

    public void setLocaleIf(Supplier<Locale> locale, boolean bool) {
        if (bool) {
            this.locale = locale.get();
        }
    }

    public void setLocaleIf(Locale locale, Predicate<Locale> bool) {
        if (bool.test(locale)) {
            this.locale = locale;
        }
    }

    public void setLocaleIf(Locale locale, Predicate<Locale> bool, Supplier<Locale>... locales) {
        if (bool.test(locale)) {
            this.locale = locale;
            return;
        }
        for (Supplier<Locale> supplier : locales) {
            locale = supplier.get();
            if (bool.test(locale)) {
                this.locale = locale;
                return;
            }
        }
    }

    public void setLocaleIfNot(Locale locale, Predicate<Locale> bool) {
        if (!bool.test(locale)) {
            this.locale = locale;
        }
    }

    public void setLocaleIfNot(Locale locale, Predicate<Locale> bool, Supplier<Locale>... locales) {
        if (!bool.test(locale)) {
            this.locale = locale;
            return;
        }
        for (Supplier<Locale> supplier : locales) {
            locale = supplier.get();
            if (!bool.test(locale)) {
                this.locale = locale;
                return;
            }
        }
    }

    public void setLocaleIf(UnaryOperator<Locale> locale) {
        this.locale = locale.apply(this.locale);
    }


    /**
     * Getter for <code>win_user_basis.zoneid</code>.
     */
    @Override
    public ZoneId getZoneid() {
        return this.zoneid;
    }

    /**
     * Setter for <code>win_user_basis.zoneid</code>.
     */
    @Override
    public void setZoneid(ZoneId zoneid) {
        this.zoneid = zoneid;
    }

    public void setZoneidIf(ZoneId zoneid, boolean bool) {
        if (bool) {
            this.zoneid = zoneid;
        }
    }

    public void setZoneidIf(Supplier<ZoneId> zoneid, boolean bool) {
        if (bool) {
            this.zoneid = zoneid.get();
        }
    }

    public void setZoneidIf(ZoneId zoneid, Predicate<ZoneId> bool) {
        if (bool.test(zoneid)) {
            this.zoneid = zoneid;
        }
    }

    public void setZoneidIf(ZoneId zoneid, Predicate<ZoneId> bool, Supplier<ZoneId>... zoneids) {
        if (bool.test(zoneid)) {
            this.zoneid = zoneid;
            return;
        }
        for (Supplier<ZoneId> supplier : zoneids) {
            zoneid = supplier.get();
            if (bool.test(zoneid)) {
                this.zoneid = zoneid;
                return;
            }
        }
    }

    public void setZoneidIfNot(ZoneId zoneid, Predicate<ZoneId> bool) {
        if (!bool.test(zoneid)) {
            this.zoneid = zoneid;
        }
    }

    public void setZoneidIfNot(ZoneId zoneid, Predicate<ZoneId> bool, Supplier<ZoneId>... zoneids) {
        if (!bool.test(zoneid)) {
            this.zoneid = zoneid;
            return;
        }
        for (Supplier<ZoneId> supplier : zoneids) {
            zoneid = supplier.get();
            if (!bool.test(zoneid)) {
                this.zoneid = zoneid;
                return;
            }
        }
    }

    public void setZoneidIf(UnaryOperator<ZoneId> zoneid) {
        this.zoneid = zoneid.apply(this.zoneid);
    }


    /**
     * Getter for <code>win_user_basis.remark</code>.
     */
    @Override
    public String getRemark() {
        return this.remark;
    }

    /**
     * Setter for <code>win_user_basis.remark</code>.
     */
    @Override
    public void setRemark(String remark) {
        this.remark = remark;
    }

    public void setRemarkIf(String remark, boolean bool) {
        if (bool) {
            this.remark = remark;
        }
    }

    public void setRemarkIf(Supplier<String> remark, boolean bool) {
        if (bool) {
            this.remark = remark.get();
        }
    }

    public void setRemarkIf(String remark, Predicate<String> bool) {
        if (bool.test(remark)) {
            this.remark = remark;
        }
    }

    public void setRemarkIf(String remark, Predicate<String> bool, Supplier<String>... remarks) {
        if (bool.test(remark)) {
            this.remark = remark;
            return;
        }
        for (Supplier<String> supplier : remarks) {
            remark = supplier.get();
            if (bool.test(remark)) {
                this.remark = remark;
                return;
            }
        }
    }

    public void setRemarkIfNot(String remark, Predicate<String> bool) {
        if (!bool.test(remark)) {
            this.remark = remark;
        }
    }

    public void setRemarkIfNot(String remark, Predicate<String> bool, Supplier<String>... remarks) {
        if (!bool.test(remark)) {
            this.remark = remark;
            return;
        }
        for (Supplier<String> supplier : remarks) {
            remark = supplier.get();
            if (!bool.test(remark)) {
                this.remark = remark;
                return;
            }
        }
    }

    public void setRemarkIf(UnaryOperator<String> remark) {
        this.remark = remark.apply(this.remark);
    }


    /**
     * Getter for <code>win_user_basis.status</code>.
     */
    @Override
    public UserStatus getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>win_user_basis.status</code>.
     */
    @Override
    public void setStatus(UserStatus status) {
        this.status = status;
    }

    public void setStatusIf(UserStatus status, boolean bool) {
        if (bool) {
            this.status = status;
        }
    }

    public void setStatusIf(Supplier<UserStatus> status, boolean bool) {
        if (bool) {
            this.status = status.get();
        }
    }

    public void setStatusIf(UserStatus status, Predicate<UserStatus> bool) {
        if (bool.test(status)) {
            this.status = status;
        }
    }

    public void setStatusIf(UserStatus status, Predicate<UserStatus> bool, Supplier<UserStatus>... statuss) {
        if (bool.test(status)) {
            this.status = status;
            return;
        }
        for (Supplier<UserStatus> supplier : statuss) {
            status = supplier.get();
            if (bool.test(status)) {
                this.status = status;
                return;
            }
        }
    }

    public void setStatusIfNot(UserStatus status, Predicate<UserStatus> bool) {
        if (!bool.test(status)) {
            this.status = status;
        }
    }

    public void setStatusIfNot(UserStatus status, Predicate<UserStatus> bool, Supplier<UserStatus>... statuss) {
        if (!bool.test(status)) {
            this.status = status;
            return;
        }
        for (Supplier<UserStatus> supplier : statuss) {
            status = supplier.get();
            if (!bool.test(status)) {
                this.status = status;
                return;
            }
        }
    }

    public void setStatusIf(UnaryOperator<UserStatus> status) {
        this.status = status.apply(this.status);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinUserBasis other = (WinUserBasis) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!this.createDt.equals(other.createDt))
            return false;
        if (this.modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!this.modifyDt.equals(other.modifyDt))
            return false;
        if (this.deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!this.deleteDt.equals(other.deleteDt))
            return false;
        if (this.commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!this.commitId.equals(other.commitId))
            return false;
        if (this.nickname == null) {
            if (other.nickname != null)
                return false;
        }
        else if (!this.nickname.equals(other.nickname))
            return false;
        if (this.passsalt == null) {
            if (other.passsalt != null)
                return false;
        }
        else if (!this.passsalt.equals(other.passsalt))
            return false;
        if (this.gender == null) {
            if (other.gender != null)
                return false;
        }
        else if (!this.gender.equals(other.gender))
            return false;
        if (this.avatar == null) {
            if (other.avatar != null)
                return false;
        }
        else if (!this.avatar.equals(other.avatar))
            return false;
        if (this.locale == null) {
            if (other.locale != null)
                return false;
        }
        else if (!this.locale.equals(other.locale))
            return false;
        if (this.zoneid == null) {
            if (other.zoneid != null)
                return false;
        }
        else if (!this.zoneid.equals(other.zoneid))
            return false;
        if (this.remark == null) {
            if (other.remark != null)
                return false;
        }
        else if (!this.remark.equals(other.remark))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.nickname == null) ? 0 : this.nickname.hashCode());
        result = prime * result + ((this.passsalt == null) ? 0 : this.passsalt.hashCode());
        result = prime * result + ((this.gender == null) ? 0 : this.gender.hashCode());
        result = prime * result + ((this.avatar == null) ? 0 : this.avatar.hashCode());
        result = prime * result + ((this.locale == null) ? 0 : this.locale.hashCode());
        result = prime * result + ((this.zoneid == null) ? 0 : this.zoneid.hashCode());
        result = prime * result + ((this.remark == null) ? 0 : this.remark.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinUserBasis (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(nickname);
        sb.append(", ").append(passsalt);
        sb.append(", ").append(gender);
        sb.append(", ").append(avatar);
        sb.append(", ").append(locale);
        sb.append(", ").append(zoneid);
        sb.append(", ").append(remark);
        sb.append(", ").append(status);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinUserBasis from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setNickname(from.getNickname());
        setPasssalt(from.getPasssalt());
        setGender(from.getGender());
        setAvatar(from.getAvatar());
        setLocale(from.getLocale());
        setZoneid(from.getZoneid());
        setRemark(from.getRemark());
        setStatus(from.getStatus());
    }

    @Override
    public <E extends IWinUserBasis> E into(E into) {
        into.from(this);
        return into;
    }
}
