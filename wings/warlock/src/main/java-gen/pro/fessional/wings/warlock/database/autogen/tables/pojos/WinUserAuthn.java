/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.pojos;


import pro.fessional.wings.warlock.database.autogen.tables.interfaces.IWinUserAuthn;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;


/**
 * The table <code>wings.win_user_authn</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WinUserAuthn implements IWinUserAuthn {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private LocalDateTime deleteDt;
    private Long commitId;
    private Long userId;
    private String authType;
    private String username;
    private String password;
    private String extraPara;
    private String extraUser;
    private LocalDateTime expiredDt;
    private Integer failedCnt;
    private Integer failedMax;

    public WinUserAuthn() {}

    public WinUserAuthn(IWinUserAuthn value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.userId = value.getUserId();
        this.authType = value.getAuthType();
        this.username = value.getUsername();
        this.password = value.getPassword();
        this.extraPara = value.getExtraPara();
        this.extraUser = value.getExtraUser();
        this.expiredDt = value.getExpiredDt();
        this.failedCnt = value.getFailedCnt();
        this.failedMax = value.getFailedMax();
    }

    public WinUserAuthn(
        Long id,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        LocalDateTime deleteDt,
        Long commitId,
        Long userId,
        String authType,
        String username,
        String password,
        String extraPara,
        String extraUser,
        LocalDateTime expiredDt,
        Integer failedCnt,
        Integer failedMax
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.userId = userId;
        this.authType = authType;
        this.username = username;
        this.password = password;
        this.extraPara = extraPara;
        this.extraUser = extraUser;
        this.expiredDt = expiredDt;
        this.failedCnt = failedCnt;
        this.failedMax = failedMax;
    }

    /**
     * Getter for <code>win_user_authn.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_user_authn.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>win_user_authn.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_user_authn.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    public void setCreateDtIf(LocalDateTime createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIf(Supplier<LocalDateTime> createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt.get();
        }
    }

    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (!bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    public void setCreateDtIf(UnaryOperator<LocalDateTime> createDt) {
        this.createDt = createDt.apply(this.createDt);
    }


    /**
     * Getter for <code>win_user_authn.modify_dt</code>.
     */
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>win_user_authn.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    public void setModifyDtIf(LocalDateTime modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIf(Supplier<LocalDateTime> modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt.get();
        }
    }

    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (!bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    public void setModifyDtIf(UnaryOperator<LocalDateTime> modifyDt) {
        this.modifyDt = modifyDt.apply(this.modifyDt);
    }


    /**
     * Getter for <code>win_user_authn.delete_dt</code>.
     */
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>win_user_authn.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIf(Supplier<LocalDateTime> deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt.get();
        }
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (!bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    public void setDeleteDtIf(UnaryOperator<LocalDateTime> deleteDt) {
        this.deleteDt = deleteDt.apply(this.deleteDt);
    }


    /**
     * Getter for <code>win_user_authn.commit_id</code>.
     */
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>win_user_authn.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    public void setCommitIdIf(Long commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIf(Supplier<Long> commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId.get();
        }
    }

    public void setCommitIdIf(Long commitId, Predicate<Long> bool) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIf(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (!bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    public void setCommitIdIf(UnaryOperator<Long> commitId) {
        this.commitId = commitId.apply(this.commitId);
    }


    /**
     * Getter for <code>win_user_authn.user_id</code>.
     */
    @Override
    public Long getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>win_user_authn.user_id</code>.
     */
    @Override
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public void setUserIdIf(Long userId, boolean bool) {
        if (bool) {
            this.userId = userId;
        }
    }

    public void setUserIdIf(Supplier<Long> userId, boolean bool) {
        if (bool) {
            this.userId = userId.get();
        }
    }

    public void setUserIdIf(Long userId, Predicate<Long> bool) {
        if (bool.test(userId)) {
            this.userId = userId;
        }
    }

    public void setUserIdIf(Long userId, Predicate<Long> bool, Supplier<Long>... userIds) {
        if (bool.test(userId)) {
            this.userId = userId;
            return;
        }
        for (Supplier<Long> supplier : userIds) {
            userId = supplier.get();
            if (bool.test(userId)) {
                this.userId = userId;
                return;
            }
        }
    }

    public void setUserIdIfNot(Long userId, Predicate<Long> bool) {
        if (!bool.test(userId)) {
            this.userId = userId;
        }
    }

    public void setUserIdIfNot(Long userId, Predicate<Long> bool, Supplier<Long>... userIds) {
        if (!bool.test(userId)) {
            this.userId = userId;
            return;
        }
        for (Supplier<Long> supplier : userIds) {
            userId = supplier.get();
            if (!bool.test(userId)) {
                this.userId = userId;
                return;
            }
        }
    }

    public void setUserIdIf(UnaryOperator<Long> userId) {
        this.userId = userId.apply(this.userId);
    }


    /**
     * Getter for <code>win_user_authn.auth_type</code>.
     */
    @Override
    public String getAuthType() {
        return this.authType;
    }

    /**
     * Setter for <code>win_user_authn.auth_type</code>.
     */
    @Override
    public void setAuthType(String authType) {
        this.authType = authType;
    }

    public void setAuthTypeIf(String authType, boolean bool) {
        if (bool) {
            this.authType = authType;
        }
    }

    public void setAuthTypeIf(Supplier<String> authType, boolean bool) {
        if (bool) {
            this.authType = authType.get();
        }
    }

    public void setAuthTypeIf(String authType, Predicate<String> bool) {
        if (bool.test(authType)) {
            this.authType = authType;
        }
    }

    public void setAuthTypeIf(String authType, Predicate<String> bool, Supplier<String>... authTypes) {
        if (bool.test(authType)) {
            this.authType = authType;
            return;
        }
        for (Supplier<String> supplier : authTypes) {
            authType = supplier.get();
            if (bool.test(authType)) {
                this.authType = authType;
                return;
            }
        }
    }

    public void setAuthTypeIfNot(String authType, Predicate<String> bool) {
        if (!bool.test(authType)) {
            this.authType = authType;
        }
    }

    public void setAuthTypeIfNot(String authType, Predicate<String> bool, Supplier<String>... authTypes) {
        if (!bool.test(authType)) {
            this.authType = authType;
            return;
        }
        for (Supplier<String> supplier : authTypes) {
            authType = supplier.get();
            if (!bool.test(authType)) {
                this.authType = authType;
                return;
            }
        }
    }

    public void setAuthTypeIf(UnaryOperator<String> authType) {
        this.authType = authType.apply(this.authType);
    }


    /**
     * Getter for <code>win_user_authn.username</code>.
     */
    @Override
    public String getUsername() {
        return this.username;
    }

    /**
     * Setter for <code>win_user_authn.username</code>.
     */
    @Override
    public void setUsername(String username) {
        this.username = username;
    }

    public void setUsernameIf(String username, boolean bool) {
        if (bool) {
            this.username = username;
        }
    }

    public void setUsernameIf(Supplier<String> username, boolean bool) {
        if (bool) {
            this.username = username.get();
        }
    }

    public void setUsernameIf(String username, Predicate<String> bool) {
        if (bool.test(username)) {
            this.username = username;
        }
    }

    public void setUsernameIf(String username, Predicate<String> bool, Supplier<String>... usernames) {
        if (bool.test(username)) {
            this.username = username;
            return;
        }
        for (Supplier<String> supplier : usernames) {
            username = supplier.get();
            if (bool.test(username)) {
                this.username = username;
                return;
            }
        }
    }

    public void setUsernameIfNot(String username, Predicate<String> bool) {
        if (!bool.test(username)) {
            this.username = username;
        }
    }

    public void setUsernameIfNot(String username, Predicate<String> bool, Supplier<String>... usernames) {
        if (!bool.test(username)) {
            this.username = username;
            return;
        }
        for (Supplier<String> supplier : usernames) {
            username = supplier.get();
            if (!bool.test(username)) {
                this.username = username;
                return;
            }
        }
    }

    public void setUsernameIf(UnaryOperator<String> username) {
        this.username = username.apply(this.username);
    }


    /**
     * Getter for <code>win_user_authn.password</code>.
     */
    @Override
    public String getPassword() {
        return this.password;
    }

    /**
     * Setter for <code>win_user_authn.password</code>.
     */
    @Override
    public void setPassword(String password) {
        this.password = password;
    }

    public void setPasswordIf(String password, boolean bool) {
        if (bool) {
            this.password = password;
        }
    }

    public void setPasswordIf(Supplier<String> password, boolean bool) {
        if (bool) {
            this.password = password.get();
        }
    }

    public void setPasswordIf(String password, Predicate<String> bool) {
        if (bool.test(password)) {
            this.password = password;
        }
    }

    public void setPasswordIf(String password, Predicate<String> bool, Supplier<String>... passwords) {
        if (bool.test(password)) {
            this.password = password;
            return;
        }
        for (Supplier<String> supplier : passwords) {
            password = supplier.get();
            if (bool.test(password)) {
                this.password = password;
                return;
            }
        }
    }

    public void setPasswordIfNot(String password, Predicate<String> bool) {
        if (!bool.test(password)) {
            this.password = password;
        }
    }

    public void setPasswordIfNot(String password, Predicate<String> bool, Supplier<String>... passwords) {
        if (!bool.test(password)) {
            this.password = password;
            return;
        }
        for (Supplier<String> supplier : passwords) {
            password = supplier.get();
            if (!bool.test(password)) {
                this.password = password;
                return;
            }
        }
    }

    public void setPasswordIf(UnaryOperator<String> password) {
        this.password = password.apply(this.password);
    }


    /**
     * Getter for <code>win_user_authn.extra_para</code>.
     */
    @Override
    public String getExtraPara() {
        return this.extraPara;
    }

    /**
     * Setter for <code>win_user_authn.extra_para</code>.
     */
    @Override
    public void setExtraPara(String extraPara) {
        this.extraPara = extraPara;
    }

    public void setExtraParaIf(String extraPara, boolean bool) {
        if (bool) {
            this.extraPara = extraPara;
        }
    }

    public void setExtraParaIf(Supplier<String> extraPara, boolean bool) {
        if (bool) {
            this.extraPara = extraPara.get();
        }
    }

    public void setExtraParaIf(String extraPara, Predicate<String> bool) {
        if (bool.test(extraPara)) {
            this.extraPara = extraPara;
        }
    }

    public void setExtraParaIf(String extraPara, Predicate<String> bool, Supplier<String>... extraParas) {
        if (bool.test(extraPara)) {
            this.extraPara = extraPara;
            return;
        }
        for (Supplier<String> supplier : extraParas) {
            extraPara = supplier.get();
            if (bool.test(extraPara)) {
                this.extraPara = extraPara;
                return;
            }
        }
    }

    public void setExtraParaIfNot(String extraPara, Predicate<String> bool) {
        if (!bool.test(extraPara)) {
            this.extraPara = extraPara;
        }
    }

    public void setExtraParaIfNot(String extraPara, Predicate<String> bool, Supplier<String>... extraParas) {
        if (!bool.test(extraPara)) {
            this.extraPara = extraPara;
            return;
        }
        for (Supplier<String> supplier : extraParas) {
            extraPara = supplier.get();
            if (!bool.test(extraPara)) {
                this.extraPara = extraPara;
                return;
            }
        }
    }

    public void setExtraParaIf(UnaryOperator<String> extraPara) {
        this.extraPara = extraPara.apply(this.extraPara);
    }


    /**
     * Getter for <code>win_user_authn.extra_user</code>.
     */
    @Override
    public String getExtraUser() {
        return this.extraUser;
    }

    /**
     * Setter for <code>win_user_authn.extra_user</code>.
     */
    @Override
    public void setExtraUser(String extraUser) {
        this.extraUser = extraUser;
    }

    public void setExtraUserIf(String extraUser, boolean bool) {
        if (bool) {
            this.extraUser = extraUser;
        }
    }

    public void setExtraUserIf(Supplier<String> extraUser, boolean bool) {
        if (bool) {
            this.extraUser = extraUser.get();
        }
    }

    public void setExtraUserIf(String extraUser, Predicate<String> bool) {
        if (bool.test(extraUser)) {
            this.extraUser = extraUser;
        }
    }

    public void setExtraUserIf(String extraUser, Predicate<String> bool, Supplier<String>... extraUsers) {
        if (bool.test(extraUser)) {
            this.extraUser = extraUser;
            return;
        }
        for (Supplier<String> supplier : extraUsers) {
            extraUser = supplier.get();
            if (bool.test(extraUser)) {
                this.extraUser = extraUser;
                return;
            }
        }
    }

    public void setExtraUserIfNot(String extraUser, Predicate<String> bool) {
        if (!bool.test(extraUser)) {
            this.extraUser = extraUser;
        }
    }

    public void setExtraUserIfNot(String extraUser, Predicate<String> bool, Supplier<String>... extraUsers) {
        if (!bool.test(extraUser)) {
            this.extraUser = extraUser;
            return;
        }
        for (Supplier<String> supplier : extraUsers) {
            extraUser = supplier.get();
            if (!bool.test(extraUser)) {
                this.extraUser = extraUser;
                return;
            }
        }
    }

    public void setExtraUserIf(UnaryOperator<String> extraUser) {
        this.extraUser = extraUser.apply(this.extraUser);
    }


    /**
     * Getter for <code>win_user_authn.expired_dt</code>.
     */
    @Override
    public LocalDateTime getExpiredDt() {
        return this.expiredDt;
    }

    /**
     * Setter for <code>win_user_authn.expired_dt</code>.
     */
    @Override
    public void setExpiredDt(LocalDateTime expiredDt) {
        this.expiredDt = expiredDt;
    }

    public void setExpiredDtIf(LocalDateTime expiredDt, boolean bool) {
        if (bool) {
            this.expiredDt = expiredDt;
        }
    }

    public void setExpiredDtIf(Supplier<LocalDateTime> expiredDt, boolean bool) {
        if (bool) {
            this.expiredDt = expiredDt.get();
        }
    }

    public void setExpiredDtIf(LocalDateTime expiredDt, Predicate<LocalDateTime> bool) {
        if (bool.test(expiredDt)) {
            this.expiredDt = expiredDt;
        }
    }

    public void setExpiredDtIf(LocalDateTime expiredDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... expiredDts) {
        if (bool.test(expiredDt)) {
            this.expiredDt = expiredDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : expiredDts) {
            expiredDt = supplier.get();
            if (bool.test(expiredDt)) {
                this.expiredDt = expiredDt;
                return;
            }
        }
    }

    public void setExpiredDtIfNot(LocalDateTime expiredDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(expiredDt)) {
            this.expiredDt = expiredDt;
        }
    }

    public void setExpiredDtIfNot(LocalDateTime expiredDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... expiredDts) {
        if (!bool.test(expiredDt)) {
            this.expiredDt = expiredDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : expiredDts) {
            expiredDt = supplier.get();
            if (!bool.test(expiredDt)) {
                this.expiredDt = expiredDt;
                return;
            }
        }
    }

    public void setExpiredDtIf(UnaryOperator<LocalDateTime> expiredDt) {
        this.expiredDt = expiredDt.apply(this.expiredDt);
    }


    /**
     * Getter for <code>win_user_authn.failed_cnt</code>.
     */
    @Override
    public Integer getFailedCnt() {
        return this.failedCnt;
    }

    /**
     * Setter for <code>win_user_authn.failed_cnt</code>.
     */
    @Override
    public void setFailedCnt(Integer failedCnt) {
        this.failedCnt = failedCnt;
    }

    public void setFailedCntIf(Integer failedCnt, boolean bool) {
        if (bool) {
            this.failedCnt = failedCnt;
        }
    }

    public void setFailedCntIf(Supplier<Integer> failedCnt, boolean bool) {
        if (bool) {
            this.failedCnt = failedCnt.get();
        }
    }

    public void setFailedCntIf(Integer failedCnt, Predicate<Integer> bool) {
        if (bool.test(failedCnt)) {
            this.failedCnt = failedCnt;
        }
    }

    public void setFailedCntIf(Integer failedCnt, Predicate<Integer> bool, Supplier<Integer>... failedCnts) {
        if (bool.test(failedCnt)) {
            this.failedCnt = failedCnt;
            return;
        }
        for (Supplier<Integer> supplier : failedCnts) {
            failedCnt = supplier.get();
            if (bool.test(failedCnt)) {
                this.failedCnt = failedCnt;
                return;
            }
        }
    }

    public void setFailedCntIfNot(Integer failedCnt, Predicate<Integer> bool) {
        if (!bool.test(failedCnt)) {
            this.failedCnt = failedCnt;
        }
    }

    public void setFailedCntIfNot(Integer failedCnt, Predicate<Integer> bool, Supplier<Integer>... failedCnts) {
        if (!bool.test(failedCnt)) {
            this.failedCnt = failedCnt;
            return;
        }
        for (Supplier<Integer> supplier : failedCnts) {
            failedCnt = supplier.get();
            if (!bool.test(failedCnt)) {
                this.failedCnt = failedCnt;
                return;
            }
        }
    }

    public void setFailedCntIf(UnaryOperator<Integer> failedCnt) {
        this.failedCnt = failedCnt.apply(this.failedCnt);
    }


    /**
     * Getter for <code>win_user_authn.failed_max</code>.
     */
    @Override
    public Integer getFailedMax() {
        return this.failedMax;
    }

    /**
     * Setter for <code>win_user_authn.failed_max</code>.
     */
    @Override
    public void setFailedMax(Integer failedMax) {
        this.failedMax = failedMax;
    }

    public void setFailedMaxIf(Integer failedMax, boolean bool) {
        if (bool) {
            this.failedMax = failedMax;
        }
    }

    public void setFailedMaxIf(Supplier<Integer> failedMax, boolean bool) {
        if (bool) {
            this.failedMax = failedMax.get();
        }
    }

    public void setFailedMaxIf(Integer failedMax, Predicate<Integer> bool) {
        if (bool.test(failedMax)) {
            this.failedMax = failedMax;
        }
    }

    public void setFailedMaxIf(Integer failedMax, Predicate<Integer> bool, Supplier<Integer>... failedMaxs) {
        if (bool.test(failedMax)) {
            this.failedMax = failedMax;
            return;
        }
        for (Supplier<Integer> supplier : failedMaxs) {
            failedMax = supplier.get();
            if (bool.test(failedMax)) {
                this.failedMax = failedMax;
                return;
            }
        }
    }

    public void setFailedMaxIfNot(Integer failedMax, Predicate<Integer> bool) {
        if (!bool.test(failedMax)) {
            this.failedMax = failedMax;
        }
    }

    public void setFailedMaxIfNot(Integer failedMax, Predicate<Integer> bool, Supplier<Integer>... failedMaxs) {
        if (!bool.test(failedMax)) {
            this.failedMax = failedMax;
            return;
        }
        for (Supplier<Integer> supplier : failedMaxs) {
            failedMax = supplier.get();
            if (!bool.test(failedMax)) {
                this.failedMax = failedMax;
                return;
            }
        }
    }

    public void setFailedMaxIf(UnaryOperator<Integer> failedMax) {
        this.failedMax = failedMax.apply(this.failedMax);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinUserAuthn other = (WinUserAuthn) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!this.createDt.equals(other.createDt))
            return false;
        if (this.modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!this.modifyDt.equals(other.modifyDt))
            return false;
        if (this.deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!this.deleteDt.equals(other.deleteDt))
            return false;
        if (this.commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!this.commitId.equals(other.commitId))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.authType == null) {
            if (other.authType != null)
                return false;
        }
        else if (!this.authType.equals(other.authType))
            return false;
        if (this.username == null) {
            if (other.username != null)
                return false;
        }
        else if (!this.username.equals(other.username))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        if (this.extraPara == null) {
            if (other.extraPara != null)
                return false;
        }
        else if (!this.extraPara.equals(other.extraPara))
            return false;
        if (this.extraUser == null) {
            if (other.extraUser != null)
                return false;
        }
        else if (!this.extraUser.equals(other.extraUser))
            return false;
        if (this.expiredDt == null) {
            if (other.expiredDt != null)
                return false;
        }
        else if (!this.expiredDt.equals(other.expiredDt))
            return false;
        if (this.failedCnt == null) {
            if (other.failedCnt != null)
                return false;
        }
        else if (!this.failedCnt.equals(other.failedCnt))
            return false;
        if (this.failedMax == null) {
            if (other.failedMax != null)
                return false;
        }
        else if (!this.failedMax.equals(other.failedMax))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.authType == null) ? 0 : this.authType.hashCode());
        result = prime * result + ((this.username == null) ? 0 : this.username.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.extraPara == null) ? 0 : this.extraPara.hashCode());
        result = prime * result + ((this.extraUser == null) ? 0 : this.extraUser.hashCode());
        result = prime * result + ((this.expiredDt == null) ? 0 : this.expiredDt.hashCode());
        result = prime * result + ((this.failedCnt == null) ? 0 : this.failedCnt.hashCode());
        result = prime * result + ((this.failedMax == null) ? 0 : this.failedMax.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinUserAuthn (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(userId);
        sb.append(", ").append(authType);
        sb.append(", ").append(username);
        sb.append(", ").append(password);
        sb.append(", ").append(extraPara);
        sb.append(", ").append(extraUser);
        sb.append(", ").append(expiredDt);
        sb.append(", ").append(failedCnt);
        sb.append(", ").append(failedMax);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinUserAuthn from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setUserId(from.getUserId());
        setAuthType(from.getAuthType());
        setUsername(from.getUsername());
        setPassword(from.getPassword());
        setExtraPara(from.getExtraPara());
        setExtraUser(from.getExtraUser());
        setExpiredDt(from.getExpiredDt());
        setFailedCnt(from.getFailedCnt());
        setFailedMax(from.getFailedMax());
    }

    @Override
    public <E extends IWinUserAuthn> E into(E into) {
        into.from(this);
        return into;
    }
}
