package pro.fessional.wings.warlock.service.auth.help;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.mapstruct.InheritInverseConfiguration;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;
import pro.fessional.wings.slardar.security.impl.DefaultWingsUserDetails;
import pro.fessional.wings.warlock.service.auth.WarlockAuthnService;

/**
 * auto generated by `wgmp` live template
 *
 * @author trydofor
 * @since 2021-02-23
 */
@Mapper
public interface AuthnDetailsMapper {

    @Mapping(target = "preAuthed", ignore = true)
    @Mapping(target = "enabled", ignore = true)
    @Mapping(target = "credentialsNonExpired", ignore = true)
    @Mapping(target = "authorities", ignore = true)
    @Mapping(target = "accountNonLocked", ignore = true)
    @Mapping(target = "accountNonExpired", ignore = true)
    void map(WarlockAuthnService.Details source, @MappingTarget DefaultWingsUserDetails target);

    @Mapping(target = "status", ignore = true)
    @Mapping(target = "expiredDt", ignore = true)
    @InheritInverseConfiguration
    void map(DefaultWingsUserDetails source, @MappingTarget WarlockAuthnService.Details target);

    AuthnDetailsMapper INSTANCE = Mappers.getMapper(AuthnDetailsMapper.class);

    /**
     * create new DefaultWingsUserDetails from the source Details
     *
     * @param source the source from
     * @return new target
     */
    @NotNull
    static DefaultWingsUserDetails of(@Nullable WarlockAuthnService.Details source) {
        final DefaultWingsUserDetails target = new DefaultWingsUserDetails();
        INSTANCE.map(source, target);
        return target;
    }

    /**
     * create new DefaultWingsUserDetails from the source Details
     *
     * @param source the source from
     * @return new target
     */
    @NotNull
    static WarlockAuthnService.Details of(@Nullable DefaultWingsUserDetails source) {
        final WarlockAuthnService.Details target = new WarlockAuthnService.Details();
        INSTANCE.map(source, target);
        return target;
    }

    /**
     * build the target DefaultWingsUserDetails from the source Details
     *
     * @param source the source from
     * @param target the target to
     */
    static void to(@Nullable DefaultWingsUserDetails source, @NotNull WarlockAuthnService.Details target) {
        INSTANCE.map(source, target);
    }

    /**
     * build the target DefaultWingsUserDetails from the source Details
     *
     * @param source the source from
     * @param target the target to
     */
    static void to(@Nullable WarlockAuthnService.Details source, @NotNull DefaultWingsUserDetails target) {
        INSTANCE.map(source, target);
    }

}
