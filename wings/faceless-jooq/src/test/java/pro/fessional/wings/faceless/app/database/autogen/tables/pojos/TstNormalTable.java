/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.faceless.app.database.autogen.tables.pojos;


import pro.fessional.wings.faceless.app.database.autogen.tables.interfaces.ITstNormalTable;
import pro.fessional.wings.faceless.enums.autogen.StandardLanguage;

import javax.annotation.processing.Generated;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;


/**
 * The table <code>wings_faceless.tst_normal_table</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9",
        "schema version:2022060102"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TstNormalTable implements ITstNormalTable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private LocalDateTime deleteDt;
    private Long commitId;
    private String valueVarchar;
    private BigDecimal valueDecimal;
    private Boolean valueBoolean;
    private Integer valueInt;
    private Long valueLong;
    private LocalDate valueDate;
    private LocalTime valueTime;
    private StandardLanguage valueLang;

    public TstNormalTable() {}

    public TstNormalTable(ITstNormalTable value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.valueVarchar = value.getValueVarchar();
        this.valueDecimal = value.getValueDecimal();
        this.valueBoolean = value.getValueBoolean();
        this.valueInt = value.getValueInt();
        this.valueLong = value.getValueLong();
        this.valueDate = value.getValueDate();
        this.valueTime = value.getValueTime();
        this.valueLang = value.getValueLang();
    }

    public TstNormalTable(
        Long id,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        LocalDateTime deleteDt,
        Long commitId,
        String valueVarchar,
        BigDecimal valueDecimal,
        Boolean valueBoolean,
        Integer valueInt,
        Long valueLong,
        LocalDate valueDate,
        LocalTime valueTime,
        StandardLanguage valueLang
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.valueVarchar = valueVarchar;
        this.valueDecimal = valueDecimal;
        this.valueBoolean = valueBoolean;
        this.valueInt = valueInt;
        this.valueLong = valueLong;
        this.valueDate = valueDate;
        this.valueTime = valueTime;
        this.valueLang = valueLang;
    }

    /**
     * Getter for <code>tst_normal_table.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>tst_normal_table.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    public void setIdIf(Long id, boolean bool) {
        if (bool) {
            this.id = id;
        }
    }

    public void setIdIf(Supplier<Long> id, boolean bool) {
        if (bool) {
            this.id = id.get();
        }
    }

    public void setIdIf(Long id, Predicate<Long> bool) {
        if (bool.test(id)) {
            this.id = id;
        }
    }

    public void setIdIf(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    public void setIdIfNot(Long id, Predicate<Long> bool) {
        if (!bool.test(id)) {
            this.id = id;
        }
    }

    public void setIdIfNot(Long id, Predicate<Long> bool, Supplier<Long>... ids) {
        if (!bool.test(id)) {
            this.id = id;
            return;
        }
        for (Supplier<Long> supplier : ids) {
            id = supplier.get();
            if (!bool.test(id)) {
                this.id = id;
                return;
            }
        }
    }

    public void setIdIf(UnaryOperator<Long> id) {
        this.id = id.apply(this.id);
    }


    /**
     * Getter for <code>tst_normal_table.create_dt</code>.
     */
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>tst_normal_table.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    public void setCreateDtIf(LocalDateTime createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIf(Supplier<LocalDateTime> createDt, boolean bool) {
        if (bool) {
            this.createDt = createDt.get();
        }
    }

    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIf(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
        }
    }

    public void setCreateDtIfNot(LocalDateTime createDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... createDts) {
        if (!bool.test(createDt)) {
            this.createDt = createDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : createDts) {
            createDt = supplier.get();
            if (!bool.test(createDt)) {
                this.createDt = createDt;
                return;
            }
        }
    }

    public void setCreateDtIf(UnaryOperator<LocalDateTime> createDt) {
        this.createDt = createDt.apply(this.createDt);
    }


    /**
     * Getter for <code>tst_normal_table.modify_dt</code>.
     */
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>tst_normal_table.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    public void setModifyDtIf(LocalDateTime modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIf(Supplier<LocalDateTime> modifyDt, boolean bool) {
        if (bool) {
            this.modifyDt = modifyDt.get();
        }
    }

    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIf(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
        }
    }

    public void setModifyDtIfNot(LocalDateTime modifyDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... modifyDts) {
        if (!bool.test(modifyDt)) {
            this.modifyDt = modifyDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : modifyDts) {
            modifyDt = supplier.get();
            if (!bool.test(modifyDt)) {
                this.modifyDt = modifyDt;
                return;
            }
        }
    }

    public void setModifyDtIf(UnaryOperator<LocalDateTime> modifyDt) {
        this.modifyDt = modifyDt.apply(this.modifyDt);
    }


    /**
     * Getter for <code>tst_normal_table.delete_dt</code>.
     */
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>tst_normal_table.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIf(Supplier<LocalDateTime> deleteDt, boolean bool) {
        if (bool) {
            this.deleteDt = deleteDt.get();
        }
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIf(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
        }
    }

    public void setDeleteDtIfNot(LocalDateTime deleteDt, Predicate<LocalDateTime> bool, Supplier<LocalDateTime>... deleteDts) {
        if (!bool.test(deleteDt)) {
            this.deleteDt = deleteDt;
            return;
        }
        for (Supplier<LocalDateTime> supplier : deleteDts) {
            deleteDt = supplier.get();
            if (!bool.test(deleteDt)) {
                this.deleteDt = deleteDt;
                return;
            }
        }
    }

    public void setDeleteDtIf(UnaryOperator<LocalDateTime> deleteDt) {
        this.deleteDt = deleteDt.apply(this.deleteDt);
    }


    /**
     * Getter for <code>tst_normal_table.commit_id</code>.
     */
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>tst_normal_table.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    public void setCommitIdIf(Long commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIf(Supplier<Long> commitId, boolean bool) {
        if (bool) {
            this.commitId = commitId.get();
        }
    }

    public void setCommitIdIf(Long commitId, Predicate<Long> bool) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIf(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
        }
    }

    public void setCommitIdIfNot(Long commitId, Predicate<Long> bool, Supplier<Long>... commitIds) {
        if (!bool.test(commitId)) {
            this.commitId = commitId;
            return;
        }
        for (Supplier<Long> supplier : commitIds) {
            commitId = supplier.get();
            if (!bool.test(commitId)) {
                this.commitId = commitId;
                return;
            }
        }
    }

    public void setCommitIdIf(UnaryOperator<Long> commitId) {
        this.commitId = commitId.apply(this.commitId);
    }


    /**
     * Getter for <code>tst_normal_table.value_varchar</code>.
     */
    @Override
    public String getValueVarchar() {
        return this.valueVarchar;
    }

    /**
     * Setter for <code>tst_normal_table.value_varchar</code>.
     */
    @Override
    public void setValueVarchar(String valueVarchar) {
        this.valueVarchar = valueVarchar;
    }

    public void setValueVarcharIf(String valueVarchar, boolean bool) {
        if (bool) {
            this.valueVarchar = valueVarchar;
        }
    }

    public void setValueVarcharIf(Supplier<String> valueVarchar, boolean bool) {
        if (bool) {
            this.valueVarchar = valueVarchar.get();
        }
    }

    public void setValueVarcharIf(String valueVarchar, Predicate<String> bool) {
        if (bool.test(valueVarchar)) {
            this.valueVarchar = valueVarchar;
        }
    }

    public void setValueVarcharIf(String valueVarchar, Predicate<String> bool, Supplier<String>... valueVarchars) {
        if (bool.test(valueVarchar)) {
            this.valueVarchar = valueVarchar;
            return;
        }
        for (Supplier<String> supplier : valueVarchars) {
            valueVarchar = supplier.get();
            if (bool.test(valueVarchar)) {
                this.valueVarchar = valueVarchar;
                return;
            }
        }
    }

    public void setValueVarcharIfNot(String valueVarchar, Predicate<String> bool) {
        if (!bool.test(valueVarchar)) {
            this.valueVarchar = valueVarchar;
        }
    }

    public void setValueVarcharIfNot(String valueVarchar, Predicate<String> bool, Supplier<String>... valueVarchars) {
        if (!bool.test(valueVarchar)) {
            this.valueVarchar = valueVarchar;
            return;
        }
        for (Supplier<String> supplier : valueVarchars) {
            valueVarchar = supplier.get();
            if (!bool.test(valueVarchar)) {
                this.valueVarchar = valueVarchar;
                return;
            }
        }
    }

    public void setValueVarcharIf(UnaryOperator<String> valueVarchar) {
        this.valueVarchar = valueVarchar.apply(this.valueVarchar);
    }


    /**
     * Getter for <code>tst_normal_table.value_decimal</code>.
     */
    @Override
    public BigDecimal getValueDecimal() {
        return this.valueDecimal;
    }

    /**
     * Setter for <code>tst_normal_table.value_decimal</code>.
     */
    @Override
    public void setValueDecimal(BigDecimal valueDecimal) {
        this.valueDecimal = valueDecimal;
    }

    public void setValueDecimalIf(BigDecimal valueDecimal, boolean bool) {
        if (bool) {
            this.valueDecimal = valueDecimal;
        }
    }

    public void setValueDecimalIf(Supplier<BigDecimal> valueDecimal, boolean bool) {
        if (bool) {
            this.valueDecimal = valueDecimal.get();
        }
    }

    public void setValueDecimalIf(BigDecimal valueDecimal, Predicate<BigDecimal> bool) {
        if (bool.test(valueDecimal)) {
            this.valueDecimal = valueDecimal;
        }
    }

    public void setValueDecimalIf(BigDecimal valueDecimal, Predicate<BigDecimal> bool, Supplier<BigDecimal>... valueDecimals) {
        if (bool.test(valueDecimal)) {
            this.valueDecimal = valueDecimal;
            return;
        }
        for (Supplier<BigDecimal> supplier : valueDecimals) {
            valueDecimal = supplier.get();
            if (bool.test(valueDecimal)) {
                this.valueDecimal = valueDecimal;
                return;
            }
        }
    }

    public void setValueDecimalIfNot(BigDecimal valueDecimal, Predicate<BigDecimal> bool) {
        if (!bool.test(valueDecimal)) {
            this.valueDecimal = valueDecimal;
        }
    }

    public void setValueDecimalIfNot(BigDecimal valueDecimal, Predicate<BigDecimal> bool, Supplier<BigDecimal>... valueDecimals) {
        if (!bool.test(valueDecimal)) {
            this.valueDecimal = valueDecimal;
            return;
        }
        for (Supplier<BigDecimal> supplier : valueDecimals) {
            valueDecimal = supplier.get();
            if (!bool.test(valueDecimal)) {
                this.valueDecimal = valueDecimal;
                return;
            }
        }
    }

    public void setValueDecimalIf(UnaryOperator<BigDecimal> valueDecimal) {
        this.valueDecimal = valueDecimal.apply(this.valueDecimal);
    }


    /**
     * Getter for <code>tst_normal_table.value_boolean</code>.
     */
    @Override
    public Boolean getValueBoolean() {
        return this.valueBoolean;
    }

    /**
     * Setter for <code>tst_normal_table.value_boolean</code>.
     */
    @Override
    public void setValueBoolean(Boolean valueBoolean) {
        this.valueBoolean = valueBoolean;
    }

    public void setValueBooleanIf(Boolean valueBoolean, boolean bool) {
        if (bool) {
            this.valueBoolean = valueBoolean;
        }
    }

    public void setValueBooleanIf(Supplier<Boolean> valueBoolean, boolean bool) {
        if (bool) {
            this.valueBoolean = valueBoolean.get();
        }
    }

    public void setValueBooleanIf(Boolean valueBoolean, Predicate<Boolean> bool) {
        if (bool.test(valueBoolean)) {
            this.valueBoolean = valueBoolean;
        }
    }

    public void setValueBooleanIf(Boolean valueBoolean, Predicate<Boolean> bool, Supplier<Boolean>... valueBooleans) {
        if (bool.test(valueBoolean)) {
            this.valueBoolean = valueBoolean;
            return;
        }
        for (Supplier<Boolean> supplier : valueBooleans) {
            valueBoolean = supplier.get();
            if (bool.test(valueBoolean)) {
                this.valueBoolean = valueBoolean;
                return;
            }
        }
    }

    public void setValueBooleanIfNot(Boolean valueBoolean, Predicate<Boolean> bool) {
        if (!bool.test(valueBoolean)) {
            this.valueBoolean = valueBoolean;
        }
    }

    public void setValueBooleanIfNot(Boolean valueBoolean, Predicate<Boolean> bool, Supplier<Boolean>... valueBooleans) {
        if (!bool.test(valueBoolean)) {
            this.valueBoolean = valueBoolean;
            return;
        }
        for (Supplier<Boolean> supplier : valueBooleans) {
            valueBoolean = supplier.get();
            if (!bool.test(valueBoolean)) {
                this.valueBoolean = valueBoolean;
                return;
            }
        }
    }

    public void setValueBooleanIf(UnaryOperator<Boolean> valueBoolean) {
        this.valueBoolean = valueBoolean.apply(this.valueBoolean);
    }


    /**
     * Getter for <code>tst_normal_table.value_int</code>.
     */
    @Override
    public Integer getValueInt() {
        return this.valueInt;
    }

    /**
     * Setter for <code>tst_normal_table.value_int</code>.
     */
    @Override
    public void setValueInt(Integer valueInt) {
        this.valueInt = valueInt;
    }

    public void setValueIntIf(Integer valueInt, boolean bool) {
        if (bool) {
            this.valueInt = valueInt;
        }
    }

    public void setValueIntIf(Supplier<Integer> valueInt, boolean bool) {
        if (bool) {
            this.valueInt = valueInt.get();
        }
    }

    public void setValueIntIf(Integer valueInt, Predicate<Integer> bool) {
        if (bool.test(valueInt)) {
            this.valueInt = valueInt;
        }
    }

    public void setValueIntIf(Integer valueInt, Predicate<Integer> bool, Supplier<Integer>... valueInts) {
        if (bool.test(valueInt)) {
            this.valueInt = valueInt;
            return;
        }
        for (Supplier<Integer> supplier : valueInts) {
            valueInt = supplier.get();
            if (bool.test(valueInt)) {
                this.valueInt = valueInt;
                return;
            }
        }
    }

    public void setValueIntIfNot(Integer valueInt, Predicate<Integer> bool) {
        if (!bool.test(valueInt)) {
            this.valueInt = valueInt;
        }
    }

    public void setValueIntIfNot(Integer valueInt, Predicate<Integer> bool, Supplier<Integer>... valueInts) {
        if (!bool.test(valueInt)) {
            this.valueInt = valueInt;
            return;
        }
        for (Supplier<Integer> supplier : valueInts) {
            valueInt = supplier.get();
            if (!bool.test(valueInt)) {
                this.valueInt = valueInt;
                return;
            }
        }
    }

    public void setValueIntIf(UnaryOperator<Integer> valueInt) {
        this.valueInt = valueInt.apply(this.valueInt);
    }


    /**
     * Getter for <code>tst_normal_table.value_long</code>.
     */
    @Override
    public Long getValueLong() {
        return this.valueLong;
    }

    /**
     * Setter for <code>tst_normal_table.value_long</code>.
     */
    @Override
    public void setValueLong(Long valueLong) {
        this.valueLong = valueLong;
    }

    public void setValueLongIf(Long valueLong, boolean bool) {
        if (bool) {
            this.valueLong = valueLong;
        }
    }

    public void setValueLongIf(Supplier<Long> valueLong, boolean bool) {
        if (bool) {
            this.valueLong = valueLong.get();
        }
    }

    public void setValueLongIf(Long valueLong, Predicate<Long> bool) {
        if (bool.test(valueLong)) {
            this.valueLong = valueLong;
        }
    }

    public void setValueLongIf(Long valueLong, Predicate<Long> bool, Supplier<Long>... valueLongs) {
        if (bool.test(valueLong)) {
            this.valueLong = valueLong;
            return;
        }
        for (Supplier<Long> supplier : valueLongs) {
            valueLong = supplier.get();
            if (bool.test(valueLong)) {
                this.valueLong = valueLong;
                return;
            }
        }
    }

    public void setValueLongIfNot(Long valueLong, Predicate<Long> bool) {
        if (!bool.test(valueLong)) {
            this.valueLong = valueLong;
        }
    }

    public void setValueLongIfNot(Long valueLong, Predicate<Long> bool, Supplier<Long>... valueLongs) {
        if (!bool.test(valueLong)) {
            this.valueLong = valueLong;
            return;
        }
        for (Supplier<Long> supplier : valueLongs) {
            valueLong = supplier.get();
            if (!bool.test(valueLong)) {
                this.valueLong = valueLong;
                return;
            }
        }
    }

    public void setValueLongIf(UnaryOperator<Long> valueLong) {
        this.valueLong = valueLong.apply(this.valueLong);
    }


    /**
     * Getter for <code>tst_normal_table.value_date</code>.
     */
    @Override
    public LocalDate getValueDate() {
        return this.valueDate;
    }

    /**
     * Setter for <code>tst_normal_table.value_date</code>.
     */
    @Override
    public void setValueDate(LocalDate valueDate) {
        this.valueDate = valueDate;
    }

    public void setValueDateIf(LocalDate valueDate, boolean bool) {
        if (bool) {
            this.valueDate = valueDate;
        }
    }

    public void setValueDateIf(Supplier<LocalDate> valueDate, boolean bool) {
        if (bool) {
            this.valueDate = valueDate.get();
        }
    }

    public void setValueDateIf(LocalDate valueDate, Predicate<LocalDate> bool) {
        if (bool.test(valueDate)) {
            this.valueDate = valueDate;
        }
    }

    public void setValueDateIf(LocalDate valueDate, Predicate<LocalDate> bool, Supplier<LocalDate>... valueDates) {
        if (bool.test(valueDate)) {
            this.valueDate = valueDate;
            return;
        }
        for (Supplier<LocalDate> supplier : valueDates) {
            valueDate = supplier.get();
            if (bool.test(valueDate)) {
                this.valueDate = valueDate;
                return;
            }
        }
    }

    public void setValueDateIfNot(LocalDate valueDate, Predicate<LocalDate> bool) {
        if (!bool.test(valueDate)) {
            this.valueDate = valueDate;
        }
    }

    public void setValueDateIfNot(LocalDate valueDate, Predicate<LocalDate> bool, Supplier<LocalDate>... valueDates) {
        if (!bool.test(valueDate)) {
            this.valueDate = valueDate;
            return;
        }
        for (Supplier<LocalDate> supplier : valueDates) {
            valueDate = supplier.get();
            if (!bool.test(valueDate)) {
                this.valueDate = valueDate;
                return;
            }
        }
    }

    public void setValueDateIf(UnaryOperator<LocalDate> valueDate) {
        this.valueDate = valueDate.apply(this.valueDate);
    }


    /**
     * Getter for <code>tst_normal_table.value_time</code>.
     */
    @Override
    public LocalTime getValueTime() {
        return this.valueTime;
    }

    /**
     * Setter for <code>tst_normal_table.value_time</code>.
     */
    @Override
    public void setValueTime(LocalTime valueTime) {
        this.valueTime = valueTime;
    }

    public void setValueTimeIf(LocalTime valueTime, boolean bool) {
        if (bool) {
            this.valueTime = valueTime;
        }
    }

    public void setValueTimeIf(Supplier<LocalTime> valueTime, boolean bool) {
        if (bool) {
            this.valueTime = valueTime.get();
        }
    }

    public void setValueTimeIf(LocalTime valueTime, Predicate<LocalTime> bool) {
        if (bool.test(valueTime)) {
            this.valueTime = valueTime;
        }
    }

    public void setValueTimeIf(LocalTime valueTime, Predicate<LocalTime> bool, Supplier<LocalTime>... valueTimes) {
        if (bool.test(valueTime)) {
            this.valueTime = valueTime;
            return;
        }
        for (Supplier<LocalTime> supplier : valueTimes) {
            valueTime = supplier.get();
            if (bool.test(valueTime)) {
                this.valueTime = valueTime;
                return;
            }
        }
    }

    public void setValueTimeIfNot(LocalTime valueTime, Predicate<LocalTime> bool) {
        if (!bool.test(valueTime)) {
            this.valueTime = valueTime;
        }
    }

    public void setValueTimeIfNot(LocalTime valueTime, Predicate<LocalTime> bool, Supplier<LocalTime>... valueTimes) {
        if (!bool.test(valueTime)) {
            this.valueTime = valueTime;
            return;
        }
        for (Supplier<LocalTime> supplier : valueTimes) {
            valueTime = supplier.get();
            if (!bool.test(valueTime)) {
                this.valueTime = valueTime;
                return;
            }
        }
    }

    public void setValueTimeIf(UnaryOperator<LocalTime> valueTime) {
        this.valueTime = valueTime.apply(this.valueTime);
    }


    /**
     * Getter for <code>tst_normal_table.value_lang</code>.
     */
    @Override
    public StandardLanguage getValueLang() {
        return this.valueLang;
    }

    /**
     * Setter for <code>tst_normal_table.value_lang</code>.
     */
    @Override
    public void setValueLang(StandardLanguage valueLang) {
        this.valueLang = valueLang;
    }

    public void setValueLangIf(StandardLanguage valueLang, boolean bool) {
        if (bool) {
            this.valueLang = valueLang;
        }
    }

    public void setValueLangIf(Supplier<StandardLanguage> valueLang, boolean bool) {
        if (bool) {
            this.valueLang = valueLang.get();
        }
    }

    public void setValueLangIf(StandardLanguage valueLang, Predicate<StandardLanguage> bool) {
        if (bool.test(valueLang)) {
            this.valueLang = valueLang;
        }
    }

    public void setValueLangIf(StandardLanguage valueLang, Predicate<StandardLanguage> bool, Supplier<StandardLanguage>... valueLangs) {
        if (bool.test(valueLang)) {
            this.valueLang = valueLang;
            return;
        }
        for (Supplier<StandardLanguage> supplier : valueLangs) {
            valueLang = supplier.get();
            if (bool.test(valueLang)) {
                this.valueLang = valueLang;
                return;
            }
        }
    }

    public void setValueLangIfNot(StandardLanguage valueLang, Predicate<StandardLanguage> bool) {
        if (!bool.test(valueLang)) {
            this.valueLang = valueLang;
        }
    }

    public void setValueLangIfNot(StandardLanguage valueLang, Predicate<StandardLanguage> bool, Supplier<StandardLanguage>... valueLangs) {
        if (!bool.test(valueLang)) {
            this.valueLang = valueLang;
            return;
        }
        for (Supplier<StandardLanguage> supplier : valueLangs) {
            valueLang = supplier.get();
            if (!bool.test(valueLang)) {
                this.valueLang = valueLang;
                return;
            }
        }
    }

    public void setValueLangIf(UnaryOperator<StandardLanguage> valueLang) {
        this.valueLang = valueLang.apply(this.valueLang);
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TstNormalTable other = (TstNormalTable) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!this.createDt.equals(other.createDt))
            return false;
        if (this.modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!this.modifyDt.equals(other.modifyDt))
            return false;
        if (this.deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!this.deleteDt.equals(other.deleteDt))
            return false;
        if (this.commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!this.commitId.equals(other.commitId))
            return false;
        if (this.valueVarchar == null) {
            if (other.valueVarchar != null)
                return false;
        }
        else if (!this.valueVarchar.equals(other.valueVarchar))
            return false;
        if (this.valueDecimal == null) {
            if (other.valueDecimal != null)
                return false;
        }
        else if (!this.valueDecimal.equals(other.valueDecimal))
            return false;
        if (this.valueBoolean == null) {
            if (other.valueBoolean != null)
                return false;
        }
        else if (!this.valueBoolean.equals(other.valueBoolean))
            return false;
        if (this.valueInt == null) {
            if (other.valueInt != null)
                return false;
        }
        else if (!this.valueInt.equals(other.valueInt))
            return false;
        if (this.valueLong == null) {
            if (other.valueLong != null)
                return false;
        }
        else if (!this.valueLong.equals(other.valueLong))
            return false;
        if (this.valueDate == null) {
            if (other.valueDate != null)
                return false;
        }
        else if (!this.valueDate.equals(other.valueDate))
            return false;
        if (this.valueTime == null) {
            if (other.valueTime != null)
                return false;
        }
        else if (!this.valueTime.equals(other.valueTime))
            return false;
        if (this.valueLang == null) {
            if (other.valueLang != null)
                return false;
        }
        else if (!this.valueLang.equals(other.valueLang))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.valueVarchar == null) ? 0 : this.valueVarchar.hashCode());
        result = prime * result + ((this.valueDecimal == null) ? 0 : this.valueDecimal.hashCode());
        result = prime * result + ((this.valueBoolean == null) ? 0 : this.valueBoolean.hashCode());
        result = prime * result + ((this.valueInt == null) ? 0 : this.valueInt.hashCode());
        result = prime * result + ((this.valueLong == null) ? 0 : this.valueLong.hashCode());
        result = prime * result + ((this.valueDate == null) ? 0 : this.valueDate.hashCode());
        result = prime * result + ((this.valueTime == null) ? 0 : this.valueTime.hashCode());
        result = prime * result + ((this.valueLang == null) ? 0 : this.valueLang.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TstNormalTable (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(valueVarchar);
        sb.append(", ").append(valueDecimal);
        sb.append(", ").append(valueBoolean);
        sb.append(", ").append(valueInt);
        sb.append(", ").append(valueLong);
        sb.append(", ").append(valueDate);
        sb.append(", ").append(valueTime);
        sb.append(", ").append(valueLang);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ITstNormalTable from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setValueVarchar(from.getValueVarchar());
        setValueDecimal(from.getValueDecimal());
        setValueBoolean(from.getValueBoolean());
        setValueInt(from.getValueInt());
        setValueLong(from.getValueLong());
        setValueDate(from.getValueDate());
        setValueTime(from.getValueTime());
        setValueLang(from.getValueLang());
    }

    @Override
    public <E extends ITstNormalTable> E into(E into) {
        into.from(this);
        return into;
    }
}
